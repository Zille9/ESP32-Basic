// v1.89b:12.12.2023          -TFT-Treiber für ILI9341 240x320 Pixel-Display integriert - Treiber ist über #define auswählbar
//                            -Breadboard-Test soweit erfolgreich
//                            -ab und zu startet das Display nicht korrekt, Ursache muss noch erforscht werden -> Print_info etwas geändert, scheint jetzt zu funktionieren
//                            -neue Platinenvariante muss noch erstellt werden, welche alle Grafik-Varianten vereint (AV,VGA,TFT)
//
// v1.88b:03.12.2023          -MIDI-Funktionalität wieder entfernt
//                            -Sound-Befehl wieder die ursprüngliche Routine aktiviert
//                            -Augenmerk soll mehr auf Funktionalität als Basic-Messcomputer gesetzt werden
//                            -Akku-Messroutine über define auswählbar
//                            -15531 Zeilen/sek.
//
// v1.87b:08.08.2023          -erste MIDI-Funktionalität integriert
//                            -der Sound-Befehl wird für die interne Ausgabe von Tönen benutzt, die ursprüngliche Routine wurde deaktiviert
//                            -Syntax: SND_N 0,45,127,100 -> Chan,Note,Velocity,Duration
//                            -die Angabe von Duration (Dauer) muss noch geändert werden, damit mehrere Noten gleichzeitig erklingen können
//                            -16329 Zeilen/sek.
//
// v1.86b:07.08.2023          -Beginn der Einbindung des Adafruit VS1053 Boards für MIDI-Funktionalität, um die Soundfunktionen aufzupeppen
//                            -2GM-Soundbänke + 2Drumkit-Bänke
//                            -Pan-Funktion, Reverb-Effekt, Pitch-Funktion, Polyfonie bis zu 64 Stimmen
//                            -erste Trockentest's sind vielversprechend
//                            -ein neues Board wird eine zusätzliche MIDI-IN-Buchse besitzen, um das Modul auch von außen mit einem
//                            -MIDI-Keyboard spielen zu können
//                            -ebenfalls geplant ist ein MIDI-Player, der MIDI-Dateien von SD-Karte abspielt
//                            -wenn alles funktioniert, wird der ursprüngliche Sound-Befehl überflüssig
//
// v1.85b:31.07.2023          -Umstellung Arduino IDE auf 2.x, scheint jetzt zu funktionieren.....
//                            -Fehlerbehandlung funktioniert nicht mehr, Fehler führen zu einer "Syntax Error!" Dauerschleife ???
//                            -erst mal wieder auf 1.06 zurück-geswitcht :-( ärgerlich.
//                            -Neue Idee: als Soundmodul ein GM-Modul (VS1053 hat MIDI inkl. Midi-Instrumente on board)
//                            -Ansteuerung über MIDI-Befehle, möglich auch über Optokoppler von außen :-)
//                            -16413 Zeilen/sek.
//
// v1.84b:18.07.2023          -Blinkfrequenz des Cursors in fabglconf.h auf 200ms gesetzt
//                            -Befehl FILL zum füllen unregelmässiger Formen begonnen
//                            -ESP32Time.h hinzugefügt, mit dessen Hilfe jetzt der Datei-Zeitstempel beim Speichern hinzugefügt wird
//                            -cmd_dir - Routine mit der Ausgabe des Datei-Zeitstempels erweitert
//                            -16275 Zeilen/sek.
//
// v1.83b:15.07.2023          -cmd_new mit setzen des Hauptfesters ergänzt, nach einem NEW wurden die Fensterparameter zwar gelöscht aber nicht das
//                            -Hauptfenster gesetzt, dadurch hing der Cursor in der linken oberen Ecke fest
//                            -Move_up-Subroutine etwas erweitert, jetzt wird nach dem Kopieren des Fensterinhaltes die letzte Zeile gelöscht,
//                            -das war nötig, weil sonst eventuell existierender Text in der letzten Zeile immer wieder mitkopiert wurde
//                            -Startbildschirm mit der Anzeige von BuiltTime ergänzt
//                            -list_out Anzahl der Ausgabezeilen nun abhängig vom gewählten Font
//                            -list_out um den Parameter bis zu welcher Zeile ausgegeben werden soll, erweitert (LIST 10,50 - Ausgabe Zeile 10 bis 50)
//                            -16305 Zeilen/sek.
//
// v1.82b:11.07.2023          -DATA-Verarbeitung auf Arrays erweitert
//                            -FILE_RD auf Arrays erweitert
//                            -Fehler in Array-Dimensionierung behoben, Array-Felder wurden zu gross berechnet
//                            -Fehler in der ELSE Verarbeitung entdeckt, bei dem Versuch, die Else-Anweisung in der gleichen Zeile zu bearbeiten
//                            -wurden auch die nach nicht erfolgreicher IF-Verarbeitung stehende Befehle ausgeführt,
//                            -was manche Programme nicht ausführbar machte, ELSE erst mal wieder in den Urzustand versetzt (nächste Zeile)
//                            -Routine line_terminator geändert, jetzt erfolgt erst ein Carrige-Return und dann ein Next-Line,
//                            -war vorher umgekehrt, das führte dazu, das in gespeicherten Programmen zwischen den Zeilen immer eine Leerzeile
//                            -eingefügt war, jetzt wird Zeile für Zeile korrekt geschrieben
//                            -Anzahl der Ausgabezeilen bei Memory_Dump und DIR ist jetzt vom verwendeten Font abhängig
//                            -17205 Zeilen/sek.
//
// v1.81b:09.07.2023          -WINDOW-Befehl um die Möglichkeit einen Fenstertitel zu setzen ergänzt
//                            -CLS entsprechend angepasst
//                            -CLS-Scrolleffekt wieder deaktiviert, da die unterste Bildschirmzeile beim Scrolling nicht berücksichtigt wird
//                            -Bildschirmausgabe weiter auf die Windowfunktion angepasst (Datei-Befehle, Memory_Dump)
//                            -Variable Pencolor entfernt, führte zu unlogischen Farbreaktionen
//                            -PEN-Befehl ändert nur temporär die Zeichenfarbe COL-Befehl ändert die Farben permanent
//                            -Fehler in der list_out-Routine behoben, wenn eine Zeile genau eine Bildschirmbreite lang war, wurde kein Zeilenumbruch
//                            -ausgelöst und die nächste Zeile überschrieb die vorherige auf dem Bildchirm
//                            -Funktionstasten dürfen im Fenster (Window) nicht benutzt werden, der ESP hängt sich auf???!
//                            -subroutine printnum etwas optimiert
//                            -16452 Zeilen/sek.
//
// v1.80b:08.07.2023          -WINDOW-komplett neu erstellt - ohne SetscrollRegion, sieht schon viel besser aus
//                            -CLS-Befehl auf Scrolleffekt geändert, das sieht mehr Retro aus :-)
//                            -fehlt noch die Speicherung der Cursorposition, momentan werden immer Initialwerte gesetzt, wenn das Fenster
//                            -gewechselt wird
//                            -Speicherung der Cursorposition erledigt, beim Fensterwechsel wird die alte Cursorposition in der nächsten Zeile gesetzt
//                            -nicht ganz korrekt aber akzeptabel
//                            -Hinweis: die Cursortasten, Del und Ins sind im Fenster wirkungslos bzw. erzeugen Pseudo-char's,
//                            -nur so konnte ein ESP-Absturz verhindert werden
//                            -Taste F1 (Grafiksymbole on/off) schaltet zur optischen Signalisation die Scroll-LED ein und aus
//// v1.79b:07.07.2023          -umfangreiche Änderungen der diversen Bildschirmausgaben, um die Window-Funktion zu verbessern
//                            -Frame-Befehl wurde durch WINDOW ersetzt
//                            -Syntax: WINDOW(nr,x,y,xx,yy<,color,Titel>) ->Koordinaten müssen als Zeichenkoordinaten eingegeben werden
//                            -d.h. das x und y Positionen den Cursorpositionen entsprechen müssen (abhängig vom gewählten Font)
//                            -noch nicht perfekt, Cursortasten,Entf und Einfg lassen den Cursor verschwinden und der ESP hängt sich auf??!
//
// v1.78b:05.07.2023          -begonnen eine Window-Funktion im Retro-Style zu integrieren
//                            -dafür wurde der vorläufige Befehl FRAME geschaffen
//                            -erste Tests sehen schon vielversprechend aus
//                            -nur die diversen Fonts machen die Sache etwas komplizierter
//                            -Ausgaben funktionieren über Outchar, Cls-Befehl berücksichtigt jetzt das Fenster indem sich der Cursor befindet
//                            -Scrolling bei Zeilenumbruch funktioniert ebenfalls
//                            -Der Befehl WIN (oder Window) wird die Funktion, wenn fertig, übernehmen.
//                            -16563 Zeilen/sek.
//
// v1.77b:04.07.2023          -FILE_PS(val) hinzugefügt um die Position innerhalb einer geöffneten Datei zu setzen
//                            -dies funktioniert nur im Lesemodus (FILE_RD!!!)
//                            -Code etwas zusammengefasst
//                            -help_sys muss noch um WIN ergänzt werden
//                            -15072 Zeilen/sek.
//
// v1.76b:03.07.2023          -diverse Tools auf Funktionstasten gelegt
//                            -Grafiksymbole auf F1
//                            -Befehlt TRON/TROFF auf F2 - dadurch Tron-Befehl eingespart
//                            -Ausgabe Char-Codes auf F3(32-127) und F4(128-255)
//                            -Farbcode-Tabelle auf F5
//                            -? als alternative zu Print hinzugefügt
//                            -semincolon - Bearbeitung weiter korrigiert, war noch nicht ganz korrekt aber jetzt sollte es passen
//                            -mit dem Befehl WIN(x,y,xx,yy) kann die Scrollregion für den Scrollbefehl eingestellt werden
//                            -mal sehen, ob das brauchbar ist ->dies ist keine Window-Funktion, da die Textausgabe unberührt bleibt
//                            -VGA16-Programmteile entfernt - es gibt nur noch 64 Farben
//                            -15822 Zeilen/sek.
//
// v1.75b:30.06.2023          -Befehl GRID geschaffen ->erzeugt ein Rasterfeld variabler Grösse
//                            -GRID(x,y,x_zellen,y_zellen,x_pixelbreite,y_pixelhöhe,rahmen_farbe,grid_farbe,skala,pfeile,rahmen)
//                            -Befehl TEXT für pixelgenaue Textausgaben ->TEXT(x,y,Zeichenkette)
//                            -Funktionstaste F1 schaltet in den Grafiksymbol-Modus, so sind die Grafiksymbole im font_8x8 über die Tastatur erreichbar
//                            -Stringverarbeitung angepasst und korrigiert, normale Strings konnten keine Leerzeichen als String aufnehmen
//                            -Programm Hanoi.Bas mit Grafiksymbolen und etwas Farbe aufgehübscht
//                            -15945 Zeilen/sek.
//
// v1.74b:29.06.2023          -Befehl FWRITE und FREAD zusammengefasst in FILE_WR und FILE_RD ->Helpsystem angepasst
//                            -FILE_RD funktionsfähig ->FILE_RD A$,A,B - Typprüfung muss selbst übernommen werden
//                            -Übergabe an Arrays zur Zeit noch nicht möglich nur über Umweg->A$(3)=A$, A(1,2)=A
//                            -der Versuch, Basic im Unterverzeichnis arbeiten zu lassen funktioniert zwar aber die Geschwindigkeit von Dateioperationen
//                            -bricht brutal ein - beim Programm FILE_RD.BAS ca. um den Faktor 10
//                            -man sollte Basic also im Root-Verzeichnis arbeiten lassen
//                            -FILE-Funktionen ausgelagert ->FILE_RW.ino
//                            -DIM erweitert, jetzt sind verkettete Dimensionierungen möglich ->DIM a$(3),S(8),T(7)
//                            -16470 Zeilen/sek.
//
// v1.73b:24.06.2023          -Befehl BLOAD"Filename.bin" zum Laden von Binärdateien integriert
//                            -HELP Funktion optisch etwas verbessert
//                            -RUN-CPM als funktionsfähige (sehr schnelle) CP/M Emulation entdeckt - Dateiaustausch einfacher (Unterverzeichnisse auf SD-Card als Laufwerke)
//                            -Rückkehrroutine in RUN-CPM integriert->der Befehl Exit unter RUN-CPM stoppt den Emulator und lädt wieder das Basic32 :-)
//                            -Rückkehrroutine ausgelagert (updater.ino)
//                            -EEPROM und FRAM-Routinen ausgelagert (Memory_RW.ino)
//                            -OPT-Befehl erweitert OPT PATH="Workdir" speichert das Arbeitsverzeichnis im EEPROM und setzt den Pfad beim Initialisieren der SD-Karte
//                            -16755 Zeilen/sek.
//
// v1.72b:22.06.2023          -Befehl Type zum Betrachten von Text- oder Basic-Dateien auf dem Bildschirm
//                            -hatte sich als notwendig herausgestellt für die Schaffung der Befehle FWRITE und FREAD
//                            -LOAD Befehl erweitert LOAD"Filename.BAS",1 startet das Programm sofort (gleiche Funktion wie Start"Filename.BAS")
//                            -PRINT Befehl korrigiert die Zeile : For I=1 to 20:print i,:next i führte dazu,das das Komma wirkungslos war
//                            -Marker semicolon jetzt für , und ; aktiv
//                            -Akku-Überwachung als Option definiert (#define Akkualarm_enabled)
//                            -Start-Prozedur überarbeitet, wurde ein frischer ESP geflasht, konnte es vorkommen, das Vorder-und Hintergrundfarbe gleich waren
//                            -dadurch war der Startbildschirm unsichtbar, jetzt werden beim Erststart Standardwerte gesetzt
//                            -16275 Zeilen/sek.
//
// v1.71b:20.06.2023          -Kurzhilfe in help_sys.h ausgelagert
//                            -Kurzhilfe soweit fertig und funktionstüchtig
//                            -Befehl FWRITE zum schreiben von numerischen Werten und Strings funktionsfähig
//                            -der Befehl TYPE zum anzeigen von Dateiinhalten auf dem Bildschirm wäre noch hilfreich
// v1.70b:12.06.2023          -Befehle Load,Save und Start modifiziert, Save ohne Parameter speichert das im Ram befindliche Programm im FRAM
//                            -Load ohne Parameter lädt das im FRAM befindliche Programm in den Arbeitsspeicher
//                            -Start ohne Parameter lädt und startet ein im FRAM abgelegtes Programm
//                            -Cursor wieder in blinkendes Viereck zurück geändert, der Unterstrich war in manchen Situationen schlecht zu erkennen
//                            -Datei-Lese- und Schreibfunktionen fehlen noch, um zBsp.Sensordaten zu schreiben bzw. zu lesen
//                            -OPEN ,FREAD, FWRITE, CLOSE wären mögliche Befehle, Serial-Funktionen müssen noch komplettiert werden
//                            -begonnen, eine kurzhilfe für alle Befehle und Funktionen zu integrieren,.... soviele Baustellen :-|
//                            -16461 Zeilen/sek.
//
// v1.69b:12.06.2023          -Font_8x8.h etwas geändert ->einige Grafiksymbole vom KC87 übernommen
//                            -Logik-Auswertung AND und OR überarbeitet, scheint jetzt zu funktionieren
//                            -tron-marker aktiviert sich ständig von selbst nach Fehlern oder Neustart von Programmen
//                            -werde auf bool ändern, mal sehen, ob das hilft
//
// v1.68b:09.06.2023          -Fehler in Print-Routine behoben, bei Printausgaben, welche in der gleichen Zeile durch : getrennte Befehle enthielt, wurde das Semikolon wirkungslos
//                            -jetzt werden alle Ausgaben nach einem Semikolon in der gleichen Zeile ausgeführt, erst ein NL (new Line) oder ein Print ohne ; führt zu einer neuen Zeile
//                            -am einfachsten ist ein Print einzufügen, um die Ausgabe in einer neuen Zeile beginnen zu lassen.
//                            -Unterprogramm get_value() geändert ->Fehlerausgabe entfernt, das führte zum Bsp. bei Input zum Programmabbruch, das ist ungewollt
//                            -ausserdem wurde damit das Problem der doppelten Fehlerausgabe behoben
//                            -Aussehen des Cursors geändert in Underline (m_emuState.cursorStyle= 3; in terminal.cpp)
//                            -Fehler in den Auswertungen von AND u. OR entdeckt, es wird nur eine Bedingung ausgewertet
//                            -mathematische Funktionen MAP und CONS (constrain) hinzugefügt
//                            -18105 Zeilen/sek.
//
// v1.67b:01.06.2023          -Funktion GPIC(n) eingefügt PRINT GPIC(0)->Breite GPIC(1)->Höhe der letzten geladenen BMP-Datei
//                            -Versuch einen SD-Loader zu integrieren, CP/M kann geladen werden und funktioniert, nur komm ich nicht mehr zum Basic zurück :-(
//                            -in dieser Beziehung ist die Arduinowelt doof, alles muss geflasht werden :-(
//                            -mal sehen, ob ich eine Lösung finde, wäre cool, andere Programme zu laden und wieder zum Basic zurückzukehren.
//                            -18033 Zeilen/sek.// v1.66b:25.05.2023          -Skalierung funktioniert jetzt besser
//                            -Routine verbessert, jetzt dauern auch sehr grosse Bilder nicht mehr ewig
//                            -krumme Formate führen allerdings zu Verzerrungen, Bilder sollten im Verhältnis dem Bildschirmformat entsprechen
//                            -Fehler in der Darstellungsroutine behoben, war das Bild kleiner als die Bildschirmauflösung, wurde das Bild nicht dargestellt
//                            -Bildschirmauflösung wird jetzt berücksichtigt damit ist die Darstellung auch bei 400x300 korrekt
//                            -18200 Zeilen/sek.
//
// v1.66b:25.05.2023          -Skalierung funktioniert jetzt besser
//                            -Routine verbessert, jetzt dauern auch sehr grosse Bilder nicht mehr ewig
//                            -krumme Formate führen allerdings zu Verzerrungen, Bilder sollten im Verhältnis dem Bildschirmformat entsprechen
//                            -Fehler in der Darstellungsroutine behoben, war das Bild kleiner als die Bildschirmauflösung, wurde das Bild nicht dargestellt
//                            -Bildschirmauflösung wird jetzt berücksichtigt damit ist die Darstellung auch bei 400x300 korrekt
//                            -18200 Zeilen/sek.
//
// v1.65b:23.05.2023          -Export des Bildschirminhaltes (oder eines Ausschnittes) im BMP-Format funktioniert
//                            -Import BMP-Datei funktioniert ebenfalls, Laden eines Bildes dauert ca.6.5sek.
//                            -Skalierung von größeren Bildern (>320x240) nicht perfekt aber funktionstüchtig
//                            -18099 Zeilen/sek.
//
// v1.64b:19.05.2023          -Laden (PIC_L(Adr,Filename)) und Speichern (PIC_S(Adr,Filename)) funktioniert
//                            -Datei-Sicherheitsabfragen für PIC_L und PIC_S hinzugefügt, Puffer auf 1024 Bytes erhöht ->Laden und Speichern erfolgt schneller
//                            -nächster Schritt: Daten von und ins BMP-Format wandeln und speichern/laden
//                            -18102 Zeilen/sek.
//
// v1.63b:12.05.2023          -erneut begonnen den PIC-Befehl zu integrieren, für erste Tests kann mit PIC_P(Adr) ein Grafikbildschirm
//                            -im FRAM abgelegt werden mit PIC_D(Adr) kann der gesicherte Bildinhalt wieder auf dem Bildschirm dargestellt werden
//                            -PIC_P(Adr<,x,y,xx,yy>) speichert den Bildausschnitt x,y,xx,yy PIC_P(Adr) speichert den gesamten Bildschirm
//                            -PIC_D(Adr,<x,y><,mode>) lädt die Bilddaten an Position x,y,mode=1 ->Hintergrund erhält die aktuelle Hintergrundfarbe
//                            -nächster Schritt: Laden und Speichern der Bilddaten auf SD-Karte
//                            -Unterprogramm FilenameWord eingespart - Umstellung der Dateioperationen auf die Stringfunktionen
//                            -damit ist die Übergabe des Dateinamens als Stringvariable möglich
//                            -17727 Zeilen/sek.
//
// v1.62b:07.05.2023          -COM-Befehl modifiziert ->COM_S(RX,TX,Baud) bzw. COM_S(0), COM_P(Zeichenkette,...), COM_W(Zeichenkette,...),
//                            -COM_T -> sendet das Programm im Speicher an die ser. Schnittstelle
//                            -Theme jetzt mit OPT THEME=x speicherbar, werden Farben oder Font über OPT gespeichert, wird beim Start das Theme ignoriert
//                            -Startbildschirm etwas angepasst ->Font_offset eingespart, wird jetzt berechnet
//                            -ein Farbbalken zeigt jetzt zusätzlich die Akku-Kapazität an ->mal sehen, ob das so bleibt
//                            -16575 Zeile/sek.
//
// v1.61b:04.05.2023          -begonnen serielle Funktionen zu integrieren, noch ist das Konzept nicht ganz klar
//                            -RX-Puffer der seriellen Schnittstelle auf 1024 Bytes erhöht, so können ganze Basic-Programme über die Com-Schnittstelle vom PC eingelesen werden,
//                            -ohne verlorene Zeichen (gibt ja keine Flusskontrolle)
//                            -bisherige Funktionen P=print W=write T=transfer (List)
//                            -COM P und COM W können jetzt verkettete Ausgaben (wie Print) durchführen (P mit, W ohne Zeilenumbruch)
//                            -17847 Zeilen/sek.
//
// v1.60b:29.04.2023          -DURCHBRUCH: es ist gelungen, den SPI-Port mit SD-Karte "und" FRAM zu betreiben ->FRAM_CS=Pin 0 (Sharing mit Flash-Taste);
//                            -diverse Aktivierungen und Deaktivierungen der einzelnen Treiber machte es möglich :D
//                            -somit können die vorherigen Einschränkungen zurückgenommen werden
//                            -mein BASIC-LAPTOP ist fertig :-) ->Befehl Akku erweitert Print Akku(0) zeigt die Spannung und Akku(1) die Akkukapazität in Prozent an
//                            -Akku-Interrupt-Routine ist jetzt aktiv und zeigt bei leerem Akku eine Warnung auf dem Bildschirm an
//                            -Funktion GPIX(x,y) zum ermitteln des Farbwertes eines Pixel an Position x,y hinzugefügt.
//                            -etwas schneller geworden 17379 Zeilen/sek. Mandel4.bas 14.71 Min
//// v1.59b:29.04.2023          -bisher endgültige FRAM-PIN'S-> FRAM_CS  = 13, FRAM_MISO= 27 , FRAM_MOSI= 12 und FRAM_CLK = 0
//                            -damit wird Pin26 wieder frei für DAC,Video-Out
//                            -Port-Befehle auf die wenigen übrigen Pins reduziert (AREAD,DWRITE,PWM,PULSE)
//                            -17019 Zeilen/sek. Mandel4.bas 14.32 Min
//
// v1.58b:28.04.2023          -SPI_FRAM-Board von Adafruit eingetroffen, leider funktioniert das Board nur mit eigenen SPI-Pin's
//                            -an den Pin's für die SD-Karte (wie geplant) und eigenen CS-Pin funktioniert der Ram nicht
//                            -ärgerlich, das SPI nicht so funktioniert wie er sollte
//                            -mit eigenen Pin's (FRAM_CS  = 27, FRAM_MISO= 26 , FRAM_MOSI= 2 und FRAM_CLK = 12 funktioniert der Chip zwar aber verbraucht damit auch
//                            -alle IO-Pins für Ausgabe ,so ist z.Bsp.der LED-Strip nicht mehr nutzbar, nur I2C ist noch verwendbar
//                            -einzig 3 Analog Eingangs-Pins's sind noch verfügbar :-(
//                            -DOUT, PWM, DIN, PULSE, DAC ,TEMP, DHT usw.sind damit sinnlos, weil keine Pins mehr vorhanden sind.
//                            -nach mehrfachen Tests hat sich folgende Pin-Konfiguration als offensichtliches Optimum gezeigt
//                            -FRAM_CS=13 (SD-Card CS-Pin dauerhaft auf GND), FRAM_MISO=26 ,FRAM_MOSI=27, FRAM_CLK=0
//                            -so sind zumindest Pin 2 und 12 als IO frei für Anwendungen sowie 34, 35 und 36 als Analog-Eingänge, besser als nix
//                            -die FRAM-Geschwindigkeit ist mehr als 3mal so hoch gegenüber der I2C-Variante :D
//                            -16353 Zeilen/sek. ->Julia.bas 13.13Min, Mandel4.bas 14.62 Min
//
// v1.57b:25.04.2023          -Startbildschirm etwas farbig aufgepeppt, Anzeige der Bildschirmauflösung entfernt ->es gibt ja nur noch 320x240
//                            -Geschwindigkeit wieder eingebrochen ->15240 Zeilen/sek.!?
//                            -FPOKE und FPEEK hinzugefügt, ermöglicht das schreiben und lesen von float-Werten im Ram, FRam oder EEProm
//                            -FPOKE Ort,Adresse,Wert , A=FPEEK(Ort,Adresse) -> Ort 0=RAM, 1=FRAM, 2=EEPROM
//                            -Optimierungsoption jetzt im Programmkopf (siehe #pragma GCC optimize)
//                            -morgen kommt ein FRAM-Chip mit 512kb als SPI-Variante, mal sehen, ob der eingebunden werden kann, das wäre cool :-)
//                            -damit wäre eine umfangreiche Datenspeicherung usw.möglich, und das mit bis zu 20MHz (statt 400kHz mit I2C)
//                            -Pins sollen die gleichen, wie SD-Card sein, nur CS-Pin wird ein anderer ->mal sehen, obs klappt.
//                            -15165 Zeilen/sek.
//
// v1.56b:22.04.2023          -BEFEHL OPT geschaffen, damit können Pin-Konfigurationen, Farbeinstellungen usw. im Flash gespeichert werden
//                            -diese werden dann beim Start gelesen und entsprechend gesetzt (SD-CARD-Pins, I2C-Pins, Font, Vorder-und Hintergrundfarben)
//                            -THEME und FONT speichern jetzt nicht mehr dauerhaft, das macht OPT
//                            -Startbildschirm etwas geändert
//                            -OPT kann jetzt die SD-Karten- und die I2C-Konfiguration speichern und lesen ->muss noch getestet werden
//                            -18210 Zeilen/sek.
//
// v1.55b:20.04.2023          -Fehler der Print-Ausgabe gefunden, nicht der String-Marker sondern der Char-Marker wurde nicht rechtzeitig zurückgesetzt
//                            -dies wurde korrigiert, jetzt stimmt wieder alles (expr4()) :-)
//                            -Befehl Pic entfernt, stattdessen Befehl DRAW x,y,mode kreiert DRAW x,y,0 springt zur Position x,y
//                            -DRAW x,y,1 zeichnet eine Linie von der letzten Position (DRAW x,y,0) nach x,y, damit sind Vielecke o.ä. Strukturen zeichenbar
//                            -nach dem Turtle-Zeichnungs-Prinzip (von pos nach pos -> nach pos -> nach pos)
//                            -MODE-Befehl deaktiviert, ob man das braucht? 320x240 Pixel in 64 Farben ist für einen Retro-Computer ausreichend
//                            -außerdem ist der Basic-Interpreter besser für LCD-Displays portierbar
//                            -String-Fehldarstellungs-Ursache gefunden ->tempstring wurde nicht korrekt abgeschlossen (Nullterminator zu spät gesetzt)
//                            -STR$-Funktion umgebaut, ->STR$(12.34,n) wandelt einen numerischen Wert in einen String mit n - Nachkommastellen um
//                            -1.Array-Dimension auf Word-Größe erweitert, jetzt sind Arrays in der ersten Dimension über 255 möglich (DIM A(1000))
//                            -18255 Zeilen/sek. ->Font 25 Julia.bas 12.6Min, Mandel4.bas 13.9Min (Debug_lvl=Fehler)
//
// v1.54b:18.04.2023          -DOKE Befehl mit writeBuffer realisiert, ist schneller als 2 x writeEEPROM - 32kb dauern nur noch 5 statt 15 sek.
//                            -NEW-Befehl geändert, nur return führte dazu, dass neue Befehle/Programme den ESP aufhingen!?
//                            -etwas Code-Optimierung -> clear_var() und cmd_new() kombiniert - spart wieder einige Code-Zeilen
//                            -Core Debug-Level auf Info gesetzt ->18228 Zeilen/sek. ->Font 25, zur Zeit die beste Einstellung
//                            -MNT-Befehl funktioniert nicht, wie gewünscht, aus irgend welchen Gründen verliert der ESP die SD-Karte?
//                            -eine neue SD-Initialisierung funktioniert nicht, was ist das nun wieder?
//                            -sollte das der Editor sein?,nach dem Editieren von Code passiert diese Problematik am häufigsten, nur Reset hilft dann
//                            -überprüfe nochmal den Editor-Code
//                            -Fehler lag in sd_pfad-Variable ->in static char umgewandelt, jetzt scheint es richtig zu funktionieren
//                            -Addition von Strings und CHR$ erweitert -> jetzt verkettet möglich
//                            -allerdings wird für Print der String_marker nicht rechtzeitig zurückgesetzt, bis zur Lösung muss mit Print ein numerischer Wert ausgegeben werden
//                            -dann ist die Darstellung wieder korrekt -> muss noch die richtige Stelle zum zurücksetzen von string_marker finden
//                            -Mandel4.bas ->13.96 Min
//                            -17838 Zeilen/sek.
//
// v1.53b:16.04.2023          -String- und numerische Arrays bis zu 3 Dimensionen scheint zu funktionieren, ein großer Schritt für mich, bedeutungslos für die Menschheit :-)
//                            -weitere Test's werden zeigen, ob das wirklich so ist
//                            -die Verarbeitungsgeschwindigkeit ist natürlich erheblich langsamer, da die Arrays im FRAM gespeichert bzw. gelesen werden
//                            -Code muss noch optimert werden aber ein großer Schritt ist getan :-D !!!
//                            -CLEAR funtionierte nicht im Programm ,durch warmstart() und nachfolgendes continue in der Hauptschleife wurde das Programm unterbrochen
//                            -warmstart in clear_var() entfernt, continue in der Hauptschleife durch break ersetzt, jetzt funtioniert CLEAR auch im Programm korrekt!
//                            -write_array_value und read_array zu rw_array zusammengefasst, die beiden Programmteile waren fast identisch
//                            -VAR_TBL und STR_TBL könnten noch als RAM-Array realisiert werden, sollte etwas schneller sein
//                            -nach etwas Codeoptimierung ist die Geschwindigkeit von 14560 auf 17064 Zeilen/sek. gestiegen :-)
//                            -diverse Bit-shift Operationen durch highByte und lowByte ersetzt, das ist offensichtlich schneller
//                            -Ausführungszeit Julia.bas ->12.69 Min. Mandel4.bas ->14.29 Min.
//                            -aktuell 17418 Zeilen/sek. ->Font25 ->Core Debug Level=Debug
//
// v1.52b:12.04.2023          -etwas Code-Optimierung betrieben
//                            -Unterfunktion Test_char(char) zur Überprüfung auf erforderliche Zeichen erschaffen, dadurch etliche Zeilen, sich ständig wiederholenden
//                            -Abfrage-Codes eingespart (ca.100 Zeilen)
//                            -Befehl STOP entfernt, ohne Continue macht Stop keinen Sinn-> End macht das Gleiche
//                            -Unterprogramme Circ,Rect und Lines auf ein Unterprogramm reduziert (line_rec_circ(art,parameterzahl)), dadurch wieder ca.65 Zeilen Code
//                            -eingespart
//                            -Fehler im Sprite(D... Befehl behoben, der Funktionsstring musste mit trim() gekürzt werden sonst Fehlausgabe
//                            -Soundbefehl gefällt mir nicht, vielleicht wirds doch ne externe Soundkarte (Propeller mit SID-Sound!?)
//                            -18306 Zeilen/sek.
//
// v1.51b:10.04.2023          -Stringlänge auf 30 Zeichen gekürzt (Vorbereitung für Arrays)
//                            -dabei ist aufgefallen,das es keine Sicherheitsfunktion für das Schreiben zu langer Strings gegeben hat
//                            -bei sehr langen Strings wurde der Nachbarstring überschrieben, dies wurde behoben
//                            -Addition von Strings geändert, ist noch nicht perfekt ->am Ende einer Addition taucht ein '/' auf!?
//                            -die Übernahme des Gesamtstring nach Tempstring ist noch buggy
//                            -MNT Befehl zum Mounten der SD-Karte hinzugefügt, wenn die Karte entnommen wurde, konnte nicht mehr gelesen werden
//                            -Array-Dimensionierung begonnen - numerische und Stringvariablen
//                            -ist noch ein ganzes Stück Arbeit aber die Dimensionierung scheint zu funktionieren
//                            -es werden bis zu 3 Dimensionen möglich sein, warscheinlich geht der ganze FRAM dabei drauf
//                            -Verarbeitungsgeschwindigkeit ist eingebrochen ->
//                            -18225 Zeilen/sek. , es bleibt seltsam!
//
// v1.50b:07.04.2023          -PEEK und POKE wieder in ursprüngliche Form gebracht POKE Ort,Adresse,Wert
//                            -A=PEEK(Ort,Adresse) für Word Werte wurde DEEK und DOKE eingefügt ->DOKE Ort,Adresse,Wert, A=DEEK(Ort,Adresse)
//                            -das ist übersichtlicher - Long Werte können mit 2 Word Werten zusammengesetzt werden - siehe POKE.BAS
//                            -so konnte wieder auf float zurückgegangen werden - (Geschwindigkeit höher! siehe v1.49)
//                            -Beginn der Testphase für den Sound Befehl
//                            -Error-Sound hinzugefügt ->ertönt bei Fehlern
//                            -neuer Befehl BEEP(Note,Länge) geschaffen als mini-Soundmodul
//                            -20154 Zeilen/sek. Font25
//
// v1.49b:04.04.2023          -PEEK und POKE erweitert POKE Ort,Adresse,Wert<,2Word o. 4Long> ansonsten Byte
//                            -A=PEEK(Ort,Adresse<,2Word o.4Long> ansonsten Byte, dafür musste wieder auf die Verarbeitung der Zahlen im float-Format
//                            -umgestellt werden, da sonst der Wertebereich von float für die Darstellung von unsigned Long nicht ausreichte
//                            -kleiner Fehler in list_out-Routine behoben, es konnte vorkommen, das die letzte Zeilennumer nicht korrekt angezeigt wurde
//                            -Funktion SQR erweitert ->SQR(x <,n> )= n'te Wurzel aus x - n ist optional
//                            -17058 Zeilen/sek. Font1
//
// v1.48b:03.04.2023          -DMP-Befehl erweitert, jetzt sind alle drei verfügbaren Speichermedien anzeigbar
//                            -DMP 0<,Adresse> = interner RAM
//                            -DMP 1<,Adresse> = FRAM-Chip
//                            -DMP 2<,Adresse> = EEPROM-Chip
//                            -dabei ist die Angabe der Adresse optional, ohne Angabe der Adresse wird bei Adresse 0 begonnen
//                            -PEEK und POKE ebenfalls angepasst ->A=PEEK(0..2,ADRESSE) POKE(0..2,ADRESSE,VALUE)
//                            -Funktionstasten für DIR und LIST (CTRL+D, CTRL+L) hinzugefügt.
//                            -Befehl NEW mit memset-Funktion ergänzt, jetzt wird der gesamte Speicher gelöscht inklusive der Variablen, vorher waren die Variablen noch vorhanden
//                            -und im Speicher befanden sich Fragmente des alten Programms
//                            -20568 Zeilen/sek. Font25
//
// v1.47b:02.04.2023          -Input-Eingaben jetzt mit mehreren Variablen (auch gemischt) möglich, es erfolgt aber keine Typprüfung
//                            -d.h. das man auf die richtige (Zahl oder Zeichenkette) Variablentype bei der Eingabe achtet
//                            -das bedeutet, das eine Zahl auch als String akzeptiert wird, da keine Anführungszeichen abgefragt werden
//                            -mittels Lineeditor-Funktion von FabGl endlich einen funktionierenden Zeileneditor geschaffen
//                            -wird eine Zeile eingegeben, die nicht existiert, wird die nächst verfügbare Zeile in den Bearbeitungsspeicher geladen
//                            -und mit der falsch eingegebenen Zeilennummer gespeichert
//                            -ob das als Bug oder als Feature angesehen wird, muss sich noch zeigen - so könnte man Zeilen kopieren!?
//                            -19611 Zeilen/sek. Font25
//
// v1.46b:29.03.2023          -nach anfänglichen Schwierigkeiten funktioniert der LED-Befehl jetzt zufriedenstellend
//                            -Test mit LED-Strip erfolgreich
//                            -Joy-Befehl entfernt und begonnen stattdessen eine Akkuüberwachung mittels Timer-Interrupt zu integrieren
//                            -alle 60 sek. wird die Akkuspannung (Pin 39)gemessen und bei leerem Akku eine Warnung auf dem Bildschirm angezeigt
//                            -mal sehen, ob sich das bewährt oder ob doch eine externe Überwachungsschaltung notwendig ist
//                            -Versuch, die Input-Routine umzubauen für die Eingabe mehrerer Parameter (auch gemischt!?)
//                            -20592 Zeilen/sek.
//
// v1.45b:23.03.2023          -FRAM funktioniert mit den gleichen Routinen, wie EEPROM
//                            -LED Befehl zur Ansteuerung von LED-Strips mit WS2811 bzw. 2812 Chip integriert - muss noch getestet werden!
//                            -LED(S,Anzahl,Pin,Typ), Helligkeit LED(B,0..255), Pixel setzen LED(P,r,g,b,nr), Füllen LED(F,r,g,b,start, Anzahl), Löschen LED(C)
//                            -20658 Zeilen/sek. Font25
//
// v1.44b:18.03.2023          -IO-Karte bereit zum Test 1xMCP2307, 1xEEPROM(64kb) und/oder FRAM(32kb) (FRAM noch nicht verfügbar)
//                            -LCD funktioniert mit der Karte, EEProm (Adresse 0x50) und MCP23017(Adresse 0x20) werden erkannt
//                            -LCD-Set Hintergrundbeleuchtung standardmässig eingeschaltet
//                            -LCD-Befehl 'N' erstellt, stellt die Anzahl der Nachkommastellen ein ->Standard ist 0 (ohne Nachkommastellen)
//                            -DMP zu Testzwecken auf EEPROM-Read umgebaut ->scheint zu funktionieren
//                            -20679 Zeilen/sek. Font25
//
// v1.43b:15.03.2023          -Dallas-Temperatursensor DS18B20 Routinen erweitert um die Angabe des Kanals, so können mehrere Fühler an einem Bus arbeiten
//                            -Funktionstest erfolgreich! Wichtig ist der Pullupwiderstand zwischen dem Data-Pin und 3,3V (VDD) - 4,7kOhm
//                            -LCD(P bzw.(W Befehl erweitert mit , und ; zur Aneinanderreihung von Ausgaben (wie bei Print)
//                            -Fehler in VAL(String) Funktion behoben ->Konvertierung erfolgte nach Integer statt nach float
//                            -Fehler in der Funktion ATN(x) (Arcustangens) behoben, bei Printanweisungen wurde ATN(X) mit der Print AT(x,y)-Funktion verwechselt
//                            -TRON-BEFEHL hinzugefügt, damit wird der Programmablauf anhand der Zeilennummern nachvollziehbar ->TRON(DELAY) DELAY=1..255 Verzögerung zur besseren Kontrolle
//                            -TRON(0) = off
//                            -20676 Zeilen/sek. Font25
//
// v1.42b:14.03.2023          -Compiler-flags in platform.txt nach einem Hinweis aus dem Netz geändert:
//                            -compiler.c.flags=-std=gnu99 -O2 -g3  (-O2 statt Os) -- (O2 ist die Optimierung für Performance)
//                            -compiler.cpp.flags=-std=gnu++11 -O2 (O2 statt Os)
//                            -compiler.S.flags=-c -O2 -g3
//                            -compiler.c.elf.flags=-nostdlib -O2
//                            -in C:\Users\Name\AppData\Local\Arduino15\packages\esp32\hardware\esp32\1.0.6\platform.txt
//                            -Julia.bas ist jetz in 11.4Min fertig (vorher 16.3Min)
//                            -Geschwindigkeitsvorteil ->20676 (Font25) Zeilen/sek. :-), compilieren dauert etwas länger aber der Vorteil überwiegt (ca.30% Steigerung)
//                            -wenn ich jetzt noch herausbekomme, wie ich die RVfplib für die mathematischen Funktionen einbinde könnte noch was mehr gehen
//
// v1.41b:12.03.2023          -EEPROM-Routinen für externen EEPROM begonnen -> IO/Board wird einen externen EEPROM haben (und oder FRAM?)!
//                            -wofür dieser verwendet wird, ist noch unklar
//                            -Save-Routine korrigiert, beim speichern eines Files, welches noch nicht existiert, wurde ein "y" ausgegeben (Überschreib-Abfrage)
//                            -Routine Print_info angepasst, jetzt wird die Überschrift immer mittig angezeigt (mode_offset[Mode_state])
//                            -Video-Modes 0,3,4 entfernt -> sah doof aus, es gibt nur noch Modus 0 (320x240) und 1(400x300)
//                            -neues Problem:bei anderem Font stimmt die Darstellung wieder nicht :-( also muss auch ein Font-offset eingebaut werden.
//                            -Problem gelöst, jetzt schaut es gut aus :-)
//                            -15798 Zeilen/sek. ->Font25
//
// v1.40b:10.03.2023          -DEL-Befehl mit Sicherheitsabfrage erweitert
//                            -Sprite-Befehl zusammengefasst ->SPRT(C/D/S,PARAM,PARAM,PARAM..), dadurch zwei Befehle eingespart
//                            -LCD-Backlight geändert, jetzt scheint es korrekt zu funktionieren(vorher ging das Licht bei jedem Befehl wieder an)
//                            -15453 Zeilen/sek.
//
// v1.39b:09.03.2023          -Fehler in Tastenabfragen behoben, verursacht durch den Versuch des Editors, manche Tasten waren nicht mehr erreichbar
//                            -okmsg entfernt und durch OK in Routine getln ersetzt, damit braucht man sich um die Ausgabe von OK nicht mehr zu kümmern
//                            -break-Routine optisch verbessert, jetzt führt ein Break im Direktmodus nur zur Ausgabe von Break! ohne "in Linenumber"
//
// v1.38b:07.03.2023          -Fehler in den I2C-Routinen behoben, es war noch Wire statt myI2C als Schnittstelle angegeben
//                            -I2C-Routinen funktionieren soweit man das beurteilen kann, ein MCP23017 konnte erfolgreich angesprochen werden ->siehe I2C.bas
//                            -LCD-Modul mit I2C-Schnittstelle und MCP2307-Modul haben die gleichen Adressen -> beim LCD- oder MCP2307-Modul muss die Adresse geändert werden !
//                            -DHT-Routinen funktionieren perfekt -> dht.bas + dht2.bas
//                            -I2C-Routinen Write und RequestFrom von FUNC_IIC nach KW_IIC geändert, da diese Befehle keinen Rückgabewert haben
//                            -Befehl IIC jetzt vereinheitlicht ->Start jetzt IIC(S,Adresse), Write IIC(W,Befehl), Request IIC(Q,Adresse,Anzahl Bytes)
//                            -die Befehle onReceive und onRequest gibt es noch nicht, muss erst noch den Sinn klären
//                            -MCP-Port-Routinen begonnen, Setzen und schreiben von PORT und PIN funktioniert
//                            -es fehlen noch die Read-Funktionen für PIN und PORT
//                            -Portfunktion S+W erweitert ->PORT(S,0) setzt Port A+B auf Ausgang, PORT(W,Wert) schreibt den Wert auf Port A+B als 16bit-Wert
//                            -Port und Pin-Read-Funktionen sind funktionsfähig -> PRINT PORT(A),PORT(B),PIN(Nr),PORT()=(A+B)als 16bit Wert
//                            -PI() Funktion musste in der Funktionstabelle hinter PIN platziert werden, kollidierte mit der PIN-Funktion!?
//                            -14472 Zeilen/sek.
//
// v1.37b:05.03.2023          -LCD-Routinen begonnen, Befehl LCD(Kommando,..Parameter) funktioniert in den Grundzügen für HD44780-LCD-Typ mit I2C-Schnittstelle und PCF8574
//                            -um das LCD zu verwenden muss zuerst LCD(S,Spalten,Zeilen,Adresse) eingegeben werden, diese Werte werden im EEPROM gespeichert und sind
//                            -nach einem Neustart verfügbar, der Setbefehl ist nur einmal nötig, danach kann mit LCD(I,1) das LCD initialisiert und verwendet werden
//                            -Ausgabe von Text und Zahlenwerten funktioniert, rechts und links scrollen ebenfalls (Befehle: S,B,C,M,L,I,P)
//                            -I2C-Routinen auf Niveau des LCD-Befehls komprimiert (IIC(Kommando)  -> R,W,A,Q,E)
//                            -I2C muss noch eingehend getestet werden, mir fehlen noch die Testobjekte
//
// v1.36b:03.03.2023          -Zeileneditor entwickelt sich sehr zäh,
//                            -einige Fonts hinzugefügt -> insgesamt sind jetzt 25 Fontsets verfügbar
//                            -Addition von Stringvariablen hinzugefügt (C$=A$+B$)
//                            -Stringvariablen jetzt auch als zweibuchstabige Variablen realisiert - frisst aber ganz schön Speicher (ca.28kb)
//                            -wieder deaktiviert, kostet zuviel RAM -> verhindert die fehlerfreie Umschaltung in andere Videomodes
//                            -STRING$ gekürzt in STR$ ->Stringwiederholung ->STR$(Zeichenkette,Anzahl)
//                            -Fehler in der Stringaddition behoben ->string_marker wurde nicht rechtzeitig zurückgesetzt, dadurch war die
//                            -Bearbeitung von numerischen Variablen gestört!
//                            -15384 Zeilen/sek.
//// v1.35b:23.02.2023          -Befehl DEFN a() mit bis zu 4 Operatoren mit anschließender Auswertung mit FN a(x,y) funktioniert jetzt endlich korrekt
//                            -ein ; nach einer IF-Abfrage führte dazu, das das Programm nach DEFN nicht weiter ausgeführt wurde, Zufallsentdeckung
//                            -da sieht man es wieder : kleine Ursache große Wirkung!!!
//                            -KC85-Befehl AT für Print zur Positionsausgabe von Printanweisungen hinzugefügt -> PRINT AT(x,y);"Text";Variable
//                            -15423 Zeilen/sek.
//
// v1.34b:23.02.2023          -Integration des Befehls DEFN a() mit bis zu 4 Operatoren begonnen, Eingabe der Funktion scheint zu funktionieren ->DEF a(a,b,c,d)=[a*b/sin(c)*tan(d)]
//                            -es sind 26 Funktions-Definitionen möglich (A..Z) -> Aufruf der Funktion wird FN a(x,y) sein
//                            -Fontsatz 10 in COURIER 8x14 geändert
//                            -15495 Zeilen/sek.
//
// v1.33b:21.02.2023          -I2C-Routinen auf TwoWire umgestellt, damit diverse Bibliotheken mit den geänderten I2C-Pins umgehen können
//                            -Befehl BMP(Mode) zum Auslesen eines BMP085/180 Drucksensors - muss noch getestet werden!
//                            -Befehl CD zum Wechseln des aktuellen SD-Karten-Verzeichnisses -> CHD"/Pfad" - Pfad wird global gespeichert
//                            -die vorhandenen Dateioperationsbefehle mit der Pfad-Information aktualisiert
//                            -Befehle MKD (MKDIR) und RMD (remove Dir) hinzugefügt
//                            -15579 Zeilen/sek.
//
// v1.32b:19.02.2023          -Befehl ON für GOTO/GOSUB integriert ->ON A GOTO/GOSUB Zeilennr,Zeilennr,Zeilennr...
//                            -RND-Befehl modifiziert RND(7) generierte nur eine Zahl zwischen 0...6, das ist doof, jetzt wird eine Zahl 0...7 generiert, das ist besser.
//                            -Befehl GCOL(V/H) geschaffen, um die gesetzten Vorder- und Hintergrundfarbe zu ermitteln GCOL(0)=Vodergrundfarbe, GCOL(1)=Hintergrundfarbe ->Print GCOL(0)
//                            -der Optik halber sollte der Befehl COLOR in COL umbenannt werden
//                            -BEFEHL DHT(Port,Typ,T/H) eingefügt zum Auslesen von DHT11,DHT22 oder DHT21 Sensoren ->Typ 1=DHT11, 2=DHT22, 3=DHT21 ->T/H 0=Temperatur 1=Feuchte
//                            -der Befehl ist noch ungetestet!!
//                            -Dateibefehle soweit geändert, das der Dateiname in Anführungszeichen stehen muss (konnte vorher weggelassen werden - optisch falsch)
//                            -werde warscheinlich einen MCP2307 einbauen, für mehr Port-Pins ->2 8bit Ports = 16 IO's,damit kann man schon was anfangen - neue Platine?
//                            -15420 Zeilen/sek.
//
// v1.31b:18.02.2023          -INCHAR-Routine um printmsg(okmsg,0) erweitert, da nach dem Laden eines Programms kein READY ausgegeben wurde
//                            -Theme 10 als 'LCD' etabliert - mit Fontsatz3 sieht das cool aus
//                            -etwas mit ELSE herumexperimentiert, es gefällt mir nicht,das ELSE in einer neuen Zeile stehen muss aber momentan gehts nicht anders :-(
//                            -zusätzliche Auflösung eingefügt (VGA_256x192_50Hz) mit anderem Monitor auch brauchbar
//                            -15615 Zeile/sek. ist mir immer noch nicht klar, was die Ursache ist?!
//                            -offensichtlich spielt auch die verwendete Schriftart eine Rolle, im ZX-Spectrum Theme ist er am schnellsten
//                            -16029 Zeilen/sek.
//
//// v1.29b:16.02.2023          -Befehl AIN erweitert AIN(PORT,MODE) MODE 0=Ausgabe als Digitalwert, 1=Ausgabe als Spannungswert, 2=HC-SR04-Ultraschall-Sensorwert in cm, weitere können folgen
//                            -Startbildschirm um die Information des gewählten Bildschirmthemes erweitert
//                            -zusätzlich zum gewählten Theme und Video-Modes wird auch der ausgewählte Fontsatz im EEprom gespeichert und beim Start geladen
//                            -zusätzliche Fontsätze integriert, es kann unter 20 Fontsätzen gewählt werden
//                            -Funktionsliste nach enum portiert, so können einfacher Änderungen vorgenommen werden
//                            -Versuch, einen WIFI-Fileserver zu integrieren scheitern am RAM-Speicher, schade :-(
//                            -Dallas-Temperatur-Sensor-Routinen eingebaut ->PRINT TEMP(PORT) gibt die Temperatur des Sensors zurück - könnte, wie mit den AIN Modes auch als DIN mit Modeerweiterung realisiert werden
//                            -z.Bsp.DIN(PORT,MODE) 0=Digitalwert, 1=Temperatur vom Dallas-Sensor -> muss ich nochmal ne Nacht drüber schlafen ;-)
//                            -Ausführungsgeschwindigkeit schwankt noch immer sehr stark
//                            -zur Zeit 14292 Zeilen/sek. jetzt ist Debug mit 15330 besser?!
//
// v1.28b:15.02.2023          -den Befehl Mode für unterschiedliche Auflösungen hizugefügt, möglich sind im 64Farb-Modus 320x240 (mode0) und 400x300 (mode1)
//                            -und im 16Farb-Modus zusätzlich 512x384 (mode2) und 640x240 (mode3)
//                            -ausgewählter Modus wird im EEprom gespeichert und Basic startet automatisch mit dem eingestellten Modus
//                            -PULSE-Befehl erweitert, jetzt kann die Anzahl der Pulse und die High und Low-Zeit eingegeben werden ->Pulse(Port,Anzahl,Highzeit,Lowzeit) ->in mS
//                            -15690 Zeilen/sek !? ->die Werte schwanken sehr stark ----------------->  keine=11127,fehler=15690,warn=14456,info=14589,debug=15123,verbose=15120
//                            -offensichtlich spielt die Einstellung Core Debug die entscheidende Rolle--^
//                            -die Werte sind reproduzierbar, Einstellung für Core Debug = Fehler ist offensichtlich das Optimum.
//
// v1.27b:14.02.2023          -Farbverwaltung erweitert und für die verschiedenen VGA-Modi's vereinheitlicht (16Farben, 64Farben)
//                            -Themen-Farben im 16 Farbmodus angepasst, jetzt sieht es im 16 und 64 Farbmodus gleich aus (jedenfalls fast)
//
// v1.26b:13.02.2023          -Brush-Befehl entfernt -> Color kann das gleiche
//                            -Pen-Befehl gekürzt, jetzt wird die Farbe von 0..63 eingegeben und die Striftbreite ist optional PEN farbe oder PEN farbe,breite
//                            -PSET-Befehl erweitert PSET x,y,farbe (farbe ist optional und kann weggelassen werden)
//                            -durch Wegfall von Brush und Kürzung von Pen wieder etwas mehr Geschwindigkeit
//                            -14865 Zeilen/sek.
//
// v1.25b:11.02.2023          -Sound-Befehl integriert, ist nur rudimentär aber für einen Basic-Interpreter ok -> SND(waveform,frequency,duration,volume)
//                            -noch nicht getestet, mir fehlt noch ein entsprechender Anschluss am Test-Board
//                            -Wertenegation hinzugefügt a=!a
//                            -Befehl Pulse hinzugefügt ->PULSE(Port,Zeit) gibt einen einzelnen Impuls an Port mit der Länge Zeit aus
//                            -PEN und BRUSH Befehle werden geändert statt r,g,b wird nur die Farbe 0..64 eingegeben, damit ist der BRUSH-Befehl eigentlich überflüssig, da der Befehl Color existiert
//                            -PEN-Befehl könnte in Pset eingebaut werden (farbe und breite)
//                            -13647 Zeile/sek.
//
// v1.24b:09.02.2023          -Inkey_Routine etwas umgebaut, das kostet einfach zuviel Performance (13550 Zeilen/sek.).Gibt es keine bessere Methode?
//                            -erstmal das Optimum gefunden, welche die Performance nicht zu stark bremst und auch fast optimal funktioniert
//                            -seltsamerweise wird ab und zu eine 63 zurück gegeben was ist das ? , vielleicht per Abfrage ausschliessen!?
//                            -14660 Zeilen/sek.
//
//
// v1.23b:08.02.2023          -Sprite-Funktionen soweit funktionsfähig, allerdings ist die Ausführungsgeschwindigkeit drastisch eingebrochen (nur noch ca.13500 Zeile/sek.)!??
//                            -nach der Deaktivierung der Befehle steigt die Geschwindigkeit wieder, ist aber noch immer ca.600 Zeilen langsamer als vorher, das versteh ich nicht
//                            -warum auch immer, jetzt sind es mit den neuen Befehlen 14500 Zeilen/sek. das sieht wieder realistisch aus, komisch!?
//
// v1.22b:05.02.2023          -Beginn der Integration von Sprite-Befehlen, erster Befehl PIC stellt ein Bitmap an x,y dar.Wie ich die Daten allerdings in den Rechner kriege, muss
//                            -ich mir noch überlegen.Grundlage ist das FabGl-Example CollisionsDetection, noch sind sie Bitmaps als Include-Datei eingefügt
//                            -Befehl BYE entfernt ->NEW erledigt jetzt alles (Variablen löschen und Startbildschirm anzeigen)
//                            -15111 Zeilen/sek.
//// v1.24b:09.02.2023          -Inkey_Routine etwas umgebaut, das kostet einfach zuviel Performance (13550 Zeilen/sek.).Gibt es keine bessere Methode?
//                            -erstmal das Optimum gefunden, welche die Performance nicht zu stark bremst und auch fast optimal funktioniert
//                            -seltsamerweise wird ab und zu eine 63 zurück gegeben das ist das ? , vielleicht per Abfrage ausschliessen!?
//                            -14660 Zeilen/sek.
//
//
// v1.23b:08.02.2023          -Sprite-Funktionen soweit funktionsfähig, allerdings ist die Ausführungsgeschwindigkeit drastisch eingebrochen (nur noch ca.13500 Zeile/sek.)!??
//                            -nach der Deaktivierung der Befehle steigt die Geschwindigkeit wieder, ist aber noch immer ca.600 Zeilen langsamer als vorher, das versteh ich nicht
//                            -warum auch immer, jetzt sind es mit den neuen Befehlen 14500 Zeilen/sek. das sieht wieder realistisch aus, komisch!?
//
// v1.22b:05.02.2023          -Beginn der Integration von Sprite-Befehlen, erster Befehl PIC stellt ein Bitmap an x,y dar.Wie ich die Daten allerdings in den Rechner kriege, muss
//                            -ich mir noch überlegen.Grundlage ist das FabGl-Example CollisionsDetection, noch sind sie Bitmaps als Include-Datei eingefügt
//                            -Befehl BYE entfernt ->NEW erledigt jetzt alles (Variablen löschen und Startbildschirm anzeigen)
//                            -15111 Zeilen/sek.
//
// v1.21b:03.02.2023          -Funktion VAL("numerische Zeichenkette") hinzugefügt - macht aus einer Stringzahl eine numerische Variable (print VAL(a$), b=VAL("123"))
//                            -Start-Bildschirm um zusätzliche Informationen erweitert (Auflösung,Terminalauflösung,ESP-Memory)
//                            -Funtion GETX und GETY zusammengefasst GET(0)=X-Position, GET(1)=Y-Position des Cursors, dadurch einen Befehl eingespart und etwas Geschwindigeit gewonnen
//                            -Fehler in ASC(x) behoben, es wurden Stringvariablen falsch interpretiert.PRINT ASC("A") war richtig PRINT ASC(A$) wurde falsch interpretiert.
//                            -Befehl MEM in Funktion umgewandelt, so sind Speicherabfragen innerhalb eines Programms möglich -> PRINT MEM oder A=MEM
//                            -INPUT-Befehl um Stringvariablen für Textbeschreibung der Eingabe erweitert (vorher nur Zeichenetten)->INPUT"Name";b$ kann jetzt auch INPUT a$;b$ heissen (a$="Name")
//                            -15096 Zeilen/sek
//
// v1.20b:30.01.2023          -Fehler in Right$ und Mid$ behoben - gab einen Fehler aus bei korrekter Eingabe (return a; entfernt)
//                            -Fehler in INSTR und COMP$ behoben - Stringmarker wurde nicht zurückgesetzt, dadurch wurde der String und nicht der nummerische Wert zurückgegeben
//                            -Funktion UC$(A$) - String in Grossbuchstaben umwandeln eingefügt
//                            -Funktion LC$(A$) - String in Kleinbuchstaben umwandeln eingefügt
//                            -15075 Zeilen/sek.
//
// v1.19b:28.01.2023          -AV-Bildschirmtreiber als Auswahlmöglichkeit integriert (#define AVOUT aktivieren). Wenn aukommentiert, erfolgt die Ausgabe über VGA
//                            -CVBS-Treiber ist allerdings nur etwa halb so schnell, wie die VGA-Variante aber als Option für mehr IO-Ports ne interessante Sache
//                            -15210 Zeilen/sek.(VGA), ca.8220 Zeilen/sek.(AV)
//
// v1.18b:27.01.2023          -Befehl CIRCLE geändert in CIRC, Befehl RENAME geändert in REN, ? und / entfernt dadurch etwas an Geschwindigkeit gewonnen
//                            -15210 Zeilen/sek.
//
// v1.17b:24.01.2023          -Befehl DAC zur Ausgabe Analoger Spannungswerte an Pin 26 - muss mit dem neuen Board noch getestet werden (V1.0 hat am Pin26 Pullup-Widerstände, das verfälscht die Werte)
//                            -Eingabe erfolgt als Spannungswert -> DAC(1.29) ->1.29 Volt
//                            -AREAD in AIN, DREAD in DIN, DWRITE in DOUT geändert
//                            -die Werte von AIN werden jetzt als Spannungswert ausgegeben -> bsp. PRINT AIN(25) -> 1.2456 (x=3.3/4096*Messwert)
//                            -Sound- und Grafik-Spritebefehle fehlen noch!?
//                            -1-Wire-Bus (DS1820 Temp.Fühler) ,DHT11, W2812-LED wäre auch noch schön
//                            -15132 Zeilen/sek
//
// v1.16b:21.01.2023          -Startbildschirm etwas geändert (Starttext nach oben verschoben)
//                            -Befehl JOY zur Abfrage eines Joysticks an Port 2,34,35,36,39 eingefügt (scheint zu funktionieren)
//                            -HIWEIS:die Ports (ausser 2) des Joysticks sind nur Eingänge und müssen per externen Pullupwiderständen auf High gezogen werden
//                            -Ports für SCL und SDA des I2C-Busses geändert auf 26(SDA) und 27(SCL) dafür fliegt die Mouse-Buchse vom Board
//                            -Port-Funktionen für noch freie Pins integriert (noch experimentell)
//                            -AREAD(PORT),DREAD(PORT),DWRITE(PORT,Wert),PWM(PORT,WERT)
//                            -verwendete PINS: AREAD 2,12,26,27,34,35,36,39 ;DREAD 2,12,26,27,34,35,36,39;DWRITE 2,12,26,27;PWM 2,12,26,27)
//                            -15100 Zeilen/sek.
//
// v1.15b:22.07.2021          -Theme 9 geändert
//
// v1.13b:16.06.2021          -Fehler in DATA-Funktion behoben, der Datapointer wurde bei Zeichenkettenverarbeitung nicht erhöht
//                            -Schreibweise der Funktionen MODULO, Shift left /right, AND und OR geändert
//                            -MODULO x % y, SHIFT Left/Right x SL y, x SR y, AND x & y, OR x | y
//                            -15990 Zeilen/sek.
// v1.12b:14.06.2021          
//					-Taste ESC mit Virtual_Key abgefangen, führte zum Absturz des Interpreters -> ist noch nicht ideal, funktioniert aber
//                            	-Auto-Start-Funktion vervollständigt -> es wurden keine Datazeilen eingelesen, damit stürtzte das Programm Globus.Bas ab
//                            	-jetzt werden beim Autostart alle Variablen gelöscht und eventuell vorhandene Datazeilen eingelesen
//                            	-15894 Zeilen/sek.
//
// v1.11b:08.06.2021          
//					-I2C-Befehle eingefügt -> noch im Test aber der Adress-Scan funktioniert schonmal
//                            	-IICR (Read), IICW(write), IICA (available), IICS (start), IICE (end), IICQ (request)
//                            	-a=IICR(), IICW(val), a=IICA(), IICS(adress), a=IICE(),IICQ(adress,anzahl bytes)
//                            	-ob das so bleibt, weiss ich noch nicht, weitere Tests werden es zeigen
//                            	-15750 Zeilen/sek.
//
// v1.10b:05.06.2021          
//					-es fehlen noch Sound und Port-Funktionen
//
// v1.09b:03.06.2021          
//					-PEN-Befehl um den optionalen PEN-WIDHT Parameter erweitert (Strichstärke) PEN r,g,b<,1..>
//                            	-nur für LINES und RECT ->später vielleicht auch den PATH-Befehl (für Polygone)
//                            	-16236 Zeilen/sek.
//
// v1.08b:02.06.2021          
//					-expr4() Unterprogramm von überflüssigen Abfragen befreit
//                            	-Funktion POW zum Operanden geändert -> 8^2 (vorher POW(8,2))
//                            	-Operanden XOR und NOT entfernt, ich glaube die braucht man kaum (nicht)
//
// v1.07b:01.06.2021          
//					-RTC an Pin 3,1 angebunden (TX,RX), dadurch ist die Serial-Funktion nicht mehr nutzbar (auskommentiert)
//                            	-SETDT - Befehl zum stellen der RTC hinzugefügt SETDT tag,monat,jahr,stunde,minute,sekunde
//                            	-GDATE - Befehl zum Auslesen der RTC GDATE(0) -> Tag, GDATE(1) -> Monat, GDATE(2) -> Jahr , GDATE(3) -> Wochentag
//                            	-GTIME - Befehl zum Auslesen der RTC GTIME(0) -> Stunde, GTIME(1) -> Minute, GTIME(2) -> Sekunde
//                            	-Unterprogramm zum auslesen und füllen der Datum/Zeit-Arrays erstellt, um die Geschwindigkeit zu erhalten
//                            	-bei direkter Ausführung im Unterprogramm expr4() bricht durch die langsame I2C Übertragung die Verarbeitungsgeschwindigkeit
//                            	-auf 3000 Zeilen/sek ein, das ist nicht akzeptabel :-(
//                            	-durch die Auslagerung steigt die Geschwindigkeit wieder auf 16074 Zeilen/sek.
//
// v1.06b:31.05.2021          
//					-Fehler in DATA-Funktion gefunden und behoben (Datazeilenabfrage war fehlerhaft bei verketteten READ-Anweisungen (READ A,B,..))
//                            	-Testprogramm GLOBUS.BAS funktioniert jetzt fehlerfrei :-) -> Ausführungszeit ca.6sek (das ist schnell).
//                            	-INPUT - Befehl mit Beschriftung erweitert (INPUT"Eingabewert:";A) - wird noch um die Möglichkeit der Stringeingabe erweitert
//                            	-Bsp.:INPUT"Name:";name$
//                            	-INPUT-Befehl durch Stringeingabe erweitert (INPUT"Name:";a$)
//                            	-16341 Zeilen/sek.
//
// v1.05b:31.05.2021          
//					-Testprogramm GLOBUS.BAS funktioniert nur teilweise.Bei der Zeichnung der Karte besteht noch ein Fehler (wird nicht vollständig gezeichnet)
//                            	-das muss erstmal analysiert werden (DATA-Funktion doch noch buggy?)
//
// v1.04b:30.05.2021          
//					-STRING$ in Funktion umgewandelt, funktioniert jetzt nur noch mit Print (so,wie es sein sollte)
//                            	-allerdings ist die Syntax gedreht (Print String$("Hallo",5) nicht String$(5,"Hallo")), das kann man verschmerzen (Implementierung war einfacher)
//                            	-dadurch sind 2 Unterprogramme entfallen ->Speicherplatz gespart
//                            	-Funktion CONST zur Begrenzung eines Wertebereiches entfernt -> kann man im Basic anders lösen
//                            	-STRING$-Funktionsname auf STRG$ gekürzt ->ist schneller
//                            	-Oktal-Zahlenverarbeitung entfernt -> wann braucht man schon Oktalzahlen?!
//                            	-STYLE-Befehls-Optionen gekürzt Option 7 (doppelte Höhe und Breite) entfernt, funktioniert so nicht
//                            	-Ausführungsgeschwindigkeit: 16347 Zeilen/sek.
//
// v1.03b:29.05.2021          
//					-Name von ESP32-Basic in Basic32+ umbenannt, weil stark erweitert (+)
//                            	-TAB-Befehl in Funktion umgewandelt, funktioniert jetzt so, wie es soll
//                            	-dadurch ein freier Basic-Befehl
//                            	-Funktion SPC(x) eingefügt, gibt Anzahl x Leerzeichen aus
//                            	-16890 Zeilen/sek.
//
// v1.02b:28.05.2021         
//					-DATA-READ funktioniert erstmal grundsätzlich, auch mit mehreren Variablen , auch gemischt(READ a,b,c,d$)
//                            	-weitere Tests werden zeigen, ob die Funktion zufriedenstellend arbeitet
//                            	-INPUT-Befehl arbeitet jetzt auch mit langen Variablennamen
//
// v1.01b:27.05.2021          
//					-Versionssprung -> Interpreter funktioniert nach meinen Vorstellungen, noch zu lösende Aufgaben sind:
//                            	-DATA - READ Funktion ,die Implementierung von Arrays und eventuell einen Zeileneditor
//                            	-zusätzliche Funktionen für die Verwendung von GPIO bzw. AD/DA benötigen einen zusätzlichen Chip, da am ESP32
//                            	-keine brauchbaren GPIO's mehr verfügbar sind
//                            	-eventuell Sprite-Funktionen mit Kollisionsabfrage, das setzt aber eine funktionierende DATA - Funktion voraus.
//                            	-Tokenizer erstmal abgebrochen, bisher keine zufriedenstellenden Ergebnisse
//                            	-Datei Sicherheitsabfrage verfeinert -> explizite Abfrage von 'y' und 'n'
//
// v0.50b:25.05.2021
//                            -durch eine kleine Änderung sind jetzt lange Variablennamen möglich (numerisch und String)
//                            -allerding hat dies seinen Preis, die Verarbeitungsgeschwindigkeit ist auf 17025 Zeilen/sek. gesunken
//                            -es wird die weitere Entwicklung zeigen, ob sich das lohnt
//                            -Sicherheitsabfrage (überschreiben y/n) beim Speichern von Dateien hinzugefügt
//
// v0.49b:25.05.2021
//        				-LEFT$,Right$ und MID$ funktionieren jetzt auch mit Zeichenketten in Anführungszeichen -> ob sinnvoll oder nicht
//        				-nächste Baustellen:	- READ-Befehl vervollständigen
//                            							- mehrdimensionale Arrays
//                            							- Anbindung (seriell) eines externen Portmoduls für digitale Ein-/Ausgänge + SID-Sound-Emulator + RTC(NTP?) + I2C-BUS
//                            							- Art des Prozessors noch nicht klar (2ter ESP32 ?, Teensy ?, ATMEGA? Propellerchip ?)
//        				-20130 Zeilen/sek.
//
// v0.48b:24.05.2021
//        				-Funktion LEFT$ eingefügt (momentan nur mit Stringvariablen, Keine Zeichenketten in Anführungszeichen -> macht das überhaupt Sinn?)
//        				-Funktion RIGHT$ eingefügt (momentan nur mit Stringvariablen, Keine Zeichenketten in Anführungszeichen -> macht das überhaupt Sinn?)
//        				-Funktion MID$ eingefügt (momentan nur mit Stringvariablen, Keine Zeichenketten in Anführungszeichen -> macht das überhaupt Sinn?)
//
// v0.47b:23.05.2021
//       				-Einbinden von Dateioperationen (chdir, mkdir, rmdir) - abgebrochen (wieder entfernt), das Handling für einfache Operationen ist viel zu umständlich
//        				-einzig der RENAME - Befehl ist geblieben, dieser funktioniert jetzt auch
//        				-PI-Funktion geändert ->jetzt genügt die Eingabe von PI(), um einen Wert zu erhalten (in der Klammer darf kein Wert stehen)
//        				-LN-Funktion (natürlicher Logarithmus) in LOG geändert
//
// v0.46b:22.05.2021
//        				-RESTORE - Befehl funktioniert soweit, jetzt kommt der komplexere Teil der READ - Anweisung
//        				-REN Befehl eingefügt, zum Umbenennen von Dateinamen -> funktioniert aber noch nicht
//
// v0.45b:21.05.2021
//        				-GOSUB-Routine ausgelagert
//        				-INPUT-Routine ausgelagert
//        				-Code-Kommentare hinzugefügt
//        				-Code muss noch etwas aufgeräumt werden
//        				-Befehl PI geändert, durch die Möglichkeit szeibuchstabige Variablen zu nutzen wurde PI falsch interpretiert
//        				-jetzt PI(0) (wobei die Zahl in Klammern egal ist)
//        				-20211 Befehle/sek.
//        				-um ein ständiges Scannen der Command-Liste einzusparen müssten die Befehle als Token gespeichert werden (0-128)
//        				-das würde die Ausführungsgeschwindigkeit um einiges erhöhen
//
// v0.44b:20.05.2021
//        				-Logischer Operator AND wieder eingebaut, es werden jetzt alle Zwischenergebnisse gespeichert und bei THEN ausgewertet
//        				-Datei Logik.bas zeigte bisher nur richtige Ergebnisse an, scheint also zu funktionieren
//        				-logischer Operator OR funktioniert jetzt auch korrekt
//        				-20286 Befehle/sek. ->Ursache der vorherigen Verlangsamung war die Ausdehnung der expression-Funktion
//        				-da AND und OR jetzt normale Basic-Befehle sind, ist auch die Geschwindigkeit wieder höher
//        				-Octalwertausgabe hinzugefügt, Eingabe funktioniert ebenfalls
//        				-Klammerrechnung funktioniert offensichtlich auch korrekt - nur mehrfach verschachtelte Klammern nicht
//        				-20256 Befehle/sek.
//        				-TAB-Funktion noch nicht optimal
//        				-Befehl LET deaktiviert -> nicht nötig - frei für weiteren Befehl
//
// v0.43b:19.05.2021
//        				-logische Operatoren AND OR und NOT erstmal wieder deaktiviert, funktioniert so nicht
//        				-dafür müssten die jeweiligen Vergleichsergebnisse zwischengespeichert werden, hab ich noch keinen Plan
//
// v0.42b:18.05.2021
//        				-logische Operatore AND, OR und NOT eingefügt, noch in der Testphase
//        				-Klammerrechnung eingebaut (8+9)*2 ergibt jetzt das richtige Ergebnis 34 nicht 26
//        				-irgendwo steck aber noch ein Fehler, bei komplexen Berechnungen wird der Wert verloren (Ausgabe: nan)?
//        				-dies ist bei Fraktalberechnungen aufgefallen.
//        				-Versuch begonnen DATA,READ und RESTORE zu verwirklichen, muss aber erst ein Konzept dazu entwickeln
//        				-Befehl DEL zum Löschen von Dateien auf der SD-Karte hinzugefügt
//        				-14538 Befehle/sek !?
//        				-Comparebereich muss noch umgebaut werden IF funktioniert nicht korrekt mit AND OR NOT
//
// v0.41b:17.05.2021
//        				-nach der Tastaturinitialisierung kurzen delay eingefügt, es gab immer wieder Startschwierigkeiten nach dem flashen
//        				-keine Ahnung, ob das die Lösung ist, bisher funktioniert's
//        				-Startbildschirm etwas modifiziert (nur noch 2 Zeilen aber breiter)
//        				-momentane Geschwindigkeit=20523 Befehle/sek.
//        				-Printausgabe für Hex und Bin Zahlen eingefügt (Print HEX(123), BIN(88) )
//        				-Routine printUnum durch Terminal.print-Befehl ersetzt ->Ausgabe erfolgt nur über das FabGl-Terminal
//        				-Serial-Ausgabe deaktiviert ->Ausgabe nur über FabGl-Terminal
//        				-Geschwindigkeit=20650 Befehle/sek. - die Befehle/sek. variieren sehr stark, ist also nicht überzubewerten
//        				-nach Compilierung ohne größere Änderungen 20160 Bef./sek. (Schwankungen der CPU-Frequenz?)
//
// v0.40b:16.05.2021
//        				-Versionssprung, EEPROM-Speicherroutinen zur Speicherung und Lesen von Startparametern integriert
//        				-mit dem Befehl THEME kann jetzt ein Colorschema permanent gespeichert und beim Start geladen werden
//        				-dieser Befehl sollte nur im Kommandomodus verwendet werden, nicht im Programm (->Programmabsturz)
//        				-zur Zeit sind 10 Themen integriert 0 .. 9 (C64,C128,CPC,ATARI800,ZX-Spectrum,Amiga,KC85,VIC20,TRS80,Warm)
//        				-Routine printmsg modifiziert (Farbsetzbefehl), nach der Ausgabe konnte es passieren, das der Interpreter
//        				-statt der Themen-Farben die Terminalfarben setzte, das wird hiermit verhindert
//        				-etwas aufgeräumt und Kommentare hinzugefügt
//        				-Hexadezimal- und Binär-Eingabe eingebaut -> noch im Test ->fehlt noch die Ausgabe
//       				-Startbildschirm um die Anzeige der CPU-Frequenz erweitert
//
// v0.34b:15.05.2021
//        				-Einige Programmteile zur Verarbeitung von Strings zusammengefasst
//        				-TAB(x) integriert - setzt den Cursor auf die Spaltenposition x
//        				-damit begonnen, den Code zu entflechten um von den GOTO Anweisungen wegzukommen
//        				-Hauptschleife heisst jetzt Basic_interpreter(), als nächstes wird der Programmteil prompt: extrahiert
//        				-die meisten Programmteile wurden als externe Routinen extrahiert - viel Potential für Zusammenfassungen
//        				-die Geschwindigkeit hängt sehr stark von eventuellen Optimierungen ab
//        				-zur Zeit arbeitet der Interpreter mit 19_668 Befehle pro Sekunde (schon recht fix, es waren aber mal mehr als 20_000)
//        				-Umstellung von COLOR auf 64 Farben
//
// v0.33b:14.05.2021
//        				-STRING$-Befehl auf Stringvariablen erweitert
//        				-Befehl LEN für die Ermittlung von Stringlängen eingefügt (Print LEN(a$), b=LEN(t$))
//        				-Nur für Stringvariablen vorgesehen (keine Zeichenketten in Anführungszeichen - weil das keinen Sinn machen würde)
//        				-Funktion INSTR implementiert sucht Zeichenkette1 in Zeichenkette2 INSTR(zeichenkette1,zeichenkette2) und gibt die Position in Zeichenkette2 aus
//        				-ist zeichenkette1 in zeichenkette2 nicht vorhanden wird als Wert 0 zurückgegeben
//        				-funktioniert mit Zeichenketten in Anführungszeichen und mit Stringvariablen (a$-z$)
//        				-Funktion COMP vergleicht zwei Strings (Zeichenketten) COMP(a$,b$)
//        				-Rückgabe: 	-1 wenn a$<b$ (beachte Groß-und Kleinschreibung A < a )
//                    						1 wenn a$>b$ (beachte Groß-und Kleinschreibung a > Z )
//                    						0 wenn a$=b$
//       		 		-Versuche, eine RTC einzubinden sind gescheitert (offensichtlich kann weder über NTP noch mit I2C RTC genutzt werden)
//        				-Experimente mit der internen RTC funktionieren zwar, die Zeit ist aber nach einem Reset wieder weg, macht also keinen Sinn
//        				-abgesehen davon soll die interne Uhr recht ungenau sein
//
// v0.32b:13.05.2021
//        				-Stringvariablen funktionieren in den Grundfunktionen (a$="Text", print a$;b$)
//        				-ob ich die Stringfunktionen LEFT$,RIGHT$ und MID$ einbaue, weiss ich noch nicht, Strings sind in Aduino Schei...
//        				-STRING$-Funktion eingefügt (Stringwiederholung String$(5,"TEST") wiederholt 5x die Ausgabe von TEST) - momentan nur mit Strings in Anführungszeichen
//        				-PRINT-Programmteil komplett umgebaut (mit case Anweisungen) -> jetzt etwas übersichtlicher und logischer aufgebaut
//
// v0.30b:10.05.2021
//        				-VGAController auf 64 Farben und einer Auflösung von 320x240 Pixeln umgestellt
//        				-Befehle BRUSH und PEN für die Nutzung der 64 Farben integriert
//        				-Variablenbereich erweitert -> jetzt sind zweistellige Variablen erlaubt (aa,ab,...zz)
//        				-Beginn der Integration von String-Variablen, gestaltet sich schwierig - Arduino hasst Strings!?
//
// v0.29b:09.05.2021
//        				-POKE-Befehl korrigiert und vervollständigt ->es wurden falsche Datentypen verwendet
//        				-Befehl TIMER hinzugefügt (fragt den internen Timer ab, damit lassen sich Zeitdifferenzen berechnen)
//        				-MOD Operand hinzugefügt -> gibt den Modulo-Wert zurück (a=4 mod 5)
//        				-Bit-Operation Shift left und Shift right (a<<b, a>>b) eingefügt
//        				-Bit Operatoren AND OR XOR NOT (&&, | , ^ , ~ ) hinzugefügt
//
// v0.28b:08.05.2021
//        				-Funktion SGN fehlerhaft, printUnum-Routine korrigiert (Minuswerte wurden falsch interpretiert)
//        				-Versuch, einen Zeileneditor zu implementieren - bisher nicht sehr erfolgreich - muss erst die Speicherverwaltung durchschauen
//        				-Memory_Dump ,List-Ausgabe und Files mit Warteschleifen nach n-Zeilen ausgestattet, um die Ausgabe nach n-Zeilen zu pausieren
//        				-Befehl Inkey zum Abfragen der Tastatur hinzugefügt
//        				-Befehl FONT gibt jetzt den aktuell ausgewählten Fontsatz zurück (Print FONT)
//        				-Befehl ASC("x") hinzugefügt ->gibt den ASCII-Wert eines Char's zurück
//
// v0.27b:07.05.2021
//        				-SD-Card Anbindung erfolgreich mit folgender Pinkonfiguration: 14,16,17,13 //SCK,MISO,MOSI,CS und standard SPI.h/SD.h
//        				-Load und Save funktionieren auch, jetzt wird's auch was
//        				-Funktion GETX und GETY zur Ermittlung der Cursorposition eingefügt
//        				-Funktion CHR$ geschaffen
//
// v0.26b:05.05.2021
//        				-Versuche ein Filesystem zu implementieren sind gescheitert, bei der Auflösung 640x480 und 16 Farben ist das nicht möglich
//        				-außerdem werden die benötigten SPI-Pins durch den VGA-Anschluss blockiert, das SD-Card-Filesystem von Fabgl funktioniert auch nur mit geringeren Auflösungen
//        				-Dateisystem wird ausgelagert -> am Besten Propeller-Chip, hier könnte neben dem Dateisystem eine SID-Emulation laufen u.a.
//        				-werde erstmal am Basic selbst noch etwas optimieren/erweitern.
//        				-Fehler im DUMP-Befehl behoben -> Fehler wurde nicht gelöscht
//        				-Befehl STYLE für die verschiedenen Textstile eingefügt Style 1...6, Style 1,2,3 ->bold,italic,underline
//
// v0.25b:04.05.2021
//        				-DUMP-Befehl eingefügt, ein Speichermonitor muss einfach sein
//        				-da sich die Eingabe von Hexadezimalzahlen bisher als ziemlich tricky herausgestellt hat, wird hier mit dezimalen Speicheradressen gearbeitet (noch)
//        				-SD-Card-Routinen müssen neu geschrieben werden, die vorhandenen setzen eine Pinconfiguration voraus, die durch VGA belegt ist
//        				-außerdem bringt fabutils.h entsprechende Routinen mit, die müssen aber noch erforscht werden
//        				-deshalb sind LOAD,SAVE usw.zur Zeit nicht nutzbar :-(
//
// v0.24b:03.05.2021
//        				-Unterroutine spaces() eingebaut ->im Gegensatz zu ignore_blanks() wird das Aktuelle Zeichen zurückgegeben, damit sind einige Abfragen kürzer
//        				-FOR-NEXT-Schleife kann jetzt auch in einer Zeile stehen
//        				-eine Abfrage der Cursorposition wäre für viele Dinge sinnvoll ->muss mal schauen, wie ich das mit den verschiedenen Fonts hinbekomme
//        				-mathematische Berechnungen auf Zahlentyp double umgestellt, das ist sehr viel genauer
//        				-Befehl PRZ zum setzen der Nachkommastellen eingefügt -> Standardwert ist 6
//        				-langsam wird's ein richtiger Basic-Interpreter :-)
//
// v0.23b:02.05.2021
//        				-Exponentialschreibweise eingebaut Wertebereich 1E-37 bis 1E+38
//        				-Canvas.GFX Funktion für Grafikroutinen verwendet ->ca.doppelte Grafikgeschwindigkeit als mit Terminal-Befehlen
//        				-Cursor Ein-Aus - Funktion hinzugefügt
//
// v0.22: 01.05.2021
//        				-THEN eingefügt, mit Fehlerabfrage, ob vorhanden ->sieht einfach besser aus
//        				-ELSE eingefügt -> langsam wird's
//        				-Funktionstastenbelegung funktioniert bei dieser Art des Programmaufbau's nicht - mal sehen, ob mir was einfällt
//        				-Fehlermessage-Verwaltung muss ich noch besser hinbekommen
//        				-PRINT Befehl erweitert, jetzt können mehrere Ausdrücke mit Komma oder Semikolon getrennt ausgegeben werden
//        				-BYE Befehl verbessert, jetzt startet der Interpreter auch optisch neu (Startbildschirm)
//
// v0.21: 30.04.2021
//        				-mathematische Funktionen MIN,MAX,POW,CONST eingefügt
//        				-Tastaturabfrage verändert ->jetzt funktioniert auch Backspace und CTRL-C
//        				-Error-Meldung für mathematische Funktionen eingefügt
//        				-Befehl DELAY -> in PAUSE umbenannt
//        				-Fehler in Zeilenabarbeitung behoben, es wurde nach Delay kein weiterer Befehl in der gleichen Zeile abgearbeitet
//        				-Todo: 	-SD-Karte anbinden -> Routinen sind schon implementiert
//               					-Code etwas entflechten und nicht benötigte Programmteile entfernen
//               					-Port- bzw. Pin-Funktionen testen
//               					-Befehl CLEAR funktioniert, ein Kommafehler war die Ursache
//               					-ein Zeileneditor wäre noch cool
//               					-THEN für IF einbauen
//
// v0.20: 28.04.2021 ->Versionssprung wegen erweiterter mathematischer Funktionen
//        				-Funktionen SIN,COS,TAN,LN,SGN,SQR,PI eingefügt
//        				-Anmerkung: die Genauigkeit der Fliesskomma-Funktionalität ist noch unbefriedigend - keine Ahnung, ob das lösbar ist
//        				-Exponentialschreibweise muss noch eingepflegt werden, sonst ist das Ganze bei sehr großen Zahlen nicht mehr sinnvoll
//        				-!!!!! es gibt für IF kein THEN - was soll das denn?
//
// V0.17: 27.04.2021
//       				-Fliesskomma-Arithmetik funktioniert in den Grundzügen, nur die Genauigkeit von nur 2 Nachkommastellen stört mich noch
//       				-For-Next funktioniert mit Fliesskomma
//       				-Wertezuweisung der Variablen mit Fliesskomma funktioniert
//       				-RND(X) Funktion gab es schon -> abgehakt!
//
// v0.16: 26.04.2021
//       				-Befehle Circle, Line, Rect eingefügt
//
// v0.15: 25.04.2021
//       				Vorlage zum experimentieren herangezogen
//      				hinzugefügte Funktionen: CLS, COLOR, PSET
//       				Basic-Speicher auf 64kB erhöht - (keine Ahnung, ob das funktioniert)
//       				todo:	- RANDOM-Funktion
//           					- weitere Grafikfunktionen
//            					- versuchen Gleitkomma-Arithmetik zu implementieren
//            					- danach mathematische Funktionen (SIN,COS,ATN,CTAN,EXP,LN,SQR,SGN)