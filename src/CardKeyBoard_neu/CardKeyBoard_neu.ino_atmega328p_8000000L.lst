
/var/folders/4x/zz52zwl12rv9btx1l4h1brfw0000gn/T/arduino_build_685184/CardKeyBoard_neu.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__dtors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 09       	sbc	r16, r0
      6c:	00 03       	mulsu	r16, r16
      6e:	02 00       	.word	0x0002	; ????
      70:	00 04       	cpc	r0, r0
      72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
      7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
      96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_input_PGM>:
      ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000b7 <port_to_output_PGM>:
      b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c1 <port_to_mode_PGM>:
      c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000cc <__ctors_start>:
__ctors_start():
      cc:	27 06       	cpc	r2, r23

000000ce <__ctors_end>:
__dtors_start():
      ce:	38 06       	cpc	r3, r24

000000d0 <__dtors_end>:
__dtors_end():
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d8 e0       	ldi	r29, 0x08	; 8
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      dc:	13 e0       	ldi	r17, 0x03	; 3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      de:	a0 e0       	ldi	r26, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e0:	b1 e0       	ldi	r27, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e2:	ec e2       	ldi	r30, 0x2C	; 44
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e4:	fc e1       	ldi	r31, 0x1C	; 28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      e8:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      ea:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ec:	a2 3c       	cpi	r26, 0xC2	; 194
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ee:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      f2:	23 e0       	ldi	r18, 0x03	; 3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      f4:	a2 ec       	ldi	r26, 0xC2	; 194
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      f6:	b3 e0       	ldi	r27, 0x03	; 3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      fc:	ae 3f       	cpi	r26, 0xFE	; 254
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      fe:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>

00000102 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     102:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     104:	c7 e6       	ldi	r28, 0x67	; 103
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     106:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     108:	04 c0       	rjmp	.+8      	; 0x112 <__do_global_ctors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     10a:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10c:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     10e:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     112:	c6 36       	cpi	r28, 0x66	; 102
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     114:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     116:	c9 f7       	brne	.-14     	; 0x10a <__do_global_ctors+0x8>
     118:	0e 94 9f 0c 	call	0x193e	; 0x193e <main>
     11c:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__do_global_dtors>

00000120 <__bad_interrupt>:
__vector_22():
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <sendScanCode(int, int) [clone .part.1]>:
_Z12sendScanCodeii():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:315
}

// Scancode senden
// break
// no : Datensatznummer der Scancode-Tabelle
void sendScanCode(int16_t no, int rpt_flag) {
     124:	ef 92       	push	r14
     126:	ff 92       	push	r15
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	df 93       	push	r29
     130:	8c 01       	movw	r16, r24
     132:	ec 01       	movw	r28, r24
     134:	cc 0f       	add	r28, r28
     136:	dd 1f       	adc	r29, r29
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:329
    keyboard.write(ScanMap[no][2]);
    delay(10);
    return;
  }

  if (rpt_flag == 2) {
     138:	62 30       	cpi	r22, 0x02	; 2
     13a:	71 05       	cpc	r23, r1
     13c:	39 f5       	brne	.+78     	; 0x18c <sendScanCode(int, int) [clone .part.1]+0x68>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:330
    keyboard.write(0xf0);
     13e:	60 ef       	ldi	r22, 0xF0	; 240
     140:	88 ed       	ldi	r24, 0xD8	; 216
     142:	93 e0       	ldi	r25, 0x03	; 3
     144:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:331
    keyboard.write(ScanMap[no][2]);
     148:	c0 0f       	add	r28, r16
     14a:	d1 1f       	adc	r29, r17
     14c:	ca 5f       	subi	r28, 0xFA	; 250
     14e:	de 4f       	sbci	r29, 0xFE	; 254
     150:	6a 81       	ldd	r22, Y+2	; 0x02
     152:	88 ed       	ldi	r24, 0xD8	; 216
     154:	93 e0       	ldi	r25, 0x03	; 3
     156:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:332
    if (ScanMap[no][1] & 1) {
     15a:	89 81       	ldd	r24, Y+1	; 0x01
     15c:	80 ff       	sbrs	r24, 0
     15e:	0a c0       	rjmp	.+20     	; 0x174 <sendScanCode(int, int) [clone .part.1]+0x50>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:334
      // Wenn die Umschalttaste zusammen verwendet wird, senden Sie zuletzt den Scancode der rechten Umschalttaste.
      keyboard.write(0xf0);
     160:	60 ef       	ldi	r22, 0xF0	; 240
     162:	88 ed       	ldi	r24, 0xD8	; 216
     164:	93 e0       	ldi	r25, 0x03	; 3
     166:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:335
      keyboard.write(0x59);
     16a:	69 e5       	ldi	r22, 0x59	; 89
     16c:	88 ed       	ldi	r24, 0xD8	; 216
     16e:	93 e0       	ldi	r25, 0x03	; 3
     170:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:337
    }
    delay(10);
     174:	6a e0       	ldi	r22, 0x0A	; 10
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:389
      keyboard.write(0x14);              //FN - Key als Cntrl - Key
    }
    ctrl = 0;                            //ctrl-Marker löschen
  }

}
     17c:	df 91       	pop	r29
     17e:	cf 91       	pop	r28
     180:	1f 91       	pop	r17
     182:	0f 91       	pop	r16
     184:	ff 90       	pop	r15
     186:	ef 90       	pop	r14
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:337
    if (ScanMap[no][1] & 1) {
      // Wenn die Umschalttaste zusammen verwendet wird, senden Sie zuletzt den Scancode der rechten Umschalttaste.
      keyboard.write(0xf0);
      keyboard.write(0x59);
    }
    delay(10);
     188:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:344
  }
  //****************** Repeat funktion- Test *****************************


  // Code senden
  if (ScanMap[no][1] & 1) {
     18c:	fe 01       	movw	r30, r28
     18e:	e0 0f       	add	r30, r16
     190:	f1 1f       	adc	r31, r17
     192:	ea 5f       	subi	r30, 0xFA	; 250
     194:	fe 4f       	sbci	r31, 0xFE	; 254
     196:	81 81       	ldd	r24, Z+1	; 0x01
     198:	80 ff       	sbrs	r24, 0
     19a:	05 c0       	rjmp	.+10     	; 0x1a6 <sendScanCode(int, int) [clone .part.1]+0x82>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:346
    // Wenn die Umschalttaste zusammen verwendet wird, senden Sie zuerst den Scancode der rechten Umschalttaste.
    keyboard.write(0x59);
     19c:	69 e5       	ldi	r22, 0x59	; 89
     19e:	88 ed       	ldi	r24, 0xD8	; 216
     1a0:	93 e0       	ldi	r25, 0x03	; 3
     1a2:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:349
  }

  if (ScanMap[no][1] & 2) {
     1a6:	fe 01       	movw	r30, r28
     1a8:	e0 0f       	add	r30, r16
     1aa:	f1 1f       	adc	r31, r17
     1ac:	ea 5f       	subi	r30, 0xFA	; 250
     1ae:	fe 4f       	sbci	r31, 0xFE	; 254
     1b0:	81 81       	ldd	r24, Z+1	; 0x01
     1b2:	81 ff       	sbrs	r24, 1
     1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <sendScanCode(int, int) [clone .part.1]+0x9c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:351
    // 2-Byte-Scancode
    keyboard.write(0xe0);
     1b6:	60 ee       	ldi	r22, 0xE0	; 224
     1b8:	88 ed       	ldi	r24, 0xD8	; 216
     1ba:	93 e0       	ldi	r25, 0x03	; 3
     1bc:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:354
  }

  if (ctrl == 1) {
     1c0:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <ctrl>
     1c4:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <ctrl+0x1>
     1c8:	01 97       	sbiw	r24, 0x01	; 1
     1ca:	59 f4       	brne	.+22     	; 0x1e2 <sendScanCode(int, int) [clone .part.1]+0xbe>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:355
    if (no > 69 && no < 96)
     1cc:	c8 01       	movw	r24, r16
     1ce:	86 54       	subi	r24, 0x46	; 70
     1d0:	91 09       	sbc	r25, r1
     1d2:	4a 97       	sbiw	r24, 0x1a	; 26
     1d4:	08 f0       	brcs	.+2      	; 0x1d8 <sendScanCode(int, int) [clone .part.1]+0xb4>
     1d6:	56 c0       	rjmp	.+172    	; 0x284 <sendScanCode(int, int) [clone .part.1]+0x160>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:357
    {
      keyboard.write(0x14);
     1d8:	64 e1       	ldi	r22, 0x14	; 20
     1da:	88 ed       	ldi	r24, 0xD8	; 216
     1dc:	93 e0       	ldi	r25, 0x03	; 3
     1de:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:362
    }
    else ctrl = 0;                            //ctrl-Marker löschen, wenn nicht a-z gedrückt
  }

  keyboard.keyboard_mkbrk(ScanMap[no][2]);
     1e2:	ce 01       	movw	r24, r28
     1e4:	80 0f       	add	r24, r16
     1e6:	91 1f       	adc	r25, r17
     1e8:	9c 01       	movw	r18, r24
     1ea:	2a 5f       	subi	r18, 0xFA	; 250
     1ec:	3e 4f       	sbci	r19, 0xFE	; 254
     1ee:	79 01       	movw	r14, r18
     1f0:	f9 01       	movw	r30, r18
     1f2:	62 81       	ldd	r22, Z+2	; 0x02
     1f4:	88 ed       	ldi	r24, 0xD8	; 216
     1f6:	93 e0       	ldi	r25, 0x03	; 3
     1f8:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <PS2dev::keyboard_mkbrk(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:365

  // Break Code senden
  if (ScanMap[no][1] & 2) {
     1fc:	f7 01       	movw	r30, r14
     1fe:	81 81       	ldd	r24, Z+1	; 0x01
     200:	81 ff       	sbrs	r24, 1
     202:	05 c0       	rjmp	.+10     	; 0x20e <sendScanCode(int, int) [clone .part.1]+0xea>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:367
    // 2-Byte-Scancode
    keyboard.write(0xe0);
     204:	60 ee       	ldi	r22, 0xE0	; 224
     206:	88 ed       	ldi	r24, 0xD8	; 216
     208:	93 e0       	ldi	r25, 0x03	; 3
     20a:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:370

  }
  keyboard.write(0xf0);
     20e:	60 ef       	ldi	r22, 0xF0	; 240
     210:	88 ed       	ldi	r24, 0xD8	; 216
     212:	93 e0       	ldi	r25, 0x03	; 3
     214:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:371
  keyboard.write(ScanMap[no][2]);
     218:	c0 0f       	add	r28, r16
     21a:	d1 1f       	adc	r29, r17
     21c:	ca 5f       	subi	r28, 0xFA	; 250
     21e:	de 4f       	sbci	r29, 0xFE	; 254
     220:	6a 81       	ldd	r22, Y+2	; 0x02
     222:	88 ed       	ldi	r24, 0xD8	; 216
     224:	93 e0       	ldi	r25, 0x03	; 3
     226:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:374
  //delay(10);

  if (ScanMap[no][1] & 1) {
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	80 ff       	sbrs	r24, 0
     22e:	0a c0       	rjmp	.+20     	; 0x244 <sendScanCode(int, int) [clone .part.1]+0x120>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:376
    // Wenn die Umschalttaste zusammen verwendet wird, senden Sie zuletzt den Scancode der rechten Umschalttaste.
    keyboard.write(0xf0);
     230:	60 ef       	ldi	r22, 0xF0	; 240
     232:	88 ed       	ldi	r24, 0xD8	; 216
     234:	93 e0       	ldi	r25, 0x03	; 3
     236:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:377
    keyboard.write(0x59);
     23a:	69 e5       	ldi	r22, 0x59	; 89
     23c:	88 ed       	ldi	r24, 0xD8	; 216
     23e:	93 e0       	ldi	r25, 0x03	; 3
     240:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:380
  }

  if (ctrl == 1) {
     244:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <ctrl>
     248:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <ctrl+0x1>
     24c:	01 97       	sbiw	r24, 0x01	; 1
     24e:	99 f4       	brne	.+38     	; 0x276 <sendScanCode(int, int) [clone .part.1]+0x152>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:381
    if (no > 69 && no < 96)
     250:	06 54       	subi	r16, 0x46	; 70
     252:	11 09       	sbc	r17, r1
     254:	0a 31       	cpi	r16, 0x1A	; 26
     256:	11 05       	cpc	r17, r1
     258:	50 f4       	brcc	.+20     	; 0x26e <sendScanCode(int, int) [clone .part.1]+0x14a>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:383
    {
      keyboard.write(0xf0);
     25a:	60 ef       	ldi	r22, 0xF0	; 240
     25c:	88 ed       	ldi	r24, 0xD8	; 216
     25e:	93 e0       	ldi	r25, 0x03	; 3
     260:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:384
      keyboard.write(0x14);              //FN - Key als Cntrl - Key
     264:	64 e1       	ldi	r22, 0x14	; 20
     266:	88 ed       	ldi	r24, 0xD8	; 216
     268:	93 e0       	ldi	r25, 0x03	; 3
     26a:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:386
    }
    ctrl = 0;                            //ctrl-Marker löschen
     26e:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <ctrl+0x1>
     272:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <ctrl>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:389
  }

}
     276:	df 91       	pop	r29
     278:	cf 91       	pop	r28
     27a:	1f 91       	pop	r17
     27c:	0f 91       	pop	r16
     27e:	ff 90       	pop	r15
     280:	ef 90       	pop	r14
     282:	08 95       	ret
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:359
  if (ctrl == 1) {
    if (no > 69 && no < 96)
    {
      keyboard.write(0x14);
    }
    else ctrl = 0;                            //ctrl-Marker löschen, wenn nicht a-z gedrückt
     284:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <ctrl+0x1>
     288:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <ctrl>
     28c:	aa cf       	rjmp	.-172    	; 0x1e2 <sendScanCode(int, int) [clone .part.1]+0xbe>

0000028e <findScanMap(unsigned char)>:
_Z11findScanMaph():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:243
};

uint8_t enabled = 0;              // PS/2 Host zum Senden bereit

// Durchsucht die Scan-Code-Konvertierungstabelle
int16_t findScanMap(uint8_t code) {
     28e:	28 2f       	mov	r18, r24
     290:	e6 e0       	ldi	r30, 0x06	; 6
     292:	f1 e0       	ldi	r31, 0x01	; 1
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:245
  int16_t no = -1;
  for (int16_t i = 0; i < 121; i++) {
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	80 e0       	ldi	r24, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:246
    if (ScanMap[i][0] == code) {
     298:	30 81       	ld	r19, Z
     29a:	32 17       	cp	r19, r18
     29c:	39 f0       	breq	.+14     	; 0x2ac <findScanMap(unsigned char)+0x1e>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:245 (discriminator 2)
uint8_t enabled = 0;              // PS/2 Host zum Senden bereit

// Durchsucht die Scan-Code-Konvertierungstabelle
int16_t findScanMap(uint8_t code) {
  int16_t no = -1;
  for (int16_t i = 0; i < 121; i++) {
     29e:	01 96       	adiw	r24, 0x01	; 1
     2a0:	33 96       	adiw	r30, 0x03	; 3
     2a2:	89 37       	cpi	r24, 0x79	; 121
     2a4:	91 05       	cpc	r25, r1
     2a6:	c1 f7       	brne	.-16     	; 0x298 <findScanMap(unsigned char)+0xa>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:244

uint8_t enabled = 0;              // PS/2 Host zum Senden bereit

// Durchsucht die Scan-Code-Konvertierungstabelle
int16_t findScanMap(uint8_t code) {
  int16_t no = -1;
     2a8:	8f ef       	ldi	r24, 0xFF	; 255
     2aa:	9f ef       	ldi	r25, 0xFF	; 255
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:252
      no = i;
      break;
    }
  }
  return no;
}
     2ac:	08 95       	ret

000002ae <ack()>:
_Z3ackv():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:256

// PS/2 Sende eine Bestätigung an den Host
void ack() {
  while (keyboard.write(0xFA));
     2ae:	6a ef       	ldi	r22, 0xFA	; 250
     2b0:	88 ed       	ldi	r24, 0xD8	; 216
     2b2:	93 e0       	ldi	r25, 0x03	; 3
     2b4:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
     2b8:	89 2b       	or	r24, r25
     2ba:	c9 f7       	brne	.-14     	; 0x2ae <ack()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:257
}
     2bc:	08 95       	ret

000002be <keyboardcommand(int)>:
_Z15keyboardcommandi():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:260

// PS/2 Vom Host gesendete Befehle verarbeiten
int keyboardcommand(int command) {
     2be:	cf 93       	push	r28
     2c0:	df 93       	push	r29
     2c2:	1f 92       	push	r1
     2c4:	cd b7       	in	r28, 0x3d	; 61
     2c6:	de b7       	in	r29, 0x3e	; 62
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:263
  unsigned char val;
  uint32_t tm;
  switch (command) {
     2c8:	8d 5e       	subi	r24, 0xED	; 237
     2ca:	91 09       	sbc	r25, r1
     2cc:	83 31       	cpi	r24, 0x13	; 19
     2ce:	91 05       	cpc	r25, r1
     2d0:	08 f5       	brcc	.+66     	; 0x314 <keyboardcommand(int)+0x56>
     2d2:	fc 01       	movw	r30, r24
     2d4:	e2 59       	subi	r30, 0x92	; 146
     2d6:	fe 4f       	sbci	r31, 0xFE	; 254
     2d8:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__tablejump2__>
     2dc:	b4 01       	movw	r22, r8
     2de:	b2 01       	movw	r22, r4
     2e0:	8a 01       	movw	r16, r20
     2e2:	99 01       	movw	r18, r18
     2e4:	8a 01       	movw	r16, r20
     2e6:	a5 01       	movw	r20, r10
     2e8:	99 01       	movw	r18, r18
     2ea:	95 01       	movw	r18, r10
     2ec:	90 01       	movw	r18, r0
     2ee:	92 01       	movw	r18, r4
     2f0:	8a 01       	movw	r16, r20
     2f2:	8a 01       	movw	r16, r20
     2f4:	8a 01       	movw	r16, r20
     2f6:	8a 01       	movw	r16, r20
     2f8:	8a 01       	movw	r16, r20
     2fa:	8a 01       	movw	r16, r20
     2fc:	8a 01       	movw	r16, r20
     2fe:	92 01       	movw	r18, r4
     300:	81 01       	movw	r16, r2
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:265
    case 0xFF:
      ack();// Reset: Befehl zum Zurücksetzen der Tastatur. Gibt ACK zurück, wenn es korrekt empfangen wurde.
     302:	0e 94 57 01 	call	0x2ae	; 0x2ae <ack()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:266
      while (keyboard.write(0xAA) != 0);
     306:	6a ea       	ldi	r22, 0xAA	; 170
     308:	88 ed       	ldi	r24, 0xD8	; 216
     30a:	93 e0       	ldi	r25, 0x03	; 3
     30c:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
     310:	89 2b       	or	r24, r25
     312:	c9 f7       	brne	.-14     	; 0x306 <keyboardcommand(int)+0x48>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:310
      ack();
      return 1;
      break;
  }
  return 1;
}
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	0f 90       	pop	r0
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:277
      //enter stream mode
      ack();
      break;
    case 0xF5: //Kehre zum Startzustand zurück und stoppe den Keyscan
      //FM
      enabled = 0;
     320:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <__data_end>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:287 (discriminator 1)
      enabled = 1;
      ack();
      break;
    case 0xF3: //set typematic rate/delay :
      ack();
      if (!keyboard.read(&val)) ack(); //do nothing with the rate
     324:	0e 94 57 01 	call	0x2ae	; 0x2ae <ack()>
     328:	f5 cf       	rjmp	.-22     	; 0x314 <keyboardcommand(int)+0x56>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:282
      enabled = 0;
      ack();
      break;
    case 0xF4: //Keyscan starten
      //FM
      enabled = 1;
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <__data_end>
     330:	f9 cf       	rjmp	.-14     	; 0x324 <keyboardcommand(int)+0x66>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:286
      ack();
      break;
    case 0xF3: //set typematic rate/delay :
      ack();
     332:	0e 94 57 01 	call	0x2ae	; 0x2ae <ack()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:287
      if (!keyboard.read(&val)) ack(); //do nothing with the rate
     336:	be 01       	movw	r22, r28
     338:	6f 5f       	subi	r22, 0xFF	; 255
     33a:	7f 4f       	sbci	r23, 0xFF	; 255
     33c:	88 ed       	ldi	r24, 0xD8	; 216
     33e:	93 e0       	ldi	r25, 0x03	; 3
     340:	0e 94 17 0a 	call	0x142e	; 0x142e <PS2dev::read(unsigned char*)>
     344:	89 2b       	or	r24, r25
     346:	31 f7       	brne	.-52     	; 0x314 <keyboardcommand(int)+0x56>
     348:	ed cf       	rjmp	.-38     	; 0x324 <keyboardcommand(int)+0x66>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:290
      break;
    case 0xF2: //get device id :
      ack();
     34a:	0e 94 57 01 	call	0x2ae	; 0x2ae <ack()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:291
      keyboard.write(0xAB);
     34e:	6b ea       	ldi	r22, 0xAB	; 171
     350:	88 ed       	ldi	r24, 0xD8	; 216
     352:	93 e0       	ldi	r25, 0x03	; 3
     354:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:292
      keyboard.write(0x83);
     358:	63 e8       	ldi	r22, 0x83	; 131
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:300
      ack();
      if (!keyboard.read(&val)) ack(); //do nothing with the rate
      break;
    case 0xEE: //echo :Wenn eine Tastatur angeschlossen ist, reagiert die Tastatur auf den Computer.（ECHO Response）Gib es zurück.
      //ack();
      keyboard.write(0xEE);
     35a:	88 ed       	ldi	r24, 0xD8	; 216
     35c:	93 e0       	ldi	r25, 0x03	; 3
     35e:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:301
      break;
     362:	d8 cf       	rjmp	.-80     	; 0x314 <keyboardcommand(int)+0x56>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:300
      ack();
      if (!keyboard.read(&val)) ack(); //do nothing with the rate
      break;
    case 0xEE: //echo :Wenn eine Tastatur angeschlossen ist, reagiert die Tastatur auf den Computer.（ECHO Response）Gib es zurück.
      //ack();
      keyboard.write(0xEE);
     364:	6e ee       	ldi	r22, 0xEE	; 238
     366:	f9 cf       	rjmp	.-14     	; 0x35a <keyboardcommand(int)+0x9c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:303
      break;
    case 0xED: //set/reset LEDs :Anfrage zum Ein-/Ausschalten der Tastatur-LED. Geben Sie die LED mit dem folgenden Optionsbyte an.
      ack();
     368:	0e 94 57 01 	call	0x2ae	; 0x2ae <ack()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:304
      if (!keyboard.read(&val)) ack();; //do nothing with the rate
     36c:	be 01       	movw	r22, r28
     36e:	6f 5f       	subi	r22, 0xFF	; 255
     370:	7f 4f       	sbci	r23, 0xFF	; 255
     372:	88 ed       	ldi	r24, 0xD8	; 216
     374:	93 e0       	ldi	r25, 0x03	; 3
     376:	0e 94 17 0a 	call	0x142e	; 0x142e <PS2dev::read(unsigned char*)>
     37a:	89 2b       	or	r24, r25
     37c:	99 f6       	brne	.-90     	; 0x324 <keyboardcommand(int)+0x66>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:304 (discriminator 1)
     37e:	0e 94 57 01 	call	0x2ae	; 0x2ae <ack()>
     382:	d0 cf       	rjmp	.-96     	; 0x324 <keyboardcommand(int)+0x66>

00000384 <sendScanCode(int, int)>:
_Z12sendScanCodeii():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:315
}

// Scancode senden
// break
// no : Datensatznummer der Scancode-Tabelle
void sendScanCode(int16_t no, int rpt_flag) {
     384:	0f 93       	push	r16
     386:	1f 93       	push	r17
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:318
  //****************** Repeat funktion- Test *****************************

  if (rpt_flag == 1) {
     38c:	61 30       	cpi	r22, 0x01	; 1
     38e:	71 05       	cpc	r23, r1
     390:	21 f5       	brne	.+72     	; 0x3da <sendScanCode(int, int)+0x56>
     392:	ec 01       	movw	r28, r24
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:319
    if (ScanMap[no][1] & 1) {
     394:	8c 01       	movw	r16, r24
     396:	00 0f       	add	r16, r16
     398:	11 1f       	adc	r17, r17
     39a:	f8 01       	movw	r30, r16
     39c:	ec 0f       	add	r30, r28
     39e:	fd 1f       	adc	r31, r29
     3a0:	ea 5f       	subi	r30, 0xFA	; 250
     3a2:	fe 4f       	sbci	r31, 0xFE	; 254
     3a4:	81 81       	ldd	r24, Z+1	; 0x01
     3a6:	80 ff       	sbrs	r24, 0
     3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <sendScanCode(int, int)+0x30>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:321
      // Wenn die Umschalttaste zusammen verwendet wird, senden Sie zuerst den Scancode der rechten Umschalttaste.
      keyboard.write(0x59);
     3aa:	69 e5       	ldi	r22, 0x59	; 89
     3ac:	88 ed       	ldi	r24, 0xD8	; 216
     3ae:	93 e0       	ldi	r25, 0x03	; 3
     3b0:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:324
    }

    keyboard.write(ScanMap[no][2]);
     3b4:	c0 0f       	add	r28, r16
     3b6:	d1 1f       	adc	r29, r17
     3b8:	ca 5f       	subi	r28, 0xFA	; 250
     3ba:	de 4f       	sbci	r29, 0xFE	; 254
     3bc:	6a 81       	ldd	r22, Y+2	; 0x02
     3be:	88 ed       	ldi	r24, 0xD8	; 216
     3c0:	93 e0       	ldi	r25, 0x03	; 3
     3c2:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:325
    delay(10);
     3c6:	6a e0       	ldi	r22, 0x0A	; 10
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:389
      keyboard.write(0x14);              //FN - Key als Cntrl - Key
    }
    ctrl = 0;                            //ctrl-Marker löschen
  }

}
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:325
      // Wenn die Umschalttaste zusammen verwendet wird, senden Sie zuerst den Scancode der rechten Umschalttaste.
      keyboard.write(0x59);
    }

    keyboard.write(ScanMap[no][2]);
    delay(10);
     3d6:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:389
      keyboard.write(0x14);              //FN - Key als Cntrl - Key
    }
    ctrl = 0;                            //ctrl-Marker löschen
  }

}
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	1f 91       	pop	r17
     3e0:	0f 91       	pop	r16
     3e2:	0c 94 92 00 	jmp	0x124	; 0x124 <sendScanCode(int, int) [clone .part.1]>

000003e6 <flashOn()>:
_Z7flashOnv():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:393


void flashOn() {
  pixels.setPixelColor(0, pixels.Color(3, 3, 3)); pixels.show();
     3e6:	23 e0       	ldi	r18, 0x03	; 3
     3e8:	33 e0       	ldi	r19, 0x03	; 3
     3ea:	43 e0       	ldi	r20, 0x03	; 3
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	70 e0       	ldi	r23, 0x00	; 0
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	8c ed       	ldi	r24, 0xDC	; 220
     3f4:	93 e0       	ldi	r25, 0x03	; 3
     3f6:	0e 94 c6 08 	call	0x118c	; 0x118c <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)>
     3fa:	8c ed       	ldi	r24, 0xDC	; 220
     3fc:	93 e0       	ldi	r25, 0x03	; 3
     3fe:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <Adafruit_NeoPixel::show()>

00000402 <flashOff()>:
_Z8flashOffv():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:397
}

void flashOff() {
  pixels.setPixelColor(0, pixels.Color(0, 0, 0)); pixels.show();
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	a9 01       	movw	r20, r18
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	60 e0       	ldi	r22, 0x00	; 0
     40c:	8c ed       	ldi	r24, 0xDC	; 220
     40e:	93 e0       	ldi	r25, 0x03	; 3
     410:	0e 94 c6 08 	call	0x118c	; 0x118c <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)>
     414:	8c ed       	ldi	r24, 0xDC	; 220
     416:	93 e0       	ldi	r25, 0x03	; 3
     418:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <Adafruit_NeoPixel::show()>

0000041c <setup>:
setup():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:403
}


void setup() {
  //Serial.begin(115200);
  pinMode(A3, OUTPUT);
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	81 e1       	ldi	r24, 0x11	; 17
     420:	0e 94 0b 0c 	call	0x1816	; 0x1816 <pinMode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:404
  pinMode(A2, OUTPUT);
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	80 e1       	ldi	r24, 0x10	; 16
     428:	0e 94 0b 0c 	call	0x1816	; 0x1816 <pinMode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:405
  pinMode(A1, OUTPUT);
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	8f e0       	ldi	r24, 0x0F	; 15
     430:	0e 94 0b 0c 	call	0x1816	; 0x1816 <pinMode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:406
  pinMode(A0, OUTPUT);
     434:	61 e0       	ldi	r22, 0x01	; 1
     436:	8e e0       	ldi	r24, 0x0E	; 14
     438:	0e 94 0b 0c 	call	0x1816	; 0x1816 <pinMode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:407
  digitalWrite(A0, HIGH);
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	8e e0       	ldi	r24, 0x0E	; 14
     440:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:408
  digitalWrite(A1, LOW);
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	8f e0       	ldi	r24, 0x0F	; 15
     448:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:409
  digitalWrite(A2, LOW);
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	80 e1       	ldi	r24, 0x10	; 16
     450:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:410
  digitalWrite(A3, LOW);
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	81 e1       	ldi	r24, 0x11	; 17
     458:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:411
  DDRB = 0x00;
     45c:	14 b8       	out	0x04, r1	; 4
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:412
  PORTB = 0xff;
     45e:	8f ef       	ldi	r24, 0xFF	; 255
     460:	85 b9       	out	0x05, r24	; 5
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:413
  DDRD = 0x00;
     462:	1a b8       	out	0x0a, r1	; 10
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:414
  PORTD = 0xff;
     464:	8b b9       	out	0x0b, r24	; 11
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:416

  pixels.begin();
     466:	8c ed       	ldi	r24, 0xDC	; 220
     468:	93 e0       	ldi	r25, 0x03	; 3
     46a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <Adafruit_NeoPixel::begin()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:417
  keyboard.keyboard_init();
     46e:	88 ed       	ldi	r24, 0xD8	; 216
     470:	93 e0       	ldi	r25, 0x03	; 3
     472:	0c 94 d5 0a 	jmp	0x15aa	; 0x15aa <PS2dev::keyboard_init()>

00000476 <GetInput()>:
_Z8GetInputv():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:423

}

unsigned char GetInput() {
  unsigned char k = 0;
  digitalWrite(A3, LOW);
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	81 e1       	ldi	r24, 0x11	; 17
     47a:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:424
  digitalWrite(A2, HIGH);
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	80 e1       	ldi	r24, 0x10	; 16
     482:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:425
  digitalWrite(A1, HIGH);
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	8f e0       	ldi	r24, 0x0F	; 15
     48a:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:426
  digitalWrite(A0, HIGH);
     48e:	61 e0       	ldi	r22, 0x01	; 1
     490:	8e e0       	ldi	r24, 0x0E	; 14
     492:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:427
  if (PIND != 0xff) {
     496:	89 b1       	in	r24, 0x09	; 9
     498:	8f 3f       	cpi	r24, 0xFF	; 255
     49a:	09 f4       	brne	.+2      	; 0x49e <GetInput()+0x28>
     49c:	44 c0       	rjmp	.+136    	; 0x526 <GetInput()+0xb0>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:428
    switch (PIND)   {
     49e:	89 b1       	in	r24, 0x09	; 9
     4a0:	8f 3e       	cpi	r24, 0xEF	; 239
     4a2:	09 f4       	brne	.+2      	; 0x4a6 <GetInput()+0x30>
     4a4:	57 c0       	rjmp	.+174    	; 0x554 <GetInput()+0xde>
     4a6:	50 f4       	brcc	.+20     	; 0x4bc <GetInput()+0x46>
     4a8:	8f 3b       	cpi	r24, 0xBF	; 191
     4aa:	09 f4       	brne	.+2      	; 0x4ae <GetInput()+0x38>
     4ac:	57 c0       	rjmp	.+174    	; 0x55c <GetInput()+0xe6>
     4ae:	8f 3d       	cpi	r24, 0xDF	; 223
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <GetInput()+0x3e>
     4b2:	52 c0       	rjmp	.+164    	; 0x558 <GetInput()+0xe2>
     4b4:	8f 37       	cpi	r24, 0x7F	; 127
     4b6:	49 f4       	brne	.+18     	; 0x4ca <GetInput()+0x54>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:436
      case 251: k = 3; break; //2
      case 247: k = 4; break; //3
      case 239: k = 5; break; //4
      case 223: k = 6; break; //5
      case 191: k = 7; break; //6
      case 127: k =  8; break; //7
     4b8:	88 e0       	ldi	r24, 0x08	; 8
     4ba:	31 c0       	rjmp	.+98     	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:428
  digitalWrite(A3, LOW);
  digitalWrite(A2, HIGH);
  digitalWrite(A1, HIGH);
  digitalWrite(A0, HIGH);
  if (PIND != 0xff) {
    switch (PIND)   {
     4bc:	8b 3f       	cpi	r24, 0xFB	; 251
     4be:	09 f4       	brne	.+2      	; 0x4c2 <GetInput()+0x4c>
     4c0:	45 c0       	rjmp	.+138    	; 0x54c <GetInput()+0xd6>
     4c2:	30 f5       	brcc	.+76     	; 0x510 <GetInput()+0x9a>
     4c4:	87 3f       	cpi	r24, 0xF7	; 247
     4c6:	09 f4       	brne	.+2      	; 0x4ca <GetInput()+0x54>
     4c8:	43 c0       	rjmp	.+134    	; 0x550 <GetInput()+0xda>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:453
    hadPressed = 1;
    return k;
  }


  digitalWrite(A3, HIGH);
     4ca:	61 e0       	ldi	r22, 0x01	; 1
     4cc:	81 e1       	ldi	r24, 0x11	; 17
     4ce:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:454
  digitalWrite(A2,  LOW);
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	80 e1       	ldi	r24, 0x10	; 16
     4d6:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:455
  digitalWrite(A1, HIGH);
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	8f e0       	ldi	r24, 0x0F	; 15
     4de:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:456
  digitalWrite(A0, HIGH);
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	8e e0       	ldi	r24, 0x0E	; 14
     4e6:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:457
  if (PIND != 0xff) {
     4ea:	89 b1       	in	r24, 0x09	; 9
     4ec:	8f 3f       	cpi	r24, 0xFF	; 255
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <GetInput()+0x7c>
     4f0:	69 c0       	rjmp	.+210    	; 0x5c4 <GetInput()+0x14e>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:458
    switch (PIND)   {
     4f2:	89 b1       	in	r24, 0x09	; 9
     4f4:	8f 3e       	cpi	r24, 0xEF	; 239
     4f6:	09 f4       	brne	.+2      	; 0x4fa <GetInput()+0x84>
     4f8:	7a c0       	rjmp	.+244    	; 0x5ee <GetInput()+0x178>
     4fa:	a0 f5       	brcc	.+104    	; 0x564 <GetInput()+0xee>
     4fc:	8f 3b       	cpi	r24, 0xBF	; 191
     4fe:	09 f4       	brne	.+2      	; 0x502 <GetInput()+0x8c>
     500:	7a c0       	rjmp	.+244    	; 0x5f6 <GetInput()+0x180>
     502:	8f 3d       	cpi	r24, 0xDF	; 223
     504:	09 f4       	brne	.+2      	; 0x508 <GetInput()+0x92>
     506:	75 c0       	rjmp	.+234    	; 0x5f2 <GetInput()+0x17c>
     508:	8f 37       	cpi	r24, 0x7F	; 127
     50a:	89 f5       	brne	.+98     	; 0x56e <GetInput()+0xf8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:466
      case 251: k = 15; break; //W
      case 247: k = 16; break; //E
      case 239: k = 17; break; //R
      case 223: k = 18; break; //T
      case 191: k = 19; break; //Y
      case 127: k = 20; break; //U
     50c:	84 e1       	ldi	r24, 0x14	; 20
     50e:	07 c0       	rjmp	.+14     	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:428
  digitalWrite(A3, LOW);
  digitalWrite(A2, HIGH);
  digitalWrite(A1, HIGH);
  digitalWrite(A0, HIGH);
  if (PIND != 0xff) {
    switch (PIND)   {
     510:	8d 3f       	cpi	r24, 0xFD	; 253
     512:	21 f0       	breq	.+8      	; 0x51c <GetInput()+0xa6>
     514:	8e 3f       	cpi	r24, 0xFE	; 254
     516:	c9 f6       	brne	.-78     	; 0x4ca <GetInput()+0x54>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:429
      case 254: k = 1; break; //ESC
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	01 c0       	rjmp	.+2      	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:430
      case 253: k = 2; break; // 1
     51c:	82 e0       	ldi	r24, 0x02	; 2
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:551
      hadRelease = 1;
      return 255;
    }
  */
  if (k) {
    hadPressed = 1;
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	90 93 c6 03 	sts	0x03C6, r25	; 0x8003c6 <hadPressed>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:552
    return k;
     524:	08 95       	ret
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:439
      case 223: k = 6; break; //5
      case 191: k = 7; break; //6
      case 127: k =  8; break; //7
    }
  }
  else if (PIND != 223) {
     526:	89 b1       	in	r24, 0x09	; 9
     528:	8f 3d       	cpi	r24, 0xDF	; 223
     52a:	79 f2       	breq	.-98     	; 0x4ca <GetInput()+0x54>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:440
    switch (PINB)   {
     52c:	83 b1       	in	r24, 0x03	; 3
     52e:	8b 3d       	cpi	r24, 0xDB	; 219
     530:	59 f0       	breq	.+22     	; 0x548 <GetInput()+0xd2>
     532:	20 f4       	brcc	.+8      	; 0x53c <GetInput()+0xc6>
     534:	87 3d       	cpi	r24, 0xD7	; 215
     536:	49 f6       	brne	.-110    	; 0x4ca <GetInput()+0x54>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:444
      case 222: k = 9; break; //8
      case 221: k = 10; break; //9
      case 219: k = 11; break; //0
      case 215: k = 12; break; //Del
     538:	8c e0       	ldi	r24, 0x0C	; 12
     53a:	f1 cf       	rjmp	.-30     	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:440
      case 191: k = 7; break; //6
      case 127: k =  8; break; //7
    }
  }
  else if (PIND != 223) {
    switch (PINB)   {
     53c:	8d 3d       	cpi	r24, 0xDD	; 221
     53e:	81 f0       	breq	.+32     	; 0x560 <GetInput()+0xea>
     540:	8e 3d       	cpi	r24, 0xDE	; 222
     542:	19 f6       	brne	.-122    	; 0x4ca <GetInput()+0x54>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:441
      case 222: k = 9; break; //8
     544:	89 e0       	ldi	r24, 0x09	; 9
     546:	eb cf       	rjmp	.-42     	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:443
      case 221: k = 10; break; //9
      case 219: k = 11; break; //0
     548:	8b e0       	ldi	r24, 0x0B	; 11
     54a:	e9 cf       	rjmp	.-46     	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:431
  digitalWrite(A0, HIGH);
  if (PIND != 0xff) {
    switch (PIND)   {
      case 254: k = 1; break; //ESC
      case 253: k = 2; break; // 1
      case 251: k = 3; break; //2
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	e7 cf       	rjmp	.-50     	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:432
      case 247: k = 4; break; //3
     550:	84 e0       	ldi	r24, 0x04	; 4
     552:	e5 cf       	rjmp	.-54     	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:433
      case 239: k = 5; break; //4
     554:	85 e0       	ldi	r24, 0x05	; 5
     556:	e3 cf       	rjmp	.-58     	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:434
      case 223: k = 6; break; //5
     558:	86 e0       	ldi	r24, 0x06	; 6
     55a:	e1 cf       	rjmp	.-62     	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:435
      case 191: k = 7; break; //6
     55c:	87 e0       	ldi	r24, 0x07	; 7
     55e:	df cf       	rjmp	.-66     	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:442
    }
  }
  else if (PIND != 223) {
    switch (PINB)   {
      case 222: k = 9; break; //8
      case 221: k = 10; break; //9
     560:	8a e0       	ldi	r24, 0x0A	; 10
     562:	dd cf       	rjmp	.-70     	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:458
  digitalWrite(A3, HIGH);
  digitalWrite(A2,  LOW);
  digitalWrite(A1, HIGH);
  digitalWrite(A0, HIGH);
  if (PIND != 0xff) {
    switch (PIND)   {
     564:	8b 3f       	cpi	r24, 0xFB	; 251
     566:	61 f1       	breq	.+88     	; 0x5c0 <GetInput()+0x14a>
     568:	28 f5       	brcc	.+74     	; 0x5b4 <GetInput()+0x13e>
     56a:	87 3f       	cpi	r24, 0xF7	; 247
     56c:	f1 f1       	breq	.+124    	; 0x5ea <GetInput()+0x174>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:485
    hadPressed = 1;
    return k;
  }


  digitalWrite(A3, HIGH);
     56e:	61 e0       	ldi	r22, 0x01	; 1
     570:	81 e1       	ldi	r24, 0x11	; 17
     572:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:486
  digitalWrite(A2, HIGH);
     576:	61 e0       	ldi	r22, 0x01	; 1
     578:	80 e1       	ldi	r24, 0x10	; 16
     57a:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:487
  digitalWrite(A1, LOW);
     57e:	60 e0       	ldi	r22, 0x00	; 0
     580:	8f e0       	ldi	r24, 0x0F	; 15
     582:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:488
  digitalWrite(A0, HIGH);
     586:	61 e0       	ldi	r22, 0x01	; 1
     588:	8e e0       	ldi	r24, 0x0E	; 14
     58a:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:489
  if (PIND != 0xff) {
     58e:	89 b1       	in	r24, 0x09	; 9
     590:	8f 3f       	cpi	r24, 0xFF	; 255
     592:	09 f4       	brne	.+2      	; 0x596 <GetInput()+0x120>
     594:	66 c0       	rjmp	.+204    	; 0x662 <GetInput()+0x1ec>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:490
    switch (PIND)   {
     596:	89 b1       	in	r24, 0x09	; 9
     598:	8f 3e       	cpi	r24, 0xEF	; 239
     59a:	09 f4       	brne	.+2      	; 0x59e <GetInput()+0x128>
     59c:	77 c0       	rjmp	.+238    	; 0x68c <GetInput()+0x216>
     59e:	88 f5       	brcc	.+98     	; 0x602 <GetInput()+0x18c>
     5a0:	8f 3b       	cpi	r24, 0xBF	; 191
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <GetInput()+0x130>
     5a4:	77 c0       	rjmp	.+238    	; 0x694 <GetInput()+0x21e>
     5a6:	8f 3d       	cpi	r24, 0xDF	; 223
     5a8:	09 f4       	brne	.+2      	; 0x5ac <GetInput()+0x136>
     5aa:	72 c0       	rjmp	.+228    	; 0x690 <GetInput()+0x21a>
     5ac:	8f 37       	cpi	r24, 0x7F	; 127
     5ae:	71 f5       	brne	.+92     	; 0x60c <GetInput()+0x196>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:498
      case 251: k = 27; break; //A
      case 247: k = 28; break; //S
      case 239: k = 29; break; //D
      case 223: k = 30; break; //F
      case 191: k = 31; break; //G
      case 127: k =  32; break; //H
     5b0:	80 e2       	ldi	r24, 0x20	; 32
     5b2:	b5 cf       	rjmp	.-150    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:458
  digitalWrite(A3, HIGH);
  digitalWrite(A2,  LOW);
  digitalWrite(A1, HIGH);
  digitalWrite(A0, HIGH);
  if (PIND != 0xff) {
    switch (PIND)   {
     5b4:	8d 3f       	cpi	r24, 0xFD	; 253
     5b6:	09 f1       	breq	.+66     	; 0x5fa <GetInput()+0x184>
     5b8:	8e 3f       	cpi	r24, 0xFE	; 254
     5ba:	c9 f6       	brne	.-78     	; 0x56e <GetInput()+0xf8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:459
      case 254: k = 13; break; //Tab
     5bc:	8d e0       	ldi	r24, 0x0D	; 13
     5be:	af cf       	rjmp	.-162    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:461
      case 253: k = 14; break; //Q
      case 251: k = 15; break; //W
     5c0:	8f e0       	ldi	r24, 0x0F	; 15
     5c2:	ad cf       	rjmp	.-166    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:469
      case 223: k = 18; break; //T
      case 191: k = 19; break; //Y
      case 127: k = 20; break; //U
    }
  }
  else if (PIND != 223) {
     5c4:	89 b1       	in	r24, 0x09	; 9
     5c6:	8f 3d       	cpi	r24, 0xDF	; 223
     5c8:	91 f2       	breq	.-92     	; 0x56e <GetInput()+0xf8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:471

    switch (PINB)   {
     5ca:	83 b1       	in	r24, 0x03	; 3
     5cc:	8b 3d       	cpi	r24, 0xDB	; 219
     5ce:	59 f0       	breq	.+22     	; 0x5e6 <GetInput()+0x170>
     5d0:	20 f4       	brcc	.+8      	; 0x5da <GetInput()+0x164>
     5d2:	87 3d       	cpi	r24, 0xD7	; 215
     5d4:	61 f6       	brne	.-104    	; 0x56e <GetInput()+0xf8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:475
      case 222: k = 21; break; //I
      case 221: k = 22; break; //O
      case 219: k = 23; break; //P
      case 215: k = 24; break; //no key
     5d6:	88 e1       	ldi	r24, 0x18	; 24
     5d8:	a2 cf       	rjmp	.-188    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:471
      case 127: k = 20; break; //U
    }
  }
  else if (PIND != 223) {

    switch (PINB)   {
     5da:	8d 3d       	cpi	r24, 0xDD	; 221
     5dc:	81 f0       	breq	.+32     	; 0x5fe <GetInput()+0x188>
     5de:	8e 3d       	cpi	r24, 0xDE	; 222
     5e0:	31 f6       	brne	.-116    	; 0x56e <GetInput()+0xf8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:472
      case 222: k = 21; break; //I
     5e2:	85 e1       	ldi	r24, 0x15	; 21
     5e4:	9c cf       	rjmp	.-200    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:474
      case 221: k = 22; break; //O
      case 219: k = 23; break; //P
     5e6:	87 e1       	ldi	r24, 0x17	; 23
     5e8:	9a cf       	rjmp	.-204    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:462
  if (PIND != 0xff) {
    switch (PIND)   {
      case 254: k = 13; break; //Tab
      case 253: k = 14; break; //Q
      case 251: k = 15; break; //W
      case 247: k = 16; break; //E
     5ea:	80 e1       	ldi	r24, 0x10	; 16
     5ec:	98 cf       	rjmp	.-208    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:463
      case 239: k = 17; break; //R
     5ee:	81 e1       	ldi	r24, 0x11	; 17
     5f0:	96 cf       	rjmp	.-212    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:464
      case 223: k = 18; break; //T
     5f2:	82 e1       	ldi	r24, 0x12	; 18
     5f4:	94 cf       	rjmp	.-216    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:465
      case 191: k = 19; break; //Y
     5f6:	83 e1       	ldi	r24, 0x13	; 19
     5f8:	92 cf       	rjmp	.-220    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:460
  digitalWrite(A1, HIGH);
  digitalWrite(A0, HIGH);
  if (PIND != 0xff) {
    switch (PIND)   {
      case 254: k = 13; break; //Tab
      case 253: k = 14; break; //Q
     5fa:	8e e0       	ldi	r24, 0x0E	; 14
     5fc:	90 cf       	rjmp	.-224    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:473
  }
  else if (PIND != 223) {

    switch (PINB)   {
      case 222: k = 21; break; //I
      case 221: k = 22; break; //O
     5fe:	86 e1       	ldi	r24, 0x16	; 22
     600:	8e cf       	rjmp	.-228    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:490
  digitalWrite(A3, HIGH);
  digitalWrite(A2, HIGH);
  digitalWrite(A1, LOW);
  digitalWrite(A0, HIGH);
  if (PIND != 0xff) {
    switch (PIND)   {
     602:	8b 3f       	cpi	r24, 0xFB	; 251
     604:	61 f1       	breq	.+88     	; 0x65e <GetInput()+0x1e8>
     606:	28 f5       	brcc	.+74     	; 0x652 <GetInput()+0x1dc>
     608:	87 3f       	cpi	r24, 0xF7	; 247
     60a:	f1 f1       	breq	.+124    	; 0x688 <GetInput()+0x212>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:516
    hadPressed = 1;
    return k;
  }


  digitalWrite(A3, HIGH);
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	81 e1       	ldi	r24, 0x11	; 17
     610:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:517
  digitalWrite(A2, HIGH);
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	80 e1       	ldi	r24, 0x10	; 16
     618:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:518
  digitalWrite(A1, HIGH);
     61c:	61 e0       	ldi	r22, 0x01	; 1
     61e:	8f e0       	ldi	r24, 0x0F	; 15
     620:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:519
  digitalWrite(A0, LOW);
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	8e e0       	ldi	r24, 0x0E	; 14
     628:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:522


  if (PIND != 0xff) {
     62c:	89 b1       	in	r24, 0x09	; 9
     62e:	8f 3f       	cpi	r24, 0xFF	; 255
     630:	09 f4       	brne	.+2      	; 0x634 <GetInput()+0x1be>
     632:	47 c0       	rjmp	.+142    	; 0x6c2 <GetInput()+0x24c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:524

    switch (PIND)   {
     634:	89 b1       	in	r24, 0x09	; 9
     636:	8f 3e       	cpi	r24, 0xEF	; 239
     638:	09 f4       	brne	.+2      	; 0x63c <GetInput()+0x1c6>
     63a:	58 c0       	rjmp	.+176    	; 0x6ec <GetInput()+0x276>
     63c:	88 f5       	brcc	.+98     	; 0x6a0 <GetInput()+0x22a>
     63e:	8f 3b       	cpi	r24, 0xBF	; 191
     640:	09 f4       	brne	.+2      	; 0x644 <GetInput()+0x1ce>
     642:	58 c0       	rjmp	.+176    	; 0x6f4 <GetInput()+0x27e>
     644:	8f 3d       	cpi	r24, 0xDF	; 223
     646:	09 f4       	brne	.+2      	; 0x64a <GetInput()+0x1d4>
     648:	53 c0       	rjmp	.+166    	; 0x6f0 <GetInput()+0x27a>
     64a:	8f 37       	cpi	r24, 0x7F	; 127
     64c:	71 f5       	brne	.+92     	; 0x6aa <GetInput()+0x234>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:532
      case 251: k = 39; break; //Z
      case 247: k = 40; break; //X
      case 239: k = 41; break; //C
      case 223: k = 42; break; //V
      case 191: k = 43; break; //B
      case 127: k = 44; break; //N
     64e:	8c e2       	ldi	r24, 0x2C	; 44
     650:	66 cf       	rjmp	.-308    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:490
  digitalWrite(A3, HIGH);
  digitalWrite(A2, HIGH);
  digitalWrite(A1, LOW);
  digitalWrite(A0, HIGH);
  if (PIND != 0xff) {
    switch (PIND)   {
     652:	8d 3f       	cpi	r24, 0xFD	; 253
     654:	09 f1       	breq	.+66     	; 0x698 <GetInput()+0x222>
     656:	8e 3f       	cpi	r24, 0xFE	; 254
     658:	c9 f6       	brne	.-78     	; 0x60c <GetInput()+0x196>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:491
      case 254: k = 25; break; //left
     65a:	89 e1       	ldi	r24, 0x19	; 25
     65c:	60 cf       	rjmp	.-320    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:493
      case 253: k = 26; break; //up
      case 251: k = 27; break; //A
     65e:	8b e1       	ldi	r24, 0x1B	; 27
     660:	5e cf       	rjmp	.-324    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:502
      case 191: k = 31; break; //G
      case 127: k =  32; break; //H
    }
  }

  else if (PIND != 223) {
     662:	89 b1       	in	r24, 0x09	; 9
     664:	8f 3d       	cpi	r24, 0xDF	; 223
     666:	91 f2       	breq	.-92     	; 0x60c <GetInput()+0x196>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:503
    switch (PINB)   {
     668:	83 b1       	in	r24, 0x03	; 3
     66a:	8b 3d       	cpi	r24, 0xDB	; 219
     66c:	59 f0       	breq	.+22     	; 0x684 <GetInput()+0x20e>
     66e:	20 f4       	brcc	.+8      	; 0x678 <GetInput()+0x202>
     670:	87 3d       	cpi	r24, 0xD7	; 215
     672:	61 f6       	brne	.-104    	; 0x60c <GetInput()+0x196>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:507
      case 222: k = 33; break; //J
      case 221: k = 34; break; //K
      case 219: k = 35; break; //L
      case 215: k = 36; break; //Enter
     674:	84 e2       	ldi	r24, 0x24	; 36
     676:	53 cf       	rjmp	.-346    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:503
      case 127: k =  32; break; //H
    }
  }

  else if (PIND != 223) {
    switch (PINB)   {
     678:	8d 3d       	cpi	r24, 0xDD	; 221
     67a:	81 f0       	breq	.+32     	; 0x69c <GetInput()+0x226>
     67c:	8e 3d       	cpi	r24, 0xDE	; 222
     67e:	31 f6       	brne	.-116    	; 0x60c <GetInput()+0x196>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:504
      case 222: k = 33; break; //J
     680:	81 e2       	ldi	r24, 0x21	; 33
     682:	4d cf       	rjmp	.-358    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:506
      case 221: k = 34; break; //K
      case 219: k = 35; break; //L
     684:	83 e2       	ldi	r24, 0x23	; 35
     686:	4b cf       	rjmp	.-362    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:494
  if (PIND != 0xff) {
    switch (PIND)   {
      case 254: k = 25; break; //left
      case 253: k = 26; break; //up
      case 251: k = 27; break; //A
      case 247: k = 28; break; //S
     688:	8c e1       	ldi	r24, 0x1C	; 28
     68a:	49 cf       	rjmp	.-366    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:495
      case 239: k = 29; break; //D
     68c:	8d e1       	ldi	r24, 0x1D	; 29
     68e:	47 cf       	rjmp	.-370    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:496
      case 223: k = 30; break; //F
     690:	8e e1       	ldi	r24, 0x1E	; 30
     692:	45 cf       	rjmp	.-374    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:497
      case 191: k = 31; break; //G
     694:	8f e1       	ldi	r24, 0x1F	; 31
     696:	43 cf       	rjmp	.-378    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:492
  digitalWrite(A1, LOW);
  digitalWrite(A0, HIGH);
  if (PIND != 0xff) {
    switch (PIND)   {
      case 254: k = 25; break; //left
      case 253: k = 26; break; //up
     698:	8a e1       	ldi	r24, 0x1A	; 26
     69a:	41 cf       	rjmp	.-382    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:505
  }

  else if (PIND != 223) {
    switch (PINB)   {
      case 222: k = 33; break; //J
      case 221: k = 34; break; //K
     69c:	82 e2       	ldi	r24, 0x22	; 34
     69e:	3f cf       	rjmp	.-386    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:524
  digitalWrite(A0, LOW);


  if (PIND != 0xff) {

    switch (PIND)   {
     6a0:	8b 3f       	cpi	r24, 0xFB	; 251
     6a2:	69 f0       	breq	.+26     	; 0x6be <GetInput()+0x248>
     6a4:	30 f4       	brcc	.+12     	; 0x6b2 <GetInput()+0x23c>
     6a6:	87 3f       	cpi	r24, 0xF7	; 247
     6a8:	f9 f0       	breq	.+62     	; 0x6e8 <GetInput()+0x272>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:555
  if (k) {
    hadPressed = 1;
    return k;
  }

  hadPressed = 0;
     6aa:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <hadPressed>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:556
  return 255;
     6ae:	8f ef       	ldi	r24, 0xFF	; 255
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:558

}
     6b0:	08 95       	ret
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:524
  digitalWrite(A0, LOW);


  if (PIND != 0xff) {

    switch (PIND)   {
     6b2:	8d 3f       	cpi	r24, 0xFD	; 253
     6b4:	09 f1       	breq	.+66     	; 0x6f8 <GetInput()+0x282>
     6b6:	8e 3f       	cpi	r24, 0xFE	; 254
     6b8:	c1 f7       	brne	.-16     	; 0x6aa <GetInput()+0x234>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:525
      case 254: k = 37; break; //down
     6ba:	85 e2       	ldi	r24, 0x25	; 37
     6bc:	30 cf       	rjmp	.-416    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:527
      case 253: k = 38; break; //right
      case 251: k = 39; break; //Z
     6be:	87 e2       	ldi	r24, 0x27	; 39
     6c0:	2e cf       	rjmp	.-420    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:535
      case 223: k = 42; break; //V
      case 191: k = 43; break; //B
      case 127: k = 44; break; //N
    }
  }
  else if (PIND != 223) {
     6c2:	89 b1       	in	r24, 0x09	; 9
     6c4:	8f 3d       	cpi	r24, 0xDF	; 223
     6c6:	89 f3       	breq	.-30     	; 0x6aa <GetInput()+0x234>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:536
    switch (PINB)   {
     6c8:	83 b1       	in	r24, 0x03	; 3
     6ca:	8b 3d       	cpi	r24, 0xDB	; 219
     6cc:	59 f0       	breq	.+22     	; 0x6e4 <GetInput()+0x26e>
     6ce:	20 f4       	brcc	.+8      	; 0x6d8 <GetInput()+0x262>
     6d0:	87 3d       	cpi	r24, 0xD7	; 215
     6d2:	59 f7       	brne	.-42     	; 0x6aa <GetInput()+0x234>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:540
      case 222: k = 45; break; //M
      case 221: k = 46; break; //,
      case 219: k = 47; break; //.
      case 215: k = 48; break; //Space
     6d4:	80 e3       	ldi	r24, 0x30	; 48
     6d6:	23 cf       	rjmp	.-442    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:536
      case 191: k = 43; break; //B
      case 127: k = 44; break; //N
    }
  }
  else if (PIND != 223) {
    switch (PINB)   {
     6d8:	8d 3d       	cpi	r24, 0xDD	; 221
     6da:	81 f0       	breq	.+32     	; 0x6fc <GetInput()+0x286>
     6dc:	8e 3d       	cpi	r24, 0xDE	; 222
     6de:	29 f7       	brne	.-54     	; 0x6aa <GetInput()+0x234>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:537
      case 222: k = 45; break; //M
     6e0:	8d e2       	ldi	r24, 0x2D	; 45
     6e2:	1d cf       	rjmp	.-454    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:539
      case 221: k = 46; break; //,
      case 219: k = 47; break; //.
     6e4:	8f e2       	ldi	r24, 0x2F	; 47
     6e6:	1b cf       	rjmp	.-458    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:528

    switch (PIND)   {
      case 254: k = 37; break; //down
      case 253: k = 38; break; //right
      case 251: k = 39; break; //Z
      case 247: k = 40; break; //X
     6e8:	88 e2       	ldi	r24, 0x28	; 40
     6ea:	19 cf       	rjmp	.-462    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:529
      case 239: k = 41; break; //C
     6ec:	89 e2       	ldi	r24, 0x29	; 41
     6ee:	17 cf       	rjmp	.-466    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:530
      case 223: k = 42; break; //V
     6f0:	8a e2       	ldi	r24, 0x2A	; 42
     6f2:	15 cf       	rjmp	.-470    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:531
      case 191: k = 43; break; //B
     6f4:	8b e2       	ldi	r24, 0x2B	; 43
     6f6:	13 cf       	rjmp	.-474    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:526

  if (PIND != 0xff) {

    switch (PIND)   {
      case 254: k = 37; break; //down
      case 253: k = 38; break; //right
     6f8:	86 e2       	ldi	r24, 0x26	; 38
     6fa:	11 cf       	rjmp	.-478    	; 0x51e <GetInput()+0xa8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:538
    }
  }
  else if (PIND != 223) {
    switch (PINB)   {
      case 222: k = 45; break; //M
      case 221: k = 46; break; //,
     6fc:	8e e2       	ldi	r24, 0x2E	; 46
     6fe:	0f cf       	rjmp	.-482    	; 0x51e <GetInput()+0xa8>

00000700 <loop>:
loop():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:561
  return 255;

}


void loop() {
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	1f 92       	push	r1
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:564
  unsigned char cmd;  // Vom Host gesendete Daten
  bool fl = false;
  if (keyboard.available() || startup == 0) {
     710:	88 ed       	ldi	r24, 0xD8	; 216
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	0e 94 02 0a 	call	0x1404	; 0x1404 <PS2dev::available()>
     718:	89 2b       	or	r24, r25
     71a:	31 f4       	brne	.+12     	; 0x728 <loop+0x28>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:564 (discriminator 2)
     71c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <startup>
     720:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <startup+0x1>
     724:	89 2b       	or	r24, r25
     726:	31 f5       	brne	.+76     	; 0x774 <loop+0x74>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:565
    while (keyboard.read(&cmd)) ;
     728:	be 01       	movw	r22, r28
     72a:	6f 5f       	subi	r22, 0xFF	; 255
     72c:	7f 4f       	sbci	r23, 0xFF	; 255
     72e:	88 ed       	ldi	r24, 0xD8	; 216
     730:	93 e0       	ldi	r25, 0x03	; 3
     732:	0e 94 17 0a 	call	0x142e	; 0x142e <PS2dev::read(unsigned char*)>
     736:	89 2b       	or	r24, r25
     738:	b9 f7       	brne	.-18     	; 0x728 <loop+0x28>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:566
    startup = keyboardcommand(cmd);//a=keyboard.keyboard_reply(cmd,0);
     73a:	89 81       	ldd	r24, Y+1	; 0x01
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 5f 01 	call	0x2be	; 0x2be <keyboardcommand(int)>
     742:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <startup+0x1>
     746:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <startup>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:567
    if (startup) {
     74a:	89 2b       	or	r24, r25
     74c:	99 f0       	breq	.+38     	; 0x774 <loop+0x74>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:568
      pixels.setPixelColor(0, pixels.Color(30, 0, 30));  //zeigt Initialisierung mit lila LED an
     74e:	2e e1       	ldi	r18, 0x1E	; 30
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	a9 01       	movw	r20, r18
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	8c ed       	ldi	r24, 0xDC	; 220
     75a:	93 e0       	ldi	r25, 0x03	; 3
     75c:	0e 94 c6 08 	call	0x118c	; 0x118c <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:569
      pixels.show();
     760:	8c ed       	ldi	r24, 0xDC	; 220
     762:	93 e0       	ldi	r25, 0x03	; 3
     764:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Adafruit_NeoPixel::show()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:570
      delay(500);
     768:	64 ef       	ldi	r22, 0xF4	; 244
     76a:	71 e0       	ldi	r23, 0x01	; 1
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:574
    }
  }

  if (shiftPressed)   {
     774:	1c 99       	sbic	0x03, 4	; 3
     776:	36 c0       	rjmp	.+108    	; 0x7e4 <loop+0xe4>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:576

    _sym = 0; _fn = 0; idle = 0;
     778:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <_sym+0x1>
     77c:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <_sym>
     780:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <_fn+0x1>
     784:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <_fn>
     788:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <idle+0x1>
     78c:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <idle>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:577 (discriminator 2)
    while (shiftPressed)delay(1);
     790:	1c 99       	sbic	0x03, 4	; 3
     792:	07 c0       	rjmp	.+14     	; 0x7a2 <loop+0xa2>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:577 (discriminator 1)
     794:	61 e0       	ldi	r22, 0x01	; 1
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
     7a0:	f7 cf       	rjmp	.-18     	; 0x790 <loop+0x90>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:578
    if (_shift == 0)     {
     7a2:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_shift>
     7a6:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <_shift+0x1>
     7aa:	89 2b       	or	r24, r25
     7ac:	a9 f5       	brne	.+106    	; 0x818 <loop+0x118>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:579
      delay(300);
     7ae:	6c e2       	ldi	r22, 0x2C	; 44
     7b0:	71 e0       	ldi	r23, 0x01	; 1
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:580
      if (shiftPressed)       {
     7ba:	1c 99       	sbic	0x03, 4	; 3
     7bc:	2a c0       	rjmp	.+84     	; 0x812 <loop+0x112>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:581 (discriminator 2)
        while (shiftPressed)delay(1);
     7be:	1c 99       	sbic	0x03, 4	; 3
     7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <loop+0xd0>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:581 (discriminator 1)
     7c2:	61 e0       	ldi	r22, 0x01	; 1
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
     7ce:	f7 cf       	rjmp	.-18     	; 0x7be <loop+0xbe>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:582
        _shift = 2;
     7d0:	82 e0       	ldi	r24, 0x02	; 2
     7d2:	90 e0       	ldi	r25, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:585
        Mode = 2;
      } else  {
        _shift = 1;
     7d4:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <_shift+0x1>
     7d8:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <_shift>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:586
        Mode = 1;
     7dc:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <Mode+0x1>
     7e0:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <Mode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:606
        _shift = 0;
      }
    }
  }

  if (symPressed)   {
     7e4:	1f 99       	sbic	0x03, 7	; 3
     7e6:	66 c0       	rjmp	.+204    	; 0x8b4 <loop+0x1b4>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:607
    _shift = 0; _fn = 0; idle = 0;
     7e8:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <_shift+0x1>
     7ec:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <_shift>
     7f0:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <_fn+0x1>
     7f4:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <_fn>
     7f8:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <idle+0x1>
     7fc:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <idle>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:608 (discriminator 2)
    while (symPressed)delay(1);
     800:	1f 99       	sbic	0x03, 7	; 3
     802:	35 c0       	rjmp	.+106    	; 0x86e <loop+0x16e>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:608 (discriminator 1)
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
     810:	f7 cf       	rjmp	.-18     	; 0x800 <loop+0x100>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:585
      if (shiftPressed)       {
        while (shiftPressed)delay(1);
        _shift = 2;
        Mode = 2;
      } else  {
        _shift = 1;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	de cf       	rjmp	.-68     	; 0x7d4 <loop+0xd4>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:589
        Mode = 1;
      }
    } else {
      delay(300);
     818:	6c e2       	ldi	r22, 0x2C	; 44
     81a:	71 e0       	ldi	r23, 0x01	; 1
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:590
      if (shiftPressed)       {
     824:	1c 99       	sbic	0x03, 4	; 3
     826:	0f c0       	rjmp	.+30     	; 0x846 <loop+0x146>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:591 (discriminator 2)
        while (shiftPressed)delay(1);
     828:	1c 99       	sbic	0x03, 4	; 3
     82a:	07 c0       	rjmp	.+14     	; 0x83a <loop+0x13a>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:591 (discriminator 1)
     82c:	61 e0       	ldi	r22, 0x01	; 1
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
     838:	f7 cf       	rjmp	.-18     	; 0x828 <loop+0x128>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:592
        if (_shift == 2)         {
     83a:	80 91 d0 03 	lds	r24, 0x03D0	; 0x8003d0 <_shift>
     83e:	90 91 d1 03 	lds	r25, 0x03D1	; 0x8003d1 <_shift+0x1>
     842:	02 97       	sbiw	r24, 0x02	; 2
     844:	49 f4       	brne	.+18     	; 0x858 <loop+0x158>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:593
          Mode = 0;
     846:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <Mode+0x1>
     84a:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <Mode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:594
          _shift = 0;
     84e:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <_shift+0x1>
     852:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <_shift>
     856:	c6 cf       	rjmp	.-116    	; 0x7e4 <loop+0xe4>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:596
        } else  {
          Mode = 2;
     858:	82 e0       	ldi	r24, 0x02	; 2
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <Mode+0x1>
     860:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <Mode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:597
          _shift = 2;
     864:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <_shift+0x1>
     868:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <_shift>
     86c:	bb cf       	rjmp	.-138    	; 0x7e4 <loop+0xe4>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:609
  }

  if (symPressed)   {
    _shift = 0; _fn = 0; idle = 0;
    while (symPressed)delay(1);
    if (_sym == 0)     {
     86e:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_sym>
     872:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_sym+0x1>
     876:	89 2b       	or	r24, r25
     878:	e9 f5       	brne	.+122    	; 0x8f4 <loop+0x1f4>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:610
      delay(300);
     87a:	6c e2       	ldi	r22, 0x2C	; 44
     87c:	71 e0       	ldi	r23, 0x01	; 1
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:611
      if (symPressed)       {
     886:	1f 99       	sbic	0x03, 7	; 3
     888:	2c c0       	rjmp	.+88     	; 0x8e2 <loop+0x1e2>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:612 (discriminator 2)
        while (symPressed)delay(1);
     88a:	1f 99       	sbic	0x03, 7	; 3
     88c:	07 c0       	rjmp	.+14     	; 0x89c <loop+0x19c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:612 (discriminator 1)
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
     89a:	f7 cf       	rjmp	.-18     	; 0x88a <loop+0x18a>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:613
        _sym = 2;
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <_sym+0x1>
     8a4:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <_sym>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:614
        Mode = 4;
     8a8:	84 e0       	ldi	r24, 0x04	; 4
     8aa:	90 e0       	ldi	r25, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:617
      } else  {
        _sym = 1;
        Mode = 3;
     8ac:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <Mode+0x1>
     8b0:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <Mode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:637
        _sym = 0;
      }
    }
  }

  if (fnPressed) {
     8b4:	1e 99       	sbic	0x03, 6	; 3
     8b6:	75 c0       	rjmp	.+234    	; 0x9a2 <__stack+0xa3>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:638
    _sym = 0; _shift = 0; idle = 0;
     8b8:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <_sym+0x1>
     8bc:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <_sym>
     8c0:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <_shift+0x1>
     8c4:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <_shift>
     8c8:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <idle+0x1>
     8cc:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <idle>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:639 (discriminator 2)
    while (fnPressed)delay(1);
     8d0:	1e 99       	sbic	0x03, 6	; 3
     8d2:	3d c0       	rjmp	.+122    	; 0x94e <__stack+0x4f>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:639 (discriminator 1)
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
     8e0:	f7 cf       	rjmp	.-18     	; 0x8d0 <loop+0x1d0>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:616
      if (symPressed)       {
        while (symPressed)delay(1);
        _sym = 2;
        Mode = 4;
      } else  {
        _sym = 1;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <_sym+0x1>
     8ea:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <_sym>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:617
        Mode = 3;
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	dc cf       	rjmp	.-72     	; 0x8ac <loop+0x1ac>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:620
      }
    } else {
      delay(300);
     8f4:	6c e2       	ldi	r22, 0x2C	; 44
     8f6:	71 e0       	ldi	r23, 0x01	; 1
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:621
      if (symPressed)  {
     900:	1f 99       	sbic	0x03, 7	; 3
     902:	0f c0       	rjmp	.+30     	; 0x922 <__stack+0x23>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:622 (discriminator 2)
        while (symPressed)delay(1);
     904:	1f 99       	sbic	0x03, 7	; 3
     906:	07 c0       	rjmp	.+14     	; 0x916 <__stack+0x17>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:622 (discriminator 1)
     908:	61 e0       	ldi	r22, 0x01	; 1
     90a:	70 e0       	ldi	r23, 0x00	; 0
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
     914:	f7 cf       	rjmp	.-18     	; 0x904 <__stack+0x5>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:623
        if (_sym == 2)  {
     916:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_sym>
     91a:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_sym+0x1>
     91e:	02 97       	sbiw	r24, 0x02	; 2
     920:	49 f4       	brne	.+18     	; 0x934 <__stack+0x35>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:624
          Mode = 0;
     922:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <Mode+0x1>
     926:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <Mode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:625
          _sym = 0;
     92a:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <_sym+0x1>
     92e:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <_sym>
     932:	c0 cf       	rjmp	.-128    	; 0x8b4 <loop+0x1b4>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:627
        } else  {
          Mode = 4;
     934:	84 e0       	ldi	r24, 0x04	; 4
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <Mode+0x1>
     93c:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <Mode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:628
          _sym = 2;
     940:	82 e0       	ldi	r24, 0x02	; 2
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <_sym+0x1>
     948:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <_sym>
     94c:	b3 cf       	rjmp	.-154    	; 0x8b4 <loop+0x1b4>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:640
  }

  if (fnPressed) {
    _sym = 0; _shift = 0; idle = 0;
    while (fnPressed)delay(1);
    if (_fn == 0) {
     94e:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_fn>
     952:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <_fn+0x1>
     956:	89 2b       	or	r24, r25
     958:	09 f0       	breq	.+2      	; 0x95c <__stack+0x5d>
     95a:	3d c0       	rjmp	.+122    	; 0x9d6 <__stack+0xd7>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:641
      ctrl = 1;                             //Ctrl-Funktion
     95c:	01 e0       	ldi	r16, 0x01	; 1
     95e:	10 e0       	ldi	r17, 0x00	; 0
     960:	10 93 cb 03 	sts	0x03CB, r17	; 0x8003cb <ctrl+0x1>
     964:	00 93 ca 03 	sts	0x03CA, r16	; 0x8003ca <ctrl>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:642
      delay(300);
     968:	6c e2       	ldi	r22, 0x2C	; 44
     96a:	71 e0       	ldi	r23, 0x01	; 1
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:643
      if (fnPressed) {
     974:	1e 99       	sbic	0x03, 6	; 3
     976:	28 c0       	rjmp	.+80     	; 0x9c8 <__stack+0xc9>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:644 (discriminator 2)
        while (fnPressed)delay(1);
     978:	1e 99       	sbic	0x03, 6	; 3
     97a:	07 c0       	rjmp	.+14     	; 0x98a <__stack+0x8b>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:644 (discriminator 1)
     97c:	61 e0       	ldi	r22, 0x01	; 1
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
     988:	f7 cf       	rjmp	.-18     	; 0x978 <__stack+0x79>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:645
        _fn = 2;
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <_fn+0x1>
     992:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <_fn>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:646
        Mode = 6;
     996:	86 e0       	ldi	r24, 0x06	; 6
     998:	90 e0       	ldi	r25, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:649
      } else  {
        _fn = 1;
        Mode = 5;
     99a:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <Mode+0x1>
     99e:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <Mode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:672
        ctrl = 0;
      }
    }
  }

  switch (Mode)  {
     9a2:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <Mode>
     9a6:	f0 91 c4 03 	lds	r31, 0x03C4	; 0x8003c4 <Mode+0x1>
     9aa:	e7 30       	cpi	r30, 0x07	; 7
     9ac:	f1 05       	cpc	r31, r1
     9ae:	08 f0       	brcs	.+2      	; 0x9b2 <__stack+0xb3>
     9b0:	5c c0       	rjmp	.+184    	; 0xa6a <__stack+0x16b>
     9b2:	e3 52       	subi	r30, 0x23	; 35
     9b4:	fb 4f       	sbci	r31, 0xFB	; 251
     9b6:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__tablejump2__>
     9ba:	2c 05       	cpc	r18, r12
     9bc:	1c 05       	cpc	r17, r12
     9be:	ec 05       	cpc	r30, r12
     9c0:	f1 05       	cpc	r31, r1
     9c2:	01 06       	cpc	r0, r17
     9c4:	06 06       	cpc	r0, r22
     9c6:	16 06       	cpc	r1, r22
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:648
      if (fnPressed) {
        while (fnPressed)delay(1);
        _fn = 2;
        Mode = 6;
      } else  {
        _fn = 1;
     9c8:	10 93 cf 03 	sts	0x03CF, r17	; 0x8003cf <_fn+0x1>
     9cc:	00 93 ce 03 	sts	0x03CE, r16	; 0x8003ce <_fn>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:649
        Mode = 5;
     9d0:	85 e0       	ldi	r24, 0x05	; 5
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	e2 cf       	rjmp	.-60     	; 0x99a <__stack+0x9b>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:653
      }
    } else
    {
      delay(300);
     9d6:	6c e2       	ldi	r22, 0x2C	; 44
     9d8:	71 e0       	ldi	r23, 0x01	; 1
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:654
      if (fnPressed) {
     9e2:	1e 99       	sbic	0x03, 6	; 3
     9e4:	0f c0       	rjmp	.+30     	; 0xa04 <__stack+0x105>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:655 (discriminator 2)
        while (fnPressed)delay(1);
     9e6:	1e 99       	sbic	0x03, 6	; 3
     9e8:	07 c0       	rjmp	.+14     	; 0x9f8 <__stack+0xf9>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:655 (discriminator 1)
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
     9f6:	f7 cf       	rjmp	.-18     	; 0x9e6 <__stack+0xe7>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:656
        if (_fn == 2) {
     9f8:	80 91 ce 03 	lds	r24, 0x03CE	; 0x8003ce <_fn>
     9fc:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <_fn+0x1>
     a00:	02 97       	sbiw	r24, 0x02	; 2
     a02:	69 f4       	brne	.+26     	; 0xa1e <__stack+0x11f>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:657
          Mode = 0;
     a04:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <Mode+0x1>
     a08:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <Mode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:658
          _fn = 0;
     a0c:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <_fn+0x1>
     a10:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <_fn>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:659
          ctrl = 0;
     a14:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <ctrl+0x1>
     a18:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <ctrl>
     a1c:	c2 cf       	rjmp	.-124    	; 0x9a2 <__stack+0xa3>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:661
        } else {
          Mode = 6;
     a1e:	86 e0       	ldi	r24, 0x06	; 6
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <Mode+0x1>
     a26:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <Mode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:662
          _fn = 2;
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	90 93 cf 03 	sts	0x03CF, r25	; 0x8003cf <_fn+0x1>
     a32:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <_fn>
     a36:	b5 cf       	rjmp	.-150    	; 0x9a2 <__stack+0xa3>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:676

  switch (Mode)  {
    case 0://normal
      pixels.setPixelColor(0, pixels.Color(0, 0, 0)); break;
    case 1://shift
      if ((idle / 6) % 2 == 1)
     a38:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <idle>
     a3c:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <idle+0x1>
     a40:	66 e0       	ldi	r22, 0x06	; 6
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divmodhi4>
     a48:	cb 01       	movw	r24, r22
     a4a:	62 e0       	ldi	r22, 0x02	; 2
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divmodhi4>
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	09 f0       	breq	.+2      	; 0xa58 <__stack+0x159>
     a56:	c0 c0       	rjmp	.+384    	; 0xbd8 <__stack+0x2d9>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:677
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	a9 01       	movw	r20, r18
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:695
      if ((idle / 6) % 2 == 1)
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
    case 6://long_fn
      pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	8c ed       	ldi	r24, 0xDC	; 220
     a64:	93 e0       	ldi	r25, 0x03	; 3
     a66:	0e 94 c6 08 	call	0x118c	; 0x118c <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:698
  }

  pixels.show(); // This sends the updated pixel color to the hardware.
     a6a:	8c ed       	ldi	r24, 0xDC	; 220
     a6c:	93 e0       	ldi	r25, 0x03	; 3
     a6e:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Adafruit_NeoPixel::show()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:700

  if (hadPressed == 0)   {
     a72:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <hadPressed>
     a76:	81 11       	cpse	r24, r1
     a78:	04 c0       	rjmp	.+8      	; 0xa82 <__stack+0x183>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:701
    KEY = GetInput();
     a7a:	0e 94 3b 02 	call	0x476	; 0x476 <GetInput()>
     a7e:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <KEY>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:705
  }

  // PS/2 Scancode senden
  if (hadPressed == 1) {
     a82:	f0 90 c6 03 	lds	r15, 0x03C6	; 0x8003c6 <hadPressed>
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	f8 12       	cpse	r15, r24
     a8a:	56 c0       	rjmp	.+172    	; 0xb38 <__stack+0x239>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:706
    uint8_t c = KeyMap[KEY - 1][Mode];
     a8c:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <KEY>
     a90:	81 50       	subi	r24, 0x01	; 1
     a92:	99 0b       	sbc	r25, r25
     a94:	27 e0       	ldi	r18, 0x07	; 7
     a96:	28 9f       	mul	r18, r24
     a98:	f0 01       	movw	r30, r0
     a9a:	29 9f       	mul	r18, r25
     a9c:	f0 0d       	add	r31, r0
     a9e:	11 24       	eor	r1, r1
     aa0:	ef 58       	subi	r30, 0x8F	; 143
     aa2:	fd 4f       	sbci	r31, 0xFD	; 253
     aa4:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <Mode>
     aa8:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <Mode+0x1>
     aac:	e8 0f       	add	r30, r24
     aae:	f9 1f       	adc	r31, r25
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:707
    int16_t no = findScanMap(c);
     ab0:	80 81       	ld	r24, Z
     ab2:	0e 94 47 01 	call	0x28e	; 0x28e <findScanMap(unsigned char)>
     ab6:	8c 01       	movw	r16, r24
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:708
    if (no >= 0) {
     ab8:	97 fd       	sbrc	r25, 7
     aba:	1f c0       	rjmp	.+62     	; 0xafa <__stack+0x1fb>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:709
      flashOn();
     abc:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <flashOn()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:710
      if (old_no != no) {
     ac0:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <old_no>
     ac4:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <old_no+0x1>
     ac8:	80 17       	cp	r24, r16
     aca:	91 07       	cpc	r25, r17
     acc:	09 f4       	brne	.+2      	; 0xad0 <__stack+0x1d1>
     ace:	b3 c0       	rjmp	.+358    	; 0xc36 <__stack+0x337>
_Z12sendScanCodeii():
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	c8 01       	movw	r24, r16
     ad6:	0e 94 92 00 	call	0x124	; 0x124 <sendScanCode(int, int) [clone .part.1]>
loop():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:712
        sendScanCode(no, 0);  //erstes mal Taste - 200ms Verzögerung
        first_no = no;
     ada:	10 93 d5 03 	sts	0x03D5, r17	; 0x8003d5 <first_no+0x1>
     ade:	00 93 d4 03 	sts	0x03D4, r16	; 0x8003d4 <first_no>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:713
        repeatkey = 0;
     ae2:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <repeatkey>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:714
        delay(230);
     ae6:	66 ee       	ldi	r22, 0xE6	; 230
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:719
      }
      else {
        sendScanCode(no, 1);  //zweites bis n.tes mal Tastenrepeat 33ms
        repeatkey = 1;
        delay(70);
     aee:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:721
      }
      old_no = no;
     af2:	10 93 d7 03 	sts	0x03D7, r17	; 0x8003d7 <old_no+0x1>
     af6:	00 93 d6 03 	sts	0x03D6, r16	; 0x8003d6 <old_no>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:724
    }

    flashOff();
     afa:	0e 94 01 02 	call	0x402	; 0x402 <flashOff()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:725
    if ((Mode == 1) || (Mode == 3) || (Mode == 5)) {
     afe:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <Mode>
     b02:	90 91 c4 03 	lds	r25, 0x03C4	; 0x8003c4 <Mode+0x1>
     b06:	9c 01       	movw	r18, r24
     b08:	2d 7f       	andi	r18, 0xFD	; 253
     b0a:	21 30       	cpi	r18, 0x01	; 1
     b0c:	31 05       	cpc	r19, r1
     b0e:	11 f0       	breq	.+4      	; 0xb14 <__stack+0x215>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:725 (discriminator 2)
     b10:	05 97       	sbiw	r24, 0x05	; 5
     b12:	81 f4       	brne	.+32     	; 0xb34 <__stack+0x235>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:726
      Mode = 0;
     b14:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <Mode+0x1>
     b18:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <Mode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:727
      _shift = 0;
     b1c:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <_shift+0x1>
     b20:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <_shift>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:728
      _sym = 0;
     b24:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <_sym+0x1>
     b28:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <_sym>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:729
      _fn = 0;
     b2c:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <_fn+0x1>
     b30:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <_fn>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:731
    }
    hadPressed = 0;
     b34:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <hadPressed>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:735
  }


  if (hadPressed == 0) idle++;
     b38:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <hadPressed>
     b3c:	81 11       	cpse	r24, r1
     b3e:	09 c0       	rjmp	.+18     	; 0xb52 <__stack+0x253>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:735 (discriminator 1)
     b40:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <idle>
     b44:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <idle+0x1>
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <idle+0x1>
     b4e:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <idle>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:736
  if (idle > 30) {                             //verhindert, das wenn man die gleiche Taste nach etwa 300ms nochmal drückt der Repeatmodus eingeschaltet ist, das verhindert doppelte Zeichen
     b52:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <idle>
     b56:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <idle+0x1>
     b5a:	4f 97       	sbiw	r24, 0x1f	; 31
     b5c:	84 f1       	brlt	.+96     	; 0xbbe <__stack+0x2bf>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:737
    if (old_no == first_no && repeatkey == 1 ) sendScanCode(first_no, 2);
     b5e:	80 91 d6 03 	lds	r24, 0x03D6	; 0x8003d6 <old_no>
     b62:	90 91 d7 03 	lds	r25, 0x03D7	; 0x8003d7 <old_no+0x1>
     b66:	20 91 d4 03 	lds	r18, 0x03D4	; 0x8003d4 <first_no>
     b6a:	30 91 d5 03 	lds	r19, 0x03D5	; 0x8003d5 <first_no+0x1>
     b6e:	82 17       	cp	r24, r18
     b70:	93 07       	cpc	r25, r19
     b72:	41 f4       	brne	.+16     	; 0xb84 <__stack+0x285>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:737 (discriminator 1)
     b74:	20 91 c5 03 	lds	r18, 0x03C5	; 0x8003c5 <repeatkey>
     b78:	21 30       	cpi	r18, 0x01	; 1
     b7a:	21 f4       	brne	.+8      	; 0xb84 <__stack+0x285>
_Z12sendScanCodeii():
     b7c:	62 e0       	ldi	r22, 0x02	; 2
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	0e 94 92 00 	call	0x124	; 0x124 <sendScanCode(int, int) [clone .part.1]>
loop():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:738
    old_no = -1;
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	9f ef       	ldi	r25, 0xFF	; 255
     b88:	90 93 d7 03 	sts	0x03D7, r25	; 0x8003d7 <old_no+0x1>
     b8c:	80 93 d6 03 	sts	0x03D6, r24	; 0x8003d6 <old_no>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:739
    first_no = -1;
     b90:	90 93 d5 03 	sts	0x03D5, r25	; 0x8003d5 <first_no+0x1>
     b94:	80 93 d4 03 	sts	0x03D4, r24	; 0x8003d4 <first_no>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:740
    repeatkey = 0;
     b98:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <repeatkey>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:744


    fl = !fl;
    if (fl) pixels.setPixelColor(0, pixels.Color(5, 0, 5));  //Lebenspuls - zeigt an, das die Tastatur funktionsfähig ist
     b9c:	25 e0       	ldi	r18, 0x05	; 5
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	a9 01       	movw	r20, r18
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	8c ed       	ldi	r24, 0xDC	; 220
     ba8:	93 e0       	ldi	r25, 0x03	; 3
     baa:	0e 94 c6 08 	call	0x118c	; 0x118c <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:745
    pixels.show();
     bae:	8c ed       	ldi	r24, 0xDC	; 220
     bb0:	93 e0       	ldi	r25, 0x03	; 3
     bb2:	0e 94 ce 06 	call	0xd9c	; 0xd9c <Adafruit_NeoPixel::show()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:746
    idle = 0;
     bb6:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <idle+0x1>
     bba:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <idle>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:749
  }

  delay(8);
     bbe:	68 e0       	ldi	r22, 0x08	; 8
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 76 0b 	call	0x16ec	; 0x16ec <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:751

}
     bca:	0f 90       	pop	r0
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	1f 91       	pop	r17
     bd2:	0f 91       	pop	r16
     bd4:	ff 90       	pop	r15
     bd6:	08 95       	ret
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:681
      if ((idle / 6) % 2 == 1)
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(5, 0, 0)); break;
    case 2://long_shift
      pixels.setPixelColor(0, pixels.Color(5, 0, 0)); break;
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	45 e0       	ldi	r20, 0x05	; 5
     bde:	50 e0       	ldi	r21, 0x00	; 0
     be0:	3e cf       	rjmp	.-388    	; 0xa5e <__stack+0x15f>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:683
    case 3://sym
      if ((idle / 6) % 2 == 1)
     be2:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <idle>
     be6:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <idle+0x1>
     bea:	66 e0       	ldi	r22, 0x06	; 6
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divmodhi4>
     bf2:	cb 01       	movw	r24, r22
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divmodhi4>
     bfc:	01 97       	sbiw	r24, 0x01	; 1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <__stack+0x303>
     c00:	2b cf       	rjmp	.-426    	; 0xa58 <__stack+0x159>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:688
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(0, 5, 0)); break;
    case 4://long_sym
      pixels.setPixelColor(0, pixels.Color(0, 5, 0)); break;
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	35 e0       	ldi	r19, 0x05	; 5
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	29 cf       	rjmp	.-430    	; 0xa5e <__stack+0x15f>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:690
    case 5://fn
      if ((idle / 6) % 2 == 1)
     c0c:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <idle>
     c10:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <idle+0x1>
     c14:	66 e0       	ldi	r22, 0x06	; 6
     c16:	70 e0       	ldi	r23, 0x00	; 0
     c18:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divmodhi4>
     c1c:	cb 01       	movw	r24, r22
     c1e:	62 e0       	ldi	r22, 0x02	; 2
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	0e 94 c3 0c 	call	0x1986	; 0x1986 <__divmodhi4>
     c26:	01 97       	sbiw	r24, 0x01	; 1
     c28:	09 f4       	brne	.+2      	; 0xc2c <__stack+0x32d>
     c2a:	16 cf       	rjmp	.-468    	; 0xa58 <__stack+0x159>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:695
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
    case 6://long_fn
      pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
     c2c:	25 e0       	ldi	r18, 0x05	; 5
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	50 e0       	ldi	r21, 0x00	; 0
     c34:	14 cf       	rjmp	.-472    	; 0xa5e <__stack+0x15f>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:717
        first_no = no;
        repeatkey = 0;
        delay(230);
      }
      else {
        sendScanCode(no, 1);  //zweites bis n.tes mal Tastenrepeat 33ms
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	c8 01       	movw	r24, r16
     c3c:	0e 94 c2 01 	call	0x384	; 0x384 <sendScanCode(int, int)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:718
        repeatkey = 1;
     c40:	f0 92 c5 03 	sts	0x03C5, r15	; 0x8003c5 <repeatkey>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:719
        delay(70);
     c44:	66 e4       	ldi	r22, 0x46	; 70
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	50 cf       	rjmp	.-352    	; 0xaee <__stack+0x1ef>

00000c4e <_GLOBAL__sub_I_pixels>:
_GLOBAL__sub_I_pixels():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:33
#define KB_DATA     A5  // PS/2 DATA 

#define PIN           13
#define NUMPIXELS      1

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
     c4e:	22 e5       	ldi	r18, 0x52	; 82
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	4d e0       	ldi	r20, 0x0D	; 13
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	8c ed       	ldi	r24, 0xDC	; 220
     c5a:	93 e0       	ldi	r25, 0x03	; 3
     c5c:	0e 94 a6 08 	call	0x114c	; 0x114c <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned int, unsigned char, unsigned int)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:34
PS2dev keyboard(KB_CLK, KB_DATA); // PS/2
     c60:	43 e1       	ldi	r20, 0x13	; 19
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	62 e1       	ldi	r22, 0x12	; 18
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	88 ed       	ldi	r24, 0xD8	; 216
     c6a:	93 e0       	ldi	r25, 0x03	; 3
     c6c:	0c 94 46 09 	jmp	0x128c	; 0x128c <PS2dev::PS2dev(int, int)>

00000c70 <_GLOBAL__sub_D_pixels>:
_GLOBAL__sub_D_pixels():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:33
#define KB_DATA     A5  // PS/2 DATA 

#define PIN           13
#define NUMPIXELS      1

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
     c70:	8c ed       	ldi	r24, 0xDC	; 220
     c72:	93 e0       	ldi	r25, 0x03	; 3
     c74:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>

00000c78 <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
_ZN17Adafruit_NeoPixelD2Ev():
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2127
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel (ignore W)
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
      p[wOffset] = w;        // Store W
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	ec 01       	movw	r28, r24
     c7e:	88 85       	ldd	r24, Y+8	; 0x08
     c80:	99 85       	ldd	r25, Y+9	; 0x09
     c82:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <free>
     c86:	8e 81       	ldd	r24, Y+6	; 0x06
     c88:	87 fd       	sbrc	r24, 7
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1e>
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <pinMode>
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	08 95       	ret

00000c9c <Adafruit_NeoPixel::begin()>:
_ZN17Adafruit_NeoPixel5beginEv():
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	ec 01       	movw	r28, r24
     ca2:	8e 81       	ldd	r24, Y+6	; 0x06
     ca4:	87 fd       	sbrc	r24, 7
     ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <Adafruit_NeoPixel::begin()+0x1a>
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	0e 94 0b 0c 	call	0x1816	; 0x1816 <pinMode>
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	8e 81       	ldd	r24, Y+6	; 0x06
     cb2:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	08 95       	ret

00000cc0 <Adafruit_NeoPixel::updateLength(unsigned int)>:
_ZN17Adafruit_NeoPixel12updateLengthEj():
     cc0:	ef 92       	push	r14
     cc2:	ff 92       	push	r15
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	ec 01       	movw	r28, r24
     cce:	7b 01       	movw	r14, r22
     cd0:	88 85       	ldd	r24, Y+8	; 0x08
     cd2:	99 85       	ldd	r25, Y+9	; 0x09
     cd4:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <free>
     cd8:	9d 85       	ldd	r25, Y+13	; 0x0d
     cda:	8a 85       	ldd	r24, Y+10	; 0x0a
     cdc:	98 17       	cp	r25, r24
     cde:	01 f1       	breq	.+64     	; 0xd20 <Adafruit_NeoPixel::updateLength(unsigned int)+0x60>
     ce0:	84 e0       	ldi	r24, 0x04	; 4
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	8e 9d       	mul	r24, r14
     ce6:	80 01       	movw	r16, r0
     ce8:	8f 9d       	mul	r24, r15
     cea:	10 0d       	add	r17, r0
     cec:	9e 9d       	mul	r25, r14
     cee:	10 0d       	add	r17, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	1d 83       	std	Y+5, r17	; 0x05
     cf4:	0c 83       	std	Y+4, r16	; 0x04
     cf6:	c8 01       	movw	r24, r16
     cf8:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <malloc>
     cfc:	99 87       	std	Y+9, r25	; 0x09
     cfe:	88 87       	std	Y+8, r24	; 0x08
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	89 f0       	breq	.+34     	; 0xd26 <Adafruit_NeoPixel::updateLength(unsigned int)+0x66>
     d04:	a8 01       	movw	r20, r16
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <memset>
     d0e:	fb 82       	std	Y+3, r15	; 0x03
     d10:	ea 82       	std	Y+2, r14	; 0x02
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	08 95       	ret
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	df cf       	rjmp	.-66     	; 0xce4 <Adafruit_NeoPixel::updateLength(unsigned int)+0x24>
     d26:	1d 82       	std	Y+5, r1	; 0x05
     d28:	1c 82       	std	Y+4, r1	; 0x04
     d2a:	1b 82       	std	Y+3, r1	; 0x03
     d2c:	1a 82       	std	Y+2, r1	; 0x02
     d2e:	f1 cf       	rjmp	.-30     	; 0xd12 <Adafruit_NeoPixel::updateLength(unsigned int)+0x52>

00000d30 <Adafruit_NeoPixel::updateType(unsigned int)>:
_ZN17Adafruit_NeoPixel10updateTypeEj():
     d30:	fc 01       	movw	r30, r24
     d32:	b5 85       	ldd	r27, Z+13	; 0x0d
     d34:	a2 85       	ldd	r26, Z+10	; 0x0a
     d36:	9b 01       	movw	r18, r22
     d38:	86 e0       	ldi	r24, 0x06	; 6
     d3a:	36 95       	lsr	r19
     d3c:	27 95       	ror	r18
     d3e:	8a 95       	dec	r24
     d40:	e1 f7       	brne	.-8      	; 0xd3a <Adafruit_NeoPixel::updateType(unsigned int)+0xa>
     d42:	23 70       	andi	r18, 0x03	; 3
     d44:	25 87       	std	Z+13, r18	; 0x0d
     d46:	cb 01       	movw	r24, r22
     d48:	34 e0       	ldi	r19, 0x04	; 4
     d4a:	96 95       	lsr	r25
     d4c:	87 95       	ror	r24
     d4e:	3a 95       	dec	r19
     d50:	e1 f7       	brne	.-8      	; 0xd4a <Adafruit_NeoPixel::updateType(unsigned int)+0x1a>
     d52:	83 70       	andi	r24, 0x03	; 3
     d54:	82 87       	std	Z+10, r24	; 0x0a
     d56:	ab 01       	movw	r20, r22
     d58:	56 95       	lsr	r21
     d5a:	47 95       	ror	r20
     d5c:	56 95       	lsr	r21
     d5e:	47 95       	ror	r20
     d60:	43 70       	andi	r20, 0x03	; 3
     d62:	43 87       	std	Z+11, r20	; 0x0b
     d64:	96 2f       	mov	r25, r22
     d66:	93 70       	andi	r25, 0x03	; 3
     d68:	94 87       	std	Z+12, r25	; 0x0c
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	6f 3f       	cpi	r22, 0xFF	; 255
     d6e:	71 05       	cpc	r23, r1
     d70:	11 f0       	breq	.+4      	; 0xd76 <Adafruit_NeoPixel::updateType(unsigned int)+0x46>
     d72:	08 f0       	brcs	.+2      	; 0xd76 <Adafruit_NeoPixel::updateType(unsigned int)+0x46>
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	90 83       	st	Z, r25
     d78:	40 85       	ldd	r20, Z+8	; 0x08
     d7a:	51 85       	ldd	r21, Z+9	; 0x09
     d7c:	45 2b       	or	r20, r21
     d7e:	69 f0       	breq	.+26     	; 0xd9a <Adafruit_NeoPixel::updateType(unsigned int)+0x6a>
     d80:	31 e0       	ldi	r19, 0x01	; 1
     d82:	ba 13       	cpse	r27, r26
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	28 13       	cpse	r18, r24
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	39 17       	cp	r19, r25
     d8e:	29 f0       	breq	.+10     	; 0xd9a <Adafruit_NeoPixel::updateType(unsigned int)+0x6a>
     d90:	62 81       	ldd	r22, Z+2	; 0x02
     d92:	73 81       	ldd	r23, Z+3	; 0x03
     d94:	cf 01       	movw	r24, r30
     d96:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <Adafruit_NeoPixel::updateLength(unsigned int)>
     d9a:	08 95       	ret

00000d9c <Adafruit_NeoPixel::show()>:
_ZN17Adafruit_NeoPixel4showEv():
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	29 97       	sbiw	r28, 0x09	; 9
     db2:	0f b6       	in	r0, 0x3f	; 63
     db4:	f8 94       	cli
     db6:	de bf       	out	0x3e, r29	; 62
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	cd bf       	out	0x3d, r28	; 61
     dbc:	8c 01       	movw	r16, r24
     dbe:	dc 01       	movw	r26, r24
     dc0:	18 96       	adiw	r26, 0x08	; 8
     dc2:	8d 91       	ld	r24, X+
     dc4:	9c 91       	ld	r25, X
     dc6:	89 2b       	or	r24, r25
     dc8:	09 f4       	brne	.+2      	; 0xdcc <Adafruit_NeoPixel::show()+0x30>
     dca:	97 c0       	rjmp	.+302    	; 0xefa <headD+0x9e>
_ZN17Adafruit_NeoPixel7canShowEv():
     dcc:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <micros>
     dd0:	f8 01       	movw	r30, r16
     dd2:	c6 84       	ldd	r12, Z+14	; 0x0e
     dd4:	d7 84       	ldd	r13, Z+15	; 0x0f
     dd6:	e0 88       	ldd	r14, Z+16	; 0x10
     dd8:	f1 88       	ldd	r15, Z+17	; 0x11
     dda:	6c 19       	sub	r22, r12
     ddc:	7d 09       	sbc	r23, r13
     dde:	8e 09       	sbc	r24, r14
     de0:	9f 09       	sbc	r25, r15
_ZN17Adafruit_NeoPixel4showEv():
     de2:	6c 32       	cpi	r22, 0x2C	; 44
     de4:	71 40       	sbci	r23, 0x01	; 1
     de6:	81 05       	cpc	r24, r1
     de8:	91 05       	cpc	r25, r1
     dea:	80 f3       	brcs	.-32     	; 0xdcc <Adafruit_NeoPixel::show()+0x30>
     dec:	f8 94       	cli
     dee:	d8 01       	movw	r26, r16
     df0:	14 96       	adiw	r26, 0x04	; 4
     df2:	8d 91       	ld	r24, X+
     df4:	9c 91       	ld	r25, X
     df6:	15 97       	sbiw	r26, 0x05	; 5
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
     dfc:	18 96       	adiw	r26, 0x08	; 8
     dfe:	0d 90       	ld	r0, X+
     e00:	bc 91       	ld	r27, X
     e02:	a0 2d       	mov	r26, r0
     e04:	7d 01       	movw	r14, r26
     e06:	ef ef       	ldi	r30, 0xFF	; 255
     e08:	ee 1a       	sub	r14, r30
     e0a:	fe 0a       	sbc	r15, r30
     e0c:	8c 91       	ld	r24, X
     e0e:	89 87       	std	Y+9, r24	; 0x09
     e10:	d8 01       	movw	r26, r16
     e12:	8c 91       	ld	r24, X
     e14:	52 96       	adiw	r26, 0x12	; 18
     e16:	0d 90       	ld	r0, X+
     e18:	bc 91       	ld	r27, X
     e1a:	a0 2d       	mov	r26, r0
     e1c:	88 23       	and	r24, r24
     e1e:	09 f4       	brne	.+2      	; 0xe22 <Adafruit_NeoPixel::show()+0x86>
     e20:	34 c1       	rjmp	.+616    	; 0x108a <headC+0x82>
     e22:	1d 82       	std	Y+5, r1	; 0x05
     e24:	ab 32       	cpi	r26, 0x2B	; 43
     e26:	b1 05       	cpc	r27, r1
     e28:	09 f0       	breq	.+2      	; 0xe2c <Adafruit_NeoPixel::show()+0x90>
     e2a:	76 c0       	rjmp	.+236    	; 0xf18 <headD+0xbc>
     e2c:	9b b1       	in	r25, 0x0b	; 11
     e2e:	f8 01       	movw	r30, r16
     e30:	84 89       	ldd	r24, Z+20	; 0x14
     e32:	98 2b       	or	r25, r24
     e34:	98 87       	std	Y+8, r25	; 0x08
     e36:	9b b1       	in	r25, 0x0b	; 11
     e38:	80 95       	com	r24
     e3a:	89 23       	and	r24, r25
     e3c:	8f 83       	std	Y+7, r24	; 0x07
     e3e:	8f 81       	ldd	r24, Y+7	; 0x07
     e40:	8e 83       	std	Y+6, r24	; 0x06
     e42:	89 85       	ldd	r24, Y+9	; 0x09
     e44:	87 ff       	sbrs	r24, 7
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <Adafruit_NeoPixel::show()+0xb0>
     e48:	88 85       	ldd	r24, Y+8	; 0x08
     e4a:	8e 83       	std	Y+6, r24	; 0x06
     e4c:	58 85       	ldd	r21, Y+8	; 0x08
     e4e:	6f 81       	ldd	r22, Y+7	; 0x07
     e50:	49 85       	ldd	r20, Y+9	; 0x09
     e52:	3e 81       	ldd	r19, Y+6	; 0x06
     e54:	2d 81       	ldd	r18, Y+5	; 0x05
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	9a 81       	ldd	r25, Y+2	; 0x02
     e5a:	d7 01       	movw	r26, r14

00000e5c <headD>:
     e5c:	5b b9       	out	0x0b, r21	; 11
     e5e:	26 2f       	mov	r18, r22
     e60:	3b b9       	out	0x0b, r19	; 11
     e62:	00 c0       	rjmp	.+0      	; 0xe64 <headD+0x8>
     e64:	46 fd       	sbrc	r20, 6
     e66:	25 2f       	mov	r18, r21
     e68:	6b b9       	out	0x0b, r22	; 11
     e6a:	00 c0       	rjmp	.+0      	; 0xe6c <headD+0x10>
     e6c:	5b b9       	out	0x0b, r21	; 11
     e6e:	36 2f       	mov	r19, r22
     e70:	2b b9       	out	0x0b, r18	; 11
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <headD+0x18>
     e74:	45 fd       	sbrc	r20, 5
     e76:	35 2f       	mov	r19, r21
     e78:	6b b9       	out	0x0b, r22	; 11
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <headD+0x20>
     e7c:	5b b9       	out	0x0b, r21	; 11
     e7e:	26 2f       	mov	r18, r22
     e80:	3b b9       	out	0x0b, r19	; 11
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <headD+0x28>
     e84:	44 fd       	sbrc	r20, 4
     e86:	25 2f       	mov	r18, r21
     e88:	6b b9       	out	0x0b, r22	; 11
     e8a:	00 c0       	rjmp	.+0      	; 0xe8c <headD+0x30>
     e8c:	5b b9       	out	0x0b, r21	; 11
     e8e:	36 2f       	mov	r19, r22
     e90:	2b b9       	out	0x0b, r18	; 11
     e92:	00 c0       	rjmp	.+0      	; 0xe94 <headD+0x38>
     e94:	43 fd       	sbrc	r20, 3
     e96:	35 2f       	mov	r19, r21
     e98:	6b b9       	out	0x0b, r22	; 11
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <headD+0x40>
     e9c:	5b b9       	out	0x0b, r21	; 11
     e9e:	26 2f       	mov	r18, r22
     ea0:	3b b9       	out	0x0b, r19	; 11
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <headD+0x48>
     ea4:	42 fd       	sbrc	r20, 2
     ea6:	25 2f       	mov	r18, r21
     ea8:	6b b9       	out	0x0b, r22	; 11
     eaa:	00 c0       	rjmp	.+0      	; 0xeac <headD+0x50>
     eac:	5b b9       	out	0x0b, r21	; 11
     eae:	36 2f       	mov	r19, r22
     eb0:	2b b9       	out	0x0b, r18	; 11
     eb2:	00 c0       	rjmp	.+0      	; 0xeb4 <headD+0x58>
     eb4:	41 fd       	sbrc	r20, 1
     eb6:	35 2f       	mov	r19, r21
     eb8:	6b b9       	out	0x0b, r22	; 11
     eba:	00 c0       	rjmp	.+0      	; 0xebc <headD+0x60>
     ebc:	5b b9       	out	0x0b, r21	; 11
     ebe:	26 2f       	mov	r18, r22
     ec0:	3b b9       	out	0x0b, r19	; 11
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <headD+0x68>
     ec4:	40 fd       	sbrc	r20, 0
     ec6:	25 2f       	mov	r18, r21
     ec8:	6b b9       	out	0x0b, r22	; 11
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	5b b9       	out	0x0b, r21	; 11
     ece:	36 2f       	mov	r19, r22
     ed0:	2b b9       	out	0x0b, r18	; 11
     ed2:	4d 91       	ld	r20, X+
     ed4:	47 fd       	sbrc	r20, 7
     ed6:	35 2f       	mov	r19, r21
     ed8:	6b b9       	out	0x0b, r22	; 11
     eda:	01 f6       	brne	.-128    	; 0xe5c <headD>
     edc:	49 87       	std	Y+9, r20	; 0x09
     ede:	3e 83       	std	Y+6, r19	; 0x06
     ee0:	2d 83       	std	Y+5, r18	; 0x05
     ee2:	9a 83       	std	Y+2, r25	; 0x02
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	78 94       	sei
     ee8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <micros>
     eec:	d8 01       	movw	r26, r16
     eee:	1e 96       	adiw	r26, 0x0e	; 14
     ef0:	6d 93       	st	X+, r22
     ef2:	7d 93       	st	X+, r23
     ef4:	8d 93       	st	X+, r24
     ef6:	9c 93       	st	X, r25
     ef8:	51 97       	sbiw	r26, 0x11	; 17
     efa:	29 96       	adiw	r28, 0x09	; 9
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	1f 91       	pop	r17
     f0c:	0f 91       	pop	r16
     f0e:	ff 90       	pop	r15
     f10:	ef 90       	pop	r14
     f12:	df 90       	pop	r13
     f14:	cf 90       	pop	r12
     f16:	08 95       	ret
     f18:	a5 32       	cpi	r26, 0x25	; 37
     f1a:	b1 05       	cpc	r27, r1
     f1c:	09 f0       	breq	.+2      	; 0xf20 <headD+0xc4>
     f1e:	59 c0       	rjmp	.+178    	; 0xfd2 <headB+0x82>
     f20:	95 b1       	in	r25, 0x05	; 5
     f22:	f8 01       	movw	r30, r16
     f24:	84 89       	ldd	r24, Z+20	; 0x14
     f26:	98 2b       	or	r25, r24
     f28:	98 87       	std	Y+8, r25	; 0x08
     f2a:	95 b1       	in	r25, 0x05	; 5
     f2c:	80 95       	com	r24
     f2e:	89 23       	and	r24, r25
     f30:	8f 83       	std	Y+7, r24	; 0x07
     f32:	8f 81       	ldd	r24, Y+7	; 0x07
     f34:	8e 83       	std	Y+6, r24	; 0x06
     f36:	89 85       	ldd	r24, Y+9	; 0x09
     f38:	87 ff       	sbrs	r24, 7
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <headD+0xe4>
     f3c:	88 85       	ldd	r24, Y+8	; 0x08
     f3e:	8e 83       	std	Y+6, r24	; 0x06
     f40:	58 85       	ldd	r21, Y+8	; 0x08
     f42:	6f 81       	ldd	r22, Y+7	; 0x07
     f44:	49 85       	ldd	r20, Y+9	; 0x09
     f46:	3e 81       	ldd	r19, Y+6	; 0x06
     f48:	2d 81       	ldd	r18, Y+5	; 0x05
     f4a:	89 81       	ldd	r24, Y+1	; 0x01
     f4c:	9a 81       	ldd	r25, Y+2	; 0x02
     f4e:	d7 01       	movw	r26, r14

00000f50 <headB>:
     f50:	55 b9       	out	0x05, r21	; 5
     f52:	26 2f       	mov	r18, r22
     f54:	35 b9       	out	0x05, r19	; 5
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <headB+0x8>
     f58:	46 fd       	sbrc	r20, 6
     f5a:	25 2f       	mov	r18, r21
     f5c:	65 b9       	out	0x05, r22	; 5
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <headB+0x10>
     f60:	55 b9       	out	0x05, r21	; 5
     f62:	36 2f       	mov	r19, r22
     f64:	25 b9       	out	0x05, r18	; 5
     f66:	00 c0       	rjmp	.+0      	; 0xf68 <headB+0x18>
     f68:	45 fd       	sbrc	r20, 5
     f6a:	35 2f       	mov	r19, r21
     f6c:	65 b9       	out	0x05, r22	; 5
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <headB+0x20>
     f70:	55 b9       	out	0x05, r21	; 5
     f72:	26 2f       	mov	r18, r22
     f74:	35 b9       	out	0x05, r19	; 5
     f76:	00 c0       	rjmp	.+0      	; 0xf78 <headB+0x28>
     f78:	44 fd       	sbrc	r20, 4
     f7a:	25 2f       	mov	r18, r21
     f7c:	65 b9       	out	0x05, r22	; 5
     f7e:	00 c0       	rjmp	.+0      	; 0xf80 <headB+0x30>
     f80:	55 b9       	out	0x05, r21	; 5
     f82:	36 2f       	mov	r19, r22
     f84:	25 b9       	out	0x05, r18	; 5
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <headB+0x38>
     f88:	43 fd       	sbrc	r20, 3
     f8a:	35 2f       	mov	r19, r21
     f8c:	65 b9       	out	0x05, r22	; 5
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <headB+0x40>
     f90:	55 b9       	out	0x05, r21	; 5
     f92:	26 2f       	mov	r18, r22
     f94:	35 b9       	out	0x05, r19	; 5
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <headB+0x48>
     f98:	42 fd       	sbrc	r20, 2
     f9a:	25 2f       	mov	r18, r21
     f9c:	65 b9       	out	0x05, r22	; 5
     f9e:	00 c0       	rjmp	.+0      	; 0xfa0 <headB+0x50>
     fa0:	55 b9       	out	0x05, r21	; 5
     fa2:	36 2f       	mov	r19, r22
     fa4:	25 b9       	out	0x05, r18	; 5
     fa6:	00 c0       	rjmp	.+0      	; 0xfa8 <headB+0x58>
     fa8:	41 fd       	sbrc	r20, 1
     faa:	35 2f       	mov	r19, r21
     fac:	65 b9       	out	0x05, r22	; 5
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <headB+0x60>
     fb0:	55 b9       	out	0x05, r21	; 5
     fb2:	26 2f       	mov	r18, r22
     fb4:	35 b9       	out	0x05, r19	; 5
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <headB+0x68>
     fb8:	40 fd       	sbrc	r20, 0
     fba:	25 2f       	mov	r18, r21
     fbc:	65 b9       	out	0x05, r22	; 5
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	55 b9       	out	0x05, r21	; 5
     fc2:	36 2f       	mov	r19, r22
     fc4:	25 b9       	out	0x05, r18	; 5
     fc6:	4d 91       	ld	r20, X+
     fc8:	47 fd       	sbrc	r20, 7
     fca:	35 2f       	mov	r19, r21
     fcc:	65 b9       	out	0x05, r22	; 5
     fce:	01 f6       	brne	.-128    	; 0xf50 <headB>
     fd0:	85 cf       	rjmp	.-246    	; 0xedc <headD+0x80>
     fd2:	98 97       	sbiw	r26, 0x28	; 40
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <headB+0x88>
     fd6:	87 cf       	rjmp	.-242    	; 0xee6 <headD+0x8a>
     fd8:	98 b1       	in	r25, 0x08	; 8
     fda:	f8 01       	movw	r30, r16
     fdc:	84 89       	ldd	r24, Z+20	; 0x14
     fde:	98 2b       	or	r25, r24
     fe0:	98 87       	std	Y+8, r25	; 0x08
     fe2:	98 b1       	in	r25, 0x08	; 8
     fe4:	80 95       	com	r24
     fe6:	89 23       	and	r24, r25
     fe8:	8f 83       	std	Y+7, r24	; 0x07
     fea:	8f 81       	ldd	r24, Y+7	; 0x07
     fec:	8e 83       	std	Y+6, r24	; 0x06
     fee:	89 85       	ldd	r24, Y+9	; 0x09
     ff0:	87 ff       	sbrs	r24, 7
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <headB+0xa8>
     ff4:	88 85       	ldd	r24, Y+8	; 0x08
     ff6:	8e 83       	std	Y+6, r24	; 0x06
     ff8:	58 85       	ldd	r21, Y+8	; 0x08
     ffa:	6f 81       	ldd	r22, Y+7	; 0x07
     ffc:	49 85       	ldd	r20, Y+9	; 0x09
     ffe:	3e 81       	ldd	r19, Y+6	; 0x06
    1000:	2d 81       	ldd	r18, Y+5	; 0x05
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	9a 81       	ldd	r25, Y+2	; 0x02
    1006:	d7 01       	movw	r26, r14

00001008 <headC>:
    1008:	58 b9       	out	0x08, r21	; 8
    100a:	26 2f       	mov	r18, r22
    100c:	38 b9       	out	0x08, r19	; 8
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <headC+0x8>
    1010:	46 fd       	sbrc	r20, 6
    1012:	25 2f       	mov	r18, r21
    1014:	68 b9       	out	0x08, r22	; 8
    1016:	00 c0       	rjmp	.+0      	; 0x1018 <headC+0x10>
    1018:	58 b9       	out	0x08, r21	; 8
    101a:	36 2f       	mov	r19, r22
    101c:	28 b9       	out	0x08, r18	; 8
    101e:	00 c0       	rjmp	.+0      	; 0x1020 <headC+0x18>
    1020:	45 fd       	sbrc	r20, 5
    1022:	35 2f       	mov	r19, r21
    1024:	68 b9       	out	0x08, r22	; 8
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <headC+0x20>
    1028:	58 b9       	out	0x08, r21	; 8
    102a:	26 2f       	mov	r18, r22
    102c:	38 b9       	out	0x08, r19	; 8
    102e:	00 c0       	rjmp	.+0      	; 0x1030 <headC+0x28>
    1030:	44 fd       	sbrc	r20, 4
    1032:	25 2f       	mov	r18, r21
    1034:	68 b9       	out	0x08, r22	; 8
    1036:	00 c0       	rjmp	.+0      	; 0x1038 <headC+0x30>
    1038:	58 b9       	out	0x08, r21	; 8
    103a:	36 2f       	mov	r19, r22
    103c:	28 b9       	out	0x08, r18	; 8
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <headC+0x38>
    1040:	43 fd       	sbrc	r20, 3
    1042:	35 2f       	mov	r19, r21
    1044:	68 b9       	out	0x08, r22	; 8
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <headC+0x40>
    1048:	58 b9       	out	0x08, r21	; 8
    104a:	26 2f       	mov	r18, r22
    104c:	38 b9       	out	0x08, r19	; 8
    104e:	00 c0       	rjmp	.+0      	; 0x1050 <headC+0x48>
    1050:	42 fd       	sbrc	r20, 2
    1052:	25 2f       	mov	r18, r21
    1054:	68 b9       	out	0x08, r22	; 8
    1056:	00 c0       	rjmp	.+0      	; 0x1058 <headC+0x50>
    1058:	58 b9       	out	0x08, r21	; 8
    105a:	36 2f       	mov	r19, r22
    105c:	28 b9       	out	0x08, r18	; 8
    105e:	00 c0       	rjmp	.+0      	; 0x1060 <headC+0x58>
    1060:	41 fd       	sbrc	r20, 1
    1062:	35 2f       	mov	r19, r21
    1064:	68 b9       	out	0x08, r22	; 8
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <headC+0x60>
    1068:	58 b9       	out	0x08, r21	; 8
    106a:	26 2f       	mov	r18, r22
    106c:	38 b9       	out	0x08, r19	; 8
    106e:	00 c0       	rjmp	.+0      	; 0x1070 <headC+0x68>
    1070:	40 fd       	sbrc	r20, 0
    1072:	25 2f       	mov	r18, r21
    1074:	68 b9       	out	0x08, r22	; 8
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	58 b9       	out	0x08, r21	; 8
    107a:	36 2f       	mov	r19, r22
    107c:	28 b9       	out	0x08, r18	; 8
    107e:	4d 91       	ld	r20, X+
    1080:	47 fd       	sbrc	r20, 7
    1082:	35 2f       	mov	r19, r21
    1084:	68 b9       	out	0x08, r22	; 8
    1086:	01 f6       	brne	.-128    	; 0x1008 <headC>
    1088:	29 cf       	rjmp	.-430    	; 0xedc <headD+0x80>
    108a:	9c 91       	ld	r25, X
    108c:	f8 01       	movw	r30, r16
    108e:	84 89       	ldd	r24, Z+20	; 0x14
    1090:	98 2b       	or	r25, r24
    1092:	98 87       	std	Y+8, r25	; 0x08
    1094:	9c 91       	ld	r25, X
    1096:	80 95       	com	r24
    1098:	89 23       	and	r24, r25
    109a:	8f 83       	std	Y+7, r24	; 0x07
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	8c 83       	std	Y+4, r24	; 0x04
    10a0:	88 e0       	ldi	r24, 0x08	; 8
    10a2:	8b 83       	std	Y+3, r24	; 0x03
    10a4:	58 85       	ldd	r21, Y+8	; 0x08
    10a6:	6f 81       	ldd	r22, Y+7	; 0x07
    10a8:	49 85       	ldd	r20, Y+9	; 0x09
    10aa:	3b 81       	ldd	r19, Y+3	; 0x03
    10ac:	2c 81       	ldd	r18, Y+4	; 0x04
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
    10b2:	f7 01       	movw	r30, r14

000010b4 <head20>:
    10b4:	5c 93       	st	X, r21
    10b6:	47 fd       	sbrc	r20, 7
    10b8:	25 2f       	mov	r18, r21
    10ba:	2c 93       	st	X, r18
    10bc:	26 2f       	mov	r18, r22
    10be:	3a 95       	dec	r19
    10c0:	31 f0       	breq	.+12     	; 0x10ce <nextbyte20>
    10c2:	44 1f       	adc	r20, r20
    10c4:	6c 93       	st	X, r22
    10c6:	00 c0       	rjmp	.+0      	; 0x10c8 <head20+0x14>
    10c8:	00 c0       	rjmp	.+0      	; 0x10ca <head20+0x16>
    10ca:	00 c0       	rjmp	.+0      	; 0x10cc <head20+0x18>
    10cc:	f3 cf       	rjmp	.-26     	; 0x10b4 <head20>

000010ce <nextbyte20>:
    10ce:	6c 93       	st	X, r22
    10d0:	00 00       	nop
    10d2:	38 e0       	ldi	r19, 0x08	; 8
    10d4:	41 91       	ld	r20, Z+
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	69 f7       	brne	.-38     	; 0x10b4 <head20>
    10da:	f8 01       	movw	r30, r16
    10dc:	b3 8b       	std	Z+19, r27	; 0x13
    10de:	a2 8b       	std	Z+18, r26	; 0x12
    10e0:	49 87       	std	Y+9, r20	; 0x09
    10e2:	3b 83       	std	Y+3, r19	; 0x03
    10e4:	2c 83       	std	Y+4, r18	; 0x04
    10e6:	fd ce       	rjmp	.-518    	; 0xee2 <headD+0x86>

000010e8 <Adafruit_NeoPixel::setPin(unsigned char)>:
_ZN17Adafruit_NeoPixel6setPinEh():
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	ec 01       	movw	r28, r24
    10f0:	16 2f       	mov	r17, r22
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	88 23       	and	r24, r24
    10f6:	31 f0       	breq	.+12     	; 0x1104 <Adafruit_NeoPixel::setPin(unsigned char)+0x1c>
    10f8:	8e 81       	ldd	r24, Y+6	; 0x06
    10fa:	87 fd       	sbrc	r24, 7
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <Adafruit_NeoPixel::setPin(unsigned char)+0x1c>
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	0e 94 0b 0c 	call	0x1816	; 0x1816 <pinMode>
    1104:	1e 83       	std	Y+6, r17	; 0x06
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	88 23       	and	r24, r24
    110a:	41 f0       	breq	.+16     	; 0x111c <Adafruit_NeoPixel::setPin(unsigned char)+0x34>
    110c:	61 e0       	ldi	r22, 0x01	; 1
    110e:	81 2f       	mov	r24, r17
    1110:	0e 94 0b 0c 	call	0x1816	; 0x1816 <pinMode>
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	81 2f       	mov	r24, r17
    1118:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
    111c:	81 2f       	mov	r24, r17
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	fc 01       	movw	r30, r24
    1122:	ea 56       	subi	r30, 0x6A	; 106
    1124:	ff 4f       	sbci	r31, 0xFF	; 255
    1126:	e4 91       	lpm	r30, Z
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	ee 0f       	add	r30, r30
    112c:	ff 1f       	adc	r31, r31
    112e:	e9 54       	subi	r30, 0x49	; 73
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	25 91       	lpm	r18, Z+
    1134:	34 91       	lpm	r19, Z
    1136:	3b 8b       	std	Y+19, r19	; 0x13
    1138:	2a 8b       	std	Y+18, r18	; 0x12
    113a:	fc 01       	movw	r30, r24
    113c:	e1 58       	subi	r30, 0x81	; 129
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	e4 91       	lpm	r30, Z
    1142:	ec 8b       	std	Y+20, r30	; 0x14
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	08 95       	ret

0000114c <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned int, unsigned char, unsigned int)>:
_ZN17Adafruit_NeoPixelC2Ejhj():
    114c:	ef 92       	push	r14
    114e:	ff 92       	push	r15
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ec 01       	movw	r28, r24
    1158:	7b 01       	movw	r14, r22
    115a:	14 2f       	mov	r17, r20
    115c:	19 82       	std	Y+1, r1	; 0x01
    115e:	1f 82       	std	Y+7, r1	; 0x07
    1160:	19 86       	std	Y+9, r1	; 0x09
    1162:	18 86       	std	Y+8, r1	; 0x08
    1164:	1e 86       	std	Y+14, r1	; 0x0e
    1166:	1f 86       	std	Y+15, r1	; 0x0f
    1168:	18 8a       	std	Y+16, r1	; 0x10
    116a:	19 8a       	std	Y+17, r1	; 0x11
    116c:	b9 01       	movw	r22, r18
    116e:	0e 94 98 06 	call	0xd30	; 0xd30 <Adafruit_NeoPixel::updateType(unsigned int)>
    1172:	b7 01       	movw	r22, r14
    1174:	ce 01       	movw	r24, r28
    1176:	0e 94 60 06 	call	0xcc0	; 0xcc0 <Adafruit_NeoPixel::updateLength(unsigned int)>
    117a:	61 2f       	mov	r22, r17
    117c:	ce 01       	movw	r24, r28
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	ff 90       	pop	r15
    1186:	ef 90       	pop	r14
    1188:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <Adafruit_NeoPixel::setPin(unsigned char)>

0000118c <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)>:
_ZN17Adafruit_NeoPixel13setPixelColorEjm():
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2142
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is white (for RGBW
              pixels) or ignored (for RGB pixels), next is red, then green,
              and least significant byte is blue.
*/
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
    118c:	8f 92       	push	r8
    118e:	9f 92       	push	r9
    1190:	af 92       	push	r10
    1192:	bf 92       	push	r11
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	fc 01       	movw	r30, r24
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2143
  if(n < numLEDs) {
    11a4:	82 81       	ldd	r24, Z+2	; 0x02
    11a6:	93 81       	ldd	r25, Z+3	; 0x03
    11a8:	68 17       	cp	r22, r24
    11aa:	79 07       	cpc	r23, r25
    11ac:	a8 f5       	brcc	.+106    	; 0x1218 <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)+0x8c>
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2145
    uint8_t *p,
      r = (uint8_t)(c >> 16),
    11ae:	4a 01       	movw	r8, r20
    11b0:	aa 24       	eor	r10, r10
    11b2:	bb 24       	eor	r11, r11
    11b4:	c8 2d       	mov	r28, r8
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2146
      g = (uint8_t)(c >>  8),
    11b6:	c3 2e       	mov	r12, r19
    11b8:	d4 2e       	mov	r13, r20
    11ba:	e5 2e       	mov	r14, r21
    11bc:	ff 24       	eor	r15, r15
    11be:	1c 2d       	mov	r17, r12
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2147
      b = (uint8_t)c;
    11c0:	d2 2f       	mov	r29, r18
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2148
    if(brightness) { // See notes in setBrightness()
    11c2:	87 81       	ldd	r24, Z+7	; 0x07
    11c4:	88 23       	and	r24, r24
    11c6:	61 f0       	breq	.+24     	; 0x11e0 <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)+0x54>
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2149
      r = (r * brightness) >> 8;
    11c8:	88 9e       	mul	r8, r24
    11ca:	40 01       	movw	r8, r0
    11cc:	11 24       	eor	r1, r1
    11ce:	c9 2d       	mov	r28, r9
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2150
      g = (g * brightness) >> 8;
    11d0:	8c 9d       	mul	r24, r12
    11d2:	60 01       	movw	r12, r0
    11d4:	11 24       	eor	r1, r1
    11d6:	1d 2d       	mov	r17, r13
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2151
      b = (b * brightness) >> 8;
    11d8:	82 9f       	mul	r24, r18
    11da:	d0 01       	movw	r26, r0
    11dc:	11 24       	eor	r1, r1
    11de:	db 2f       	mov	r29, r27
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2153
    }
    if(wOffset == rOffset) {
    11e0:	a5 85       	ldd	r26, Z+13	; 0x0d
    11e2:	e0 84       	ldd	r14, Z+8	; 0x08
    11e4:	f1 84       	ldd	r15, Z+9	; 0x09
    11e6:	92 85       	ldd	r25, Z+10	; 0x0a
    11e8:	a9 13       	cpse	r26, r25
    11ea:	22 c0       	rjmp	.+68     	; 0x1230 <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)+0xa4>
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2154
      p = &pixels[n * 3];
    11ec:	cb 01       	movw	r24, r22
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	68 0f       	add	r22, r24
    11f4:	79 1f       	adc	r23, r25
    11f6:	6e 0d       	add	r22, r14
    11f8:	7f 1d       	adc	r23, r15
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2160
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    }
    p[rOffset] = r;
    11fa:	a2 85       	ldd	r26, Z+10	; 0x0a
    11fc:	a6 0f       	add	r26, r22
    11fe:	b7 2f       	mov	r27, r23
    1200:	b1 1d       	adc	r27, r1
    1202:	cc 93       	st	X, r28
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2161
    p[gOffset] = g;
    1204:	a3 85       	ldd	r26, Z+11	; 0x0b
    1206:	a6 0f       	add	r26, r22
    1208:	b7 2f       	mov	r27, r23
    120a:	b1 1d       	adc	r27, r1
    120c:	1c 93       	st	X, r17
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2162
    p[bOffset] = b;
    120e:	84 85       	ldd	r24, Z+12	; 0x0c
    1210:	68 0f       	add	r22, r24
    1212:	71 1d       	adc	r23, r1
    1214:	fb 01       	movw	r30, r22
    1216:	d0 83       	st	Z, r29
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2164
  }
}
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	ff 90       	pop	r15
    1220:	ef 90       	pop	r14
    1222:	df 90       	pop	r13
    1224:	cf 90       	pop	r12
    1226:	bf 90       	pop	r11
    1228:	af 90       	pop	r10
    122a:	9f 90       	pop	r9
    122c:	8f 90       	pop	r8
    122e:	08 95       	ret
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2156
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	66 0f       	add	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	6e 0d       	add	r22, r14
    123a:	7f 1d       	adc	r23, r15
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2157
      uint8_t w = (uint8_t)(c >> 24);
    123c:	25 2f       	mov	r18, r21
    123e:	33 27       	eor	r19, r19
    1240:	44 27       	eor	r20, r20
    1242:	55 27       	eor	r21, r21
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2158
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    1244:	88 23       	and	r24, r24
    1246:	49 f0       	breq	.+18     	; 0x125a <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)+0xce>
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	82 9f       	mul	r24, r18
    124c:	70 01       	movw	r14, r0
    124e:	83 9f       	mul	r24, r19
    1250:	f0 0c       	add	r15, r0
    1252:	92 9f       	mul	r25, r18
    1254:	f0 0c       	add	r15, r0
    1256:	11 24       	eor	r1, r1
    1258:	2f 2d       	mov	r18, r15
    125a:	a6 0f       	add	r26, r22
    125c:	b7 2f       	mov	r27, r23
    125e:	b1 1d       	adc	r27, r1
    1260:	2c 93       	st	X, r18
    1262:	cb cf       	rjmp	.-106    	; 0x11fa <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)+0x6e>

00001264 <PS2dev::golo(int) [clone .constprop.2]>:
_ZN6PS2dev4goloEi():
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:300 (discriminator 1)

int PS2dev::keyboard_handle(unsigned char *leds) {
  unsigned char c;  //char stores data recieved from computer for KBD
  if(available())
  {
    if(!read(&c)) return keyboard_reply(c, leds);
    1264:	cf 93       	push	r28
    1266:	c8 2f       	mov	r28, r24
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	0e 94 47 0c 	call	0x188e	; 0x188e <digitalWrite>
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	8c 2f       	mov	r24, r28
    1272:	cf 91       	pop	r28
    1274:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <pinMode>

00001278 <PS2dev::gohi(int) [clone .constprop.3]>:
_ZN6PS2dev4gohiEi():
    1278:	cf 93       	push	r28
    127a:	c8 2f       	mov	r28, r24
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	0e 94 0b 0c 	call	0x1816	; 0x1816 <pinMode>
    1282:	61 e0       	ldi	r22, 0x01	; 1
    1284:	8c 2f       	mov	r24, r28
    1286:	cf 91       	pop	r28
    1288:	0c 94 47 0c 	jmp	0x188e	; 0x188e <digitalWrite>

0000128c <PS2dev::PS2dev(int, int)>:
_ZN6PS2devC2Eii():
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	ec 01       	movw	r28, r24
    1292:	cb 01       	movw	r24, r22
    1294:	79 83       	std	Y+1, r23	; 0x01
    1296:	68 83       	st	Y, r22
    1298:	5b 83       	std	Y+3, r21	; 0x03
    129a:	4a 83       	std	Y+2, r20	; 0x02
    129c:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	9b 81       	ldd	r25, Y+3	; 0x03
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>

000012ac <PS2dev::write(unsigned char)>:
_ZN6PS2dev5writeEh():
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	ec 01       	movw	r28, r24
    12be:	16 2f       	mov	r17, r22
    12c0:	88 e5       	ldi	r24, 0x58	; 88
    12c2:	92 e0       	ldi	r25, 0x02	; 2
    12c4:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    12c8:	88 81       	ld	r24, Y
    12ca:	0e 94 75 0c 	call	0x18ea	; 0x18ea <digitalRead>
    12ce:	89 2b       	or	r24, r25
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <PS2dev::write(unsigned char)+0x28>
    12d2:	92 c0       	rjmp	.+292    	; 0x13f8 <PS2dev::write(unsigned char)+0x14c>
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	0e 94 75 0c 	call	0x18ea	; 0x18ea <digitalRead>
    12da:	89 2b       	or	r24, r25
    12dc:	09 f4       	brne	.+2      	; 0x12e0 <PS2dev::write(unsigned char)+0x34>
    12de:	8f c0       	rjmp	.+286    	; 0x13fe <PS2dev::write(unsigned char)+0x152>
    12e0:	8a 81       	ldd	r24, Y+2	; 0x02
    12e2:	9b 81       	ldd	r25, Y+3	; 0x03
    12e4:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    12e8:	85 e0       	ldi	r24, 0x05	; 5
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    12f0:	88 81       	ld	r24, Y
    12f2:	99 81       	ldd	r25, Y+1	; 0x01
    12f4:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    12f8:	8e e1       	ldi	r24, 0x1E	; 30
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    1300:	88 81       	ld	r24, Y
    1302:	99 81       	ldd	r25, Y+1	; 0x01
    1304:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    1308:	85 e0       	ldi	r24, 0x05	; 5
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    1310:	28 e0       	ldi	r18, 0x08	; 8
    1312:	f2 2e       	mov	r15, r18
    1314:	01 e0       	ldi	r16, 0x01	; 1
    1316:	c1 2e       	mov	r12, r17
    1318:	d1 2c       	mov	r13, r1
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	9b 81       	ldd	r25, Y+3	; 0x03
    131e:	21 2f       	mov	r18, r17
    1320:	21 70       	andi	r18, 0x01	; 1
    1322:	e2 2e       	mov	r14, r18
    1324:	10 ff       	sbrs	r17, 0
    1326:	62 c0       	rjmp	.+196    	; 0x13ec <PS2dev::write(unsigned char)+0x140>
    1328:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    132c:	85 e0       	ldi	r24, 0x05	; 5
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    1334:	88 81       	ld	r24, Y
    1336:	99 81       	ldd	r25, Y+1	; 0x01
    1338:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    133c:	8e e1       	ldi	r24, 0x1E	; 30
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    1344:	88 81       	ld	r24, Y
    1346:	99 81       	ldd	r25, Y+1	; 0x01
    1348:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    134c:	85 e0       	ldi	r24, 0x05	; 5
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    1354:	8e 2d       	mov	r24, r14
    1356:	80 27       	eor	r24, r16
    1358:	d5 94       	asr	r13
    135a:	c7 94       	ror	r12
    135c:	1c 2d       	mov	r17, r12
    135e:	fa 94       	dec	r15
    1360:	f1 10       	cpse	r15, r1
    1362:	42 c0       	rjmp	.+132    	; 0x13e8 <PS2dev::write(unsigned char)+0x13c>
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	9b 81       	ldd	r25, Y+3	; 0x03
    1368:	e0 16       	cp	r14, r16
    136a:	09 f4       	brne	.+2      	; 0x136e <PS2dev::write(unsigned char)+0xc2>
    136c:	42 c0       	rjmp	.+132    	; 0x13f2 <PS2dev::write(unsigned char)+0x146>
    136e:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    1372:	85 e0       	ldi	r24, 0x05	; 5
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    137a:	88 81       	ld	r24, Y
    137c:	99 81       	ldd	r25, Y+1	; 0x01
    137e:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    1382:	8e e1       	ldi	r24, 0x1E	; 30
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    138a:	88 81       	ld	r24, Y
    138c:	99 81       	ldd	r25, Y+1	; 0x01
    138e:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    1392:	85 e0       	ldi	r24, 0x05	; 5
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    139a:	8a 81       	ldd	r24, Y+2	; 0x02
    139c:	9b 81       	ldd	r25, Y+3	; 0x03
    139e:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    13a2:	85 e0       	ldi	r24, 0x05	; 5
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    13aa:	88 81       	ld	r24, Y
    13ac:	99 81       	ldd	r25, Y+1	; 0x01
    13ae:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    13b2:	8e e1       	ldi	r24, 0x1E	; 30
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    13ba:	88 81       	ld	r24, Y
    13bc:	99 81       	ldd	r25, Y+1	; 0x01
    13be:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    13c2:	85 e0       	ldi	r24, 0x05	; 5
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    13ca:	88 e5       	ldi	r24, 0x58	; 88
    13cc:	92 e0       	ldi	r25, 0x02	; 2
    13ce:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	df 91       	pop	r29
    13d8:	cf 91       	pop	r28
    13da:	1f 91       	pop	r17
    13dc:	0f 91       	pop	r16
    13de:	ff 90       	pop	r15
    13e0:	ef 90       	pop	r14
    13e2:	df 90       	pop	r13
    13e4:	cf 90       	pop	r12
    13e6:	08 95       	ret
    13e8:	08 2f       	mov	r16, r24
    13ea:	95 cf       	rjmp	.-214    	; 0x1316 <PS2dev::write(unsigned char)+0x6a>
    13ec:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    13f0:	9d cf       	rjmp	.-198    	; 0x132c <PS2dev::write(unsigned char)+0x80>
    13f2:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    13f6:	bd cf       	rjmp	.-134    	; 0x1372 <PS2dev::write(unsigned char)+0xc6>
    13f8:	8f ef       	ldi	r24, 0xFF	; 255
    13fa:	9f ef       	ldi	r25, 0xFF	; 255
    13fc:	ec cf       	rjmp	.-40     	; 0x13d6 <PS2dev::write(unsigned char)+0x12a>
    13fe:	8e ef       	ldi	r24, 0xFE	; 254
    1400:	9f ef       	ldi	r25, 0xFF	; 255
    1402:	e9 cf       	rjmp	.-46     	; 0x13d6 <PS2dev::write(unsigned char)+0x12a>

00001404 <PS2dev::available()>:
_ZN6PS2dev9availableEv():
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	ec 01       	movw	r28, r24
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <digitalRead>
    1410:	21 e0       	ldi	r18, 0x01	; 1
    1412:	89 2b       	or	r24, r25
    1414:	39 f0       	breq	.+14     	; 0x1424 <PS2dev::available()+0x20>
    1416:	88 81       	ld	r24, Y
    1418:	0e 94 75 0c 	call	0x18ea	; 0x18ea <digitalRead>
    141c:	21 e0       	ldi	r18, 0x01	; 1
    141e:	89 2b       	or	r24, r25
    1420:	09 f0       	breq	.+2      	; 0x1424 <PS2dev::available()+0x20>
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	82 2f       	mov	r24, r18
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <PS2dev::read(unsigned char*)>:
_ZN6PS2dev4readEPh():
    142e:	6f 92       	push	r6
    1430:	7f 92       	push	r7
    1432:	8f 92       	push	r8
    1434:	9f 92       	push	r9
    1436:	af 92       	push	r10
    1438:	bf 92       	push	r11
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	ec 01       	movw	r28, r24
    144c:	4b 01       	movw	r8, r22
    144e:	0e 94 45 0b 	call	0x168a	; 0x168a <millis>
    1452:	6b 01       	movw	r12, r22
    1454:	7c 01       	movw	r14, r24
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	0e 94 75 0c 	call	0x18ea	; 0x18ea <digitalRead>
    145c:	8c 01       	movw	r16, r24
    145e:	89 2b       	or	r24, r25
    1460:	71 f0       	breq	.+28     	; 0x147e <PS2dev::read(unsigned char*)+0x50>
    1462:	0e 94 45 0b 	call	0x168a	; 0x168a <millis>
    1466:	6c 19       	sub	r22, r12
    1468:	7d 09       	sbc	r23, r13
    146a:	8e 09       	sbc	r24, r14
    146c:	9f 09       	sbc	r25, r15
    146e:	6f 31       	cpi	r22, 0x1F	; 31
    1470:	71 05       	cpc	r23, r1
    1472:	81 05       	cpc	r24, r1
    1474:	91 05       	cpc	r25, r1
    1476:	78 f3       	brcs	.-34     	; 0x1456 <PS2dev::read(unsigned char*)+0x28>
    1478:	0f ef       	ldi	r16, 0xFF	; 255
    147a:	1f ef       	ldi	r17, 0xFF	; 255
    147c:	86 c0       	rjmp	.+268    	; 0x158a <PS2dev::read(unsigned char*)+0x15c>
    147e:	88 81       	ld	r24, Y
    1480:	0e 94 75 0c 	call	0x18ea	; 0x18ea <digitalRead>
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	69 f7       	brne	.-38     	; 0x1462 <PS2dev::read(unsigned char*)+0x34>
    1488:	85 e0       	ldi	r24, 0x05	; 5
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    1490:	88 81       	ld	r24, Y
    1492:	99 81       	ldd	r25, Y+1	; 0x01
    1494:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    1498:	8e e1       	ldi	r24, 0x1E	; 30
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    14a0:	88 81       	ld	r24, Y
    14a2:	99 81       	ldd	r25, Y+1	; 0x01
    14a4:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    14a8:	85 e0       	ldi	r24, 0x05	; 5
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    14b0:	98 e0       	ldi	r25, 0x08	; 8
    14b2:	c9 2e       	mov	r12, r25
    14b4:	d1 2c       	mov	r13, r1
    14b6:	77 24       	eor	r7, r7
    14b8:	73 94       	inc	r7
    14ba:	f1 2c       	mov	r15, r1
    14bc:	e1 2c       	mov	r14, r1
    14be:	aa 24       	eor	r10, r10
    14c0:	a3 94       	inc	r10
    14c2:	b1 2c       	mov	r11, r1
    14c4:	66 24       	eor	r6, r6
    14c6:	63 94       	inc	r6
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	0e 94 75 0c 	call	0x18ea	; 0x18ea <digitalRead>
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	19 f4       	brne	.+6      	; 0x14d8 <PS2dev::read(unsigned char*)+0xaa>
    14d2:	ea 28       	or	r14, r10
    14d4:	fb 28       	or	r15, r11
    14d6:	76 24       	eor	r7, r6
    14d8:	aa 0c       	add	r10, r10
    14da:	bb 1c       	adc	r11, r11
    14dc:	85 e0       	ldi	r24, 0x05	; 5
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    14e4:	88 81       	ld	r24, Y
    14e6:	99 81       	ldd	r25, Y+1	; 0x01
    14e8:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    14ec:	8e e1       	ldi	r24, 0x1E	; 30
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    14f4:	88 81       	ld	r24, Y
    14f6:	99 81       	ldd	r25, Y+1	; 0x01
    14f8:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    14fc:	85 e0       	ldi	r24, 0x05	; 5
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	c8 1a       	sub	r12, r24
    1508:	d1 08       	sbc	r13, r1
    150a:	f1 f6       	brne	.-68     	; 0x14c8 <PS2dev::read(unsigned char*)+0x9a>
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <digitalRead>
    1512:	6c 01       	movw	r12, r24
    1514:	85 e0       	ldi	r24, 0x05	; 5
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    151c:	88 81       	ld	r24, Y
    151e:	99 81       	ldd	r25, Y+1	; 0x01
    1520:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    1524:	8e e1       	ldi	r24, 0x1E	; 30
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    152c:	88 81       	ld	r24, Y
    152e:	99 81       	ldd	r25, Y+1	; 0x01
    1530:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    1534:	85 e0       	ldi	r24, 0x05	; 5
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    153c:	85 e0       	ldi	r24, 0x05	; 5
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	9b 81       	ldd	r25, Y+3	; 0x03
    1548:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    154c:	88 81       	ld	r24, Y
    154e:	99 81       	ldd	r25, Y+1	; 0x01
    1550:	0e 94 32 09 	call	0x1264	; 0x1264 <PS2dev::golo(int) [clone .constprop.2]>
    1554:	8e e1       	ldi	r24, 0x1E	; 30
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    155c:	88 81       	ld	r24, Y
    155e:	99 81       	ldd	r25, Y+1	; 0x01
    1560:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    1564:	85 e0       	ldi	r24, 0x05	; 5
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 af 0b 	call	0x175e	; 0x175e <delayMicroseconds>
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	9b 81       	ldd	r25, Y+3	; 0x03
    1570:	0e 94 3c 09 	call	0x1278	; 0x1278 <PS2dev::gohi(int) [clone .constprop.3]>
    1574:	f4 01       	movw	r30, r8
    1576:	e0 82       	st	Z, r14
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	ca 94       	dec	r12
    157c:	cd 28       	or	r12, r13
    157e:	09 f0       	breq	.+2      	; 0x1582 <PS2dev::read(unsigned char*)+0x154>
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	87 15       	cp	r24, r7
    1584:	11 f0       	breq	.+4      	; 0x158a <PS2dev::read(unsigned char*)+0x15c>
    1586:	0e ef       	ldi	r16, 0xFE	; 254
    1588:	1f ef       	ldi	r17, 0xFF	; 255
    158a:	c8 01       	movw	r24, r16
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	ef 90       	pop	r14
    1598:	df 90       	pop	r13
    159a:	cf 90       	pop	r12
    159c:	bf 90       	pop	r11
    159e:	af 90       	pop	r10
    15a0:	9f 90       	pop	r9
    15a2:	8f 90       	pop	r8
    15a4:	7f 90       	pop	r7
    15a6:	6f 90       	pop	r6
    15a8:	08 95       	ret

000015aa <PS2dev::keyboard_init()>:
_ZN6PS2dev13keyboard_initEv():
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	ec 01       	movw	r28, r24
    15b0:	6a ea       	ldi	r22, 0xAA	; 170
    15b2:	ce 01       	movw	r24, r28
    15b4:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
    15b8:	89 2b       	or	r24, r25
    15ba:	d1 f7       	brne	.-12     	; 0x15b0 <PS2dev::keyboard_init()+0x6>
    15bc:	6a e0       	ldi	r22, 0x0A	; 10
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <delay>

000015cc <PS2dev::keyboard_mkbrk(unsigned char)>:
_ZN6PS2dev14keyboard_mkbrkEh():
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:307
  return 0;
}

// Presses then releases one of the non-special characters
int PS2dev::keyboard_mkbrk(unsigned char code)
{
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	ec 01       	movw	r28, r24
    15d4:	16 2f       	mov	r17, r22
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:308
  write(code);
    15d6:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:309
  write(0xF0);
    15da:	60 ef       	ldi	r22, 0xF0	; 240
    15dc:	ce 01       	movw	r24, r28
    15de:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:310
  write(code);
    15e2:	61 2f       	mov	r22, r17
    15e4:	ce 01       	movw	r24, r28
    15e6:	0e 94 56 09 	call	0x12ac	; 0x12ac <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:312
  return 0;
}
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	08 95       	ret

000015f6 <__vector_16>:
__vector_16():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    15f6:	1f 92       	push	r1
    15f8:	0f 92       	push	r0
    15fa:	0f b6       	in	r0, 0x3f	; 63
    15fc:	0f 92       	push	r0
    15fe:	11 24       	eor	r1, r1
    1600:	2f 93       	push	r18
    1602:	3f 93       	push	r19
    1604:	8f 93       	push	r24
    1606:	9f 93       	push	r25
    1608:	af 93       	push	r26
    160a:	bf 93       	push	r27
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    160c:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <timer0_millis>
    1610:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <timer0_millis+0x1>
    1614:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <timer0_millis+0x2>
    1618:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <timer0_millis+0x3>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    161c:	30 91 f5 03 	lds	r19, 0x03F5	; 0x8003f5 <timer0_fract>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1620:	26 e0       	ldi	r18, 0x06	; 6
    1622:	23 0f       	add	r18, r19
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1624:	2d 37       	cpi	r18, 0x7D	; 125
    1626:	68 f1       	brcs	.+90     	; 0x1682 <__vector_16+0x8c>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    1628:	29 e8       	ldi	r18, 0x89	; 137
    162a:	23 0f       	add	r18, r19
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    162c:	03 96       	adiw	r24, 0x03	; 3
    162e:	a1 1d       	adc	r26, r1
    1630:	b1 1d       	adc	r27, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1632:	20 93 f5 03 	sts	0x03F5, r18	; 0x8003f5 <timer0_fract>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1636:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <timer0_millis>
    163a:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <timer0_millis+0x1>
    163e:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <timer0_millis+0x2>
    1642:	b0 93 f9 03 	sts	0x03F9, r27	; 0x8003f9 <timer0_millis+0x3>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1646:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <timer0_overflow_count>
    164a:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <timer0_overflow_count+0x1>
    164e:	a0 91 f3 03 	lds	r26, 0x03F3	; 0x8003f3 <timer0_overflow_count+0x2>
    1652:	b0 91 f4 03 	lds	r27, 0x03F4	; 0x8003f4 <timer0_overflow_count+0x3>
    1656:	01 96       	adiw	r24, 0x01	; 1
    1658:	a1 1d       	adc	r26, r1
    165a:	b1 1d       	adc	r27, r1
    165c:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <timer0_overflow_count>
    1660:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <timer0_overflow_count+0x1>
    1664:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <timer0_overflow_count+0x2>
    1668:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <timer0_overflow_count+0x3>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    166c:	bf 91       	pop	r27
    166e:	af 91       	pop	r26
    1670:	9f 91       	pop	r25
    1672:	8f 91       	pop	r24
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1682:	02 96       	adiw	r24, 0x02	; 2
    1684:	a1 1d       	adc	r26, r1
    1686:	b1 1d       	adc	r27, r1
    1688:	d4 cf       	rjmp	.-88     	; 0x1632 <__vector_16+0x3c>

0000168a <millis>:
millis():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    168a:	2f b7       	in	r18, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    168c:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    168e:	60 91 f6 03 	lds	r22, 0x03F6	; 0x8003f6 <timer0_millis>
    1692:	70 91 f7 03 	lds	r23, 0x03F7	; 0x8003f7 <timer0_millis+0x1>
    1696:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <timer0_millis+0x2>
    169a:	90 91 f9 03 	lds	r25, 0x03F9	; 0x8003f9 <timer0_millis+0x3>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    169e:	2f bf       	out	0x3f, r18	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
    16a0:	08 95       	ret

000016a2 <micros>:
micros():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    16a2:	3f b7       	in	r19, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    16a4:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    16a6:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <timer0_overflow_count>
    16aa:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <timer0_overflow_count+0x1>
    16ae:	a0 91 f3 03 	lds	r26, 0x03F3	; 0x8003f3 <timer0_overflow_count+0x2>
    16b2:	b0 91 f4 03 	lds	r27, 0x03F4	; 0x8003f4 <timer0_overflow_count+0x3>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    16b6:	26 b5       	in	r18, 0x26	; 38
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    16b8:	a8 9b       	sbis	0x15, 0	; 21
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <micros+0x24>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
    16bc:	2f 3f       	cpi	r18, 0xFF	; 255
    16be:	19 f0       	breq	.+6      	; 0x16c6 <micros+0x24>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    16c0:	01 96       	adiw	r24, 0x01	; 1
    16c2:	a1 1d       	adc	r26, r1
    16c4:	b1 1d       	adc	r27, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    16c6:	3f bf       	out	0x3f, r19	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    16c8:	ba 2f       	mov	r27, r26
    16ca:	a9 2f       	mov	r26, r25
    16cc:	98 2f       	mov	r25, r24
    16ce:	88 27       	eor	r24, r24
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	62 0f       	add	r22, r18
    16d6:	71 1d       	adc	r23, r1
    16d8:	81 1d       	adc	r24, r1
    16da:	91 1d       	adc	r25, r1
    16dc:	43 e0       	ldi	r20, 0x03	; 3
    16de:	66 0f       	add	r22, r22
    16e0:	77 1f       	adc	r23, r23
    16e2:	88 1f       	adc	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	4a 95       	dec	r20
    16e8:	d1 f7       	brne	.-12     	; 0x16de <micros+0x3c>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    16ea:	08 95       	ret

000016ec <delay>:
delay():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    16ec:	8f 92       	push	r8
    16ee:	9f 92       	push	r9
    16f0:	af 92       	push	r10
    16f2:	bf 92       	push	r11
    16f4:	cf 92       	push	r12
    16f6:	df 92       	push	r13
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	6b 01       	movw	r12, r22
    16fe:	7c 01       	movw	r14, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    1700:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <micros>
    1704:	4b 01       	movw	r8, r22
    1706:	5c 01       	movw	r10, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    1708:	c1 14       	cp	r12, r1
    170a:	d1 04       	cpc	r13, r1
    170c:	e1 04       	cpc	r14, r1
    170e:	f1 04       	cpc	r15, r1
    1710:	e9 f0       	breq	.+58     	; 0x174c <delay+0x60>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:400
    yield();
    1712:	0e 94 ae 0c 	call	0x195c	; 0x195c <yield>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1716:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <micros>
    171a:	68 19       	sub	r22, r8
    171c:	79 09       	sbc	r23, r9
    171e:	8a 09       	sbc	r24, r10
    1720:	9b 09       	sbc	r25, r11
    1722:	68 3e       	cpi	r22, 0xE8	; 232
    1724:	73 40       	sbci	r23, 0x03	; 3
    1726:	81 05       	cpc	r24, r1
    1728:	91 05       	cpc	r25, r1
    172a:	70 f3       	brcs	.-36     	; 0x1708 <delay+0x1c>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    172c:	21 e0       	ldi	r18, 0x01	; 1
    172e:	c2 1a       	sub	r12, r18
    1730:	d1 08       	sbc	r13, r1
    1732:	e1 08       	sbc	r14, r1
    1734:	f1 08       	sbc	r15, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    1736:	88 ee       	ldi	r24, 0xE8	; 232
    1738:	88 0e       	add	r8, r24
    173a:	83 e0       	ldi	r24, 0x03	; 3
    173c:	98 1e       	adc	r9, r24
    173e:	a1 1c       	adc	r10, r1
    1740:	b1 1c       	adc	r11, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1742:	c1 14       	cp	r12, r1
    1744:	d1 04       	cpc	r13, r1
    1746:	e1 04       	cpc	r14, r1
    1748:	f1 04       	cpc	r15, r1
    174a:	29 f7       	brne	.-54     	; 0x1716 <delay+0x2a>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	df 90       	pop	r13
    1752:	cf 90       	pop	r12
    1754:	bf 90       	pop	r11
    1756:	af 90       	pop	r10
    1758:	9f 90       	pop	r9
    175a:	8f 90       	pop	r8
    175c:	08 95       	ret

0000175e <delayMicroseconds>:
delayMicroseconds():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
    175e:	00 00       	nop
    1760:	00 00       	nop
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
    1762:	83 30       	cpi	r24, 0x03	; 3
    1764:	91 05       	cpc	r25, r1
    1766:	28 f0       	brcs	.+10     	; 0x1772 <delayMicroseconds+0x14>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
    176c:	05 97       	sbiw	r24, 0x05	; 5
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <delayMicroseconds+0x10>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1772:	08 95       	ret

00001774 <init>:
init():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1774:	78 94       	sei
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1776:	84 b5       	in	r24, 0x24	; 36
    1778:	83 60       	ori	r24, 0x03	; 3
    177a:	84 bd       	out	0x24, r24	; 36
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    177c:	85 b5       	in	r24, 0x25	; 37
    177e:	83 60       	ori	r24, 0x03	; 3
    1780:	85 bd       	out	0x25, r24	; 37
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1782:	ee e6       	ldi	r30, 0x6E	; 110
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	81 60       	ori	r24, 0x01	; 1
    178a:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    178c:	e1 e8       	ldi	r30, 0x81	; 129
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	82 e0       	ldi	r24, 0x02	; 2
    1792:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1794:	80 81       	ld	r24, Z
    1796:	81 60       	ori	r24, 0x01	; 1
    1798:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    179a:	e0 e8       	ldi	r30, 0x80	; 128
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	81 60       	ori	r24, 0x01	; 1
    17a2:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    17a4:	e1 eb       	ldi	r30, 0xB1	; 177
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	84 60       	ori	r24, 0x04	; 4
    17ac:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    17ae:	e0 eb       	ldi	r30, 0xB0	; 176
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	81 60       	ori	r24, 0x01	; 1
    17b6:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    17b8:	86 e8       	ldi	r24, 0x86	; 134
    17ba:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    17be:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
    17c2:	08 95       	ret

000017c4 <turnOffPWM>:
turnOffPWM():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    17c4:	84 30       	cpi	r24, 0x04	; 4
    17c6:	81 f0       	breq	.+32     	; 0x17e8 <turnOffPWM+0x24>
    17c8:	28 f4       	brcc	.+10     	; 0x17d4 <turnOffPWM+0x10>
    17ca:	82 30       	cpi	r24, 0x02	; 2
    17cc:	e9 f0       	breq	.+58     	; 0x1808 <turnOffPWM+0x44>
    17ce:	83 30       	cpi	r24, 0x03	; 3
    17d0:	f9 f0       	breq	.+62     	; 0x1810 <turnOffPWM+0x4c>
    17d2:	08 95       	ret
    17d4:	88 30       	cpi	r24, 0x08	; 8
    17d6:	71 f0       	breq	.+28     	; 0x17f4 <turnOffPWM+0x30>
    17d8:	89 30       	cpi	r24, 0x09	; 9
    17da:	91 f0       	breq	.+36     	; 0x1800 <turnOffPWM+0x3c>
    17dc:	85 30       	cpi	r24, 0x05	; 5
    17de:	b9 f4       	brne	.+46     	; 0x180e <turnOffPWM+0x4a>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    17e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    17e4:	8f 7d       	andi	r24, 0xDF	; 223
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <turnOffPWM+0x2a>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    17e8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    17ec:	8f 77       	andi	r24, 0x7F	; 127
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    17ee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    17f2:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    17f4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    17f8:	8f 77       	andi	r24, 0x7F	; 127
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    17fa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
    17fe:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1800:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1804:	8f 7d       	andi	r24, 0xDF	; 223
    1806:	f9 cf       	rjmp	.-14     	; 0x17fa <turnOffPWM+0x36>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    1808:	84 b5       	in	r24, 0x24	; 36
    180a:	8f 77       	andi	r24, 0x7F	; 127
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    180c:	84 bd       	out	0x24, r24	; 36
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    180e:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1810:	84 b5       	in	r24, 0x24	; 36
    1812:	8f 7d       	andi	r24, 0xDF	; 223
    1814:	fb cf       	rjmp	.-10     	; 0x180c <turnOffPWM+0x48>

00001816 <pinMode>:
pinMode():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	fc 01       	movw	r30, r24
    181e:	e1 58       	subi	r30, 0x81	; 129
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	24 91       	lpm	r18, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1824:	8a 56       	subi	r24, 0x6A	; 106
    1826:	9f 4f       	sbci	r25, 0xFF	; 255
    1828:	fc 01       	movw	r30, r24
    182a:	84 91       	lpm	r24, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    182c:	88 23       	and	r24, r24
    182e:	c9 f0       	breq	.+50     	; 0x1862 <pinMode+0x4c>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	fc 01       	movw	r30, r24
    1838:	ef 53       	subi	r30, 0x3F	; 63
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	a5 91       	lpm	r26, Z+
    183e:	b4 91       	lpm	r27, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1840:	fc 01       	movw	r30, r24
    1842:	e9 54       	subi	r30, 0x49	; 73
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	c5 91       	lpm	r28, Z+
    1848:	d4 91       	lpm	r29, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    184a:	61 11       	cpse	r22, r1
    184c:	0d c0       	rjmp	.+26     	; 0x1868 <pinMode+0x52>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    184e:	9f b7       	in	r25, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    1850:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1852:	8c 91       	ld	r24, X
    1854:	20 95       	com	r18
    1856:	82 23       	and	r24, r18
    1858:	8c 93       	st	X, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    185a:	88 81       	ld	r24, Y
    185c:	28 23       	and	r18, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    185e:	28 83       	st	Y, r18
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1860:	9f bf       	out	0x3f, r25	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    1868:	62 30       	cpi	r22, 0x02	; 2
    186a:	51 f4       	brne	.+20     	; 0x1880 <pinMode+0x6a>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    186c:	9f b7       	in	r25, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    186e:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1870:	3c 91       	ld	r19, X
    1872:	82 2f       	mov	r24, r18
    1874:	80 95       	com	r24
    1876:	83 23       	and	r24, r19
    1878:	8c 93       	st	X, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    187a:	e8 81       	ld	r30, Y
    187c:	2e 2b       	or	r18, r30
    187e:	ef cf       	rjmp	.-34     	; 0x185e <pinMode+0x48>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1880:	8f b7       	in	r24, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    1882:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1884:	ec 91       	ld	r30, X
    1886:	2e 2b       	or	r18, r30
    1888:	2c 93       	st	X, r18
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    188a:	8f bf       	out	0x3f, r24	; 63
    188c:	ea cf       	rjmp	.-44     	; 0x1862 <pinMode+0x4c>

0000188e <digitalWrite>:
digitalWrite():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    188e:	1f 93       	push	r17
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	f9 01       	movw	r30, r18
    189a:	e8 59       	subi	r30, 0x98	; 152
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	84 91       	lpm	r24, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    18a0:	f9 01       	movw	r30, r18
    18a2:	e1 58       	subi	r30, 0x81	; 129
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	d4 91       	lpm	r29, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    18a8:	f9 01       	movw	r30, r18
    18aa:	ea 56       	subi	r30, 0x6A	; 106
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	c4 91       	lpm	r28, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    18b0:	cc 23       	and	r28, r28
    18b2:	a9 f0       	breq	.+42     	; 0x18de <digitalWrite+0x50>
    18b4:	16 2f       	mov	r17, r22
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    18b6:	81 11       	cpse	r24, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    18b8:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <turnOffPWM>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    18bc:	ec 2f       	mov	r30, r28
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	ee 0f       	add	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	e9 54       	subi	r30, 0x49	; 73
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	a5 91       	lpm	r26, Z+
    18ca:	b4 91       	lpm	r27, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    18cc:	8f b7       	in	r24, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    18ce:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    18d0:	ec 91       	ld	r30, X
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    18d2:	11 11       	cpse	r17, r1
    18d4:	08 c0       	rjmp	.+16     	; 0x18e6 <digitalWrite+0x58>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    18d6:	d0 95       	com	r29
    18d8:	de 23       	and	r29, r30
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    18da:	dc 93       	st	X, r29
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    18dc:	8f bf       	out	0x3f, r24	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:212
}
    18de:	df 91       	pop	r29
    18e0:	cf 91       	pop	r28
    18e2:	1f 91       	pop	r17
    18e4:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    18e6:	de 2b       	or	r29, r30
    18e8:	f8 cf       	rjmp	.-16     	; 0x18da <digitalWrite+0x4c>

000018ea <digitalRead>:
digitalRead():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	f9 01       	movw	r30, r18
    18f4:	e8 59       	subi	r30, 0x98	; 152
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	84 91       	lpm	r24, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    18fa:	f9 01       	movw	r30, r18
    18fc:	e1 58       	subi	r30, 0x81	; 129
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	d4 91       	lpm	r29, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    1902:	f9 01       	movw	r30, r18
    1904:	ea 56       	subi	r30, 0x6A	; 106
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	c4 91       	lpm	r28, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    190a:	cc 23       	and	r28, r28
    190c:	a1 f0       	breq	.+40     	; 0x1936 <digitalRead+0x4c>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    190e:	81 11       	cpse	r24, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    1910:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <turnOffPWM>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    1914:	ec 2f       	mov	r30, r28
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	e3 55       	subi	r30, 0x53	; 83
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	a5 91       	lpm	r26, Z+
    1922:	b4 91       	lpm	r27, Z
    1924:	ec 91       	ld	r30, X
    1926:	ed 23       	and	r30, r29
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	09 f4       	brne	.+2      	; 0x1930 <digitalRead+0x46>
    192e:	80 e0       	ldi	r24, 0x00	; 0
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	fa cf       	rjmp	.-12     	; 0x1930 <digitalRead+0x46>

0000193c <initVariant>:
initVariant():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    193c:	08 95       	ret

0000193e <main>:
main():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    193e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <init>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    1942:	0e 94 9e 0c 	call	0x193c	; 0x193c <initVariant>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1946:	0e 94 0e 02 	call	0x41c	; 0x41c <setup>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    194a:	c0 e0       	ldi	r28, 0x00	; 0
    194c:	d0 e0       	ldi	r29, 0x00	; 0
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    194e:	0e 94 80 03 	call	0x700	; 0x700 <loop>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1952:	20 97       	sbiw	r28, 0x00	; 0
    1954:	e1 f3       	breq	.-8      	; 0x194e <main+0x10>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1956:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    195a:	f9 cf       	rjmp	.-14     	; 0x194e <main+0x10>

0000195c <yield>:
__empty():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    195c:	08 95       	ret

0000195e <__udivmodhi4>:
__udivmodhi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    195e:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1960:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1962:	51 e1       	ldi	r21, 0x11	; 17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    1964:	07 c0       	rjmp	.+14     	; 0x1974 <__udivmodhi4_ep>

00001966 <__udivmodhi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    1966:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    1968:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    196a:	a6 17       	cp	r26, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    196c:	b7 07       	cpc	r27, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    196e:	10 f0       	brcs	.+4      	; 0x1974 <__udivmodhi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1970:	a6 1b       	sub	r26, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1972:	b7 0b       	sbc	r27, r23

00001974 <__udivmodhi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    1974:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    1976:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    1978:	5a 95       	dec	r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    197a:	a9 f7       	brne	.-22     	; 0x1966 <__udivmodhi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    197c:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    197e:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1980:	bc 01       	movw	r22, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1982:	cd 01       	movw	r24, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1984:	08 95       	ret

00001986 <__divmodhi4>:
__divmodhi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    1986:	97 fb       	bst	r25, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    1988:	07 2e       	mov	r0, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    198a:	16 f4       	brtc	.+4      	; 0x1990 <__divmodhi4+0xa>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    198c:	00 94       	com	r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    198e:	07 d0       	rcall	.+14     	; 0x199e <__divmodhi4_neg1>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    1990:	77 fd       	sbrc	r23, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    1992:	09 d0       	rcall	.+18     	; 0x19a6 <__divmodhi4_neg2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    1994:	0e 94 af 0c 	call	0x195e	; 0x195e <__udivmodhi4>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    1998:	07 fc       	sbrc	r0, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    199a:	05 d0       	rcall	.+10     	; 0x19a6 <__divmodhi4_neg2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    199c:	3e f4       	brtc	.+14     	; 0x19ac <__divmodhi4_exit>

0000199e <__divmodhi4_neg1>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    199e:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    19a0:	81 95       	neg	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    19a2:	9f 4f       	sbci	r25, 0xFF	; 255
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    19a4:	08 95       	ret

000019a6 <__divmodhi4_neg2>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    19a6:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    19a8:	61 95       	neg	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    19aa:	7f 4f       	sbci	r23, 0xFF	; 255

000019ac <__divmodhi4_exit>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    19ac:	08 95       	ret

000019ae <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    19ae:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    19b0:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    19b2:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    19b4:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    19b6:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    19b8:	09 94       	ijmp

000019ba <malloc>:
malloc():
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	82 30       	cpi	r24, 0x02	; 2
    19c4:	91 05       	cpc	r25, r1
    19c6:	10 f4       	brcc	.+4      	; 0x19cc <malloc+0x12>
    19c8:	82 e0       	ldi	r24, 0x02	; 2
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <__flp>
    19d0:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <__flp+0x1>
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	a0 e0       	ldi	r26, 0x00	; 0
    19dc:	30 97       	sbiw	r30, 0x00	; 0
    19de:	99 f4       	brne	.+38     	; 0x1a06 <malloc+0x4c>
    19e0:	21 15       	cp	r18, r1
    19e2:	31 05       	cpc	r19, r1
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <malloc+0x2e>
    19e6:	4a c0       	rjmp	.+148    	; 0x1a7c <malloc+0xc2>
    19e8:	28 1b       	sub	r18, r24
    19ea:	39 0b       	sbc	r19, r25
    19ec:	24 30       	cpi	r18, 0x04	; 4
    19ee:	31 05       	cpc	r19, r1
    19f0:	d8 f5       	brcc	.+118    	; 0x1a68 <malloc+0xae>
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	9b 81       	ldd	r25, Y+3	; 0x03
    19f6:	61 15       	cp	r22, r1
    19f8:	71 05       	cpc	r23, r1
    19fa:	89 f1       	breq	.+98     	; 0x1a5e <malloc+0xa4>
    19fc:	fb 01       	movw	r30, r22
    19fe:	93 83       	std	Z+3, r25	; 0x03
    1a00:	82 83       	std	Z+2, r24	; 0x02
    1a02:	fe 01       	movw	r30, r28
    1a04:	11 c0       	rjmp	.+34     	; 0x1a28 <malloc+0x6e>
    1a06:	40 81       	ld	r20, Z
    1a08:	51 81       	ldd	r21, Z+1	; 0x01
    1a0a:	02 81       	ldd	r16, Z+2	; 0x02
    1a0c:	13 81       	ldd	r17, Z+3	; 0x03
    1a0e:	48 17       	cp	r20, r24
    1a10:	59 07       	cpc	r21, r25
    1a12:	e0 f0       	brcs	.+56     	; 0x1a4c <malloc+0x92>
    1a14:	48 17       	cp	r20, r24
    1a16:	59 07       	cpc	r21, r25
    1a18:	99 f4       	brne	.+38     	; 0x1a40 <malloc+0x86>
    1a1a:	10 97       	sbiw	r26, 0x00	; 0
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <malloc+0x7c>
    1a1e:	12 96       	adiw	r26, 0x02	; 2
    1a20:	0c 93       	st	X, r16
    1a22:	12 97       	sbiw	r26, 0x02	; 2
    1a24:	13 96       	adiw	r26, 0x03	; 3
    1a26:	1c 93       	st	X, r17
    1a28:	32 96       	adiw	r30, 0x02	; 2
    1a2a:	cf 01       	movw	r24, r30
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	1f 91       	pop	r17
    1a32:	0f 91       	pop	r16
    1a34:	08 95       	ret
    1a36:	00 93 fc 03 	sts	0x03FC, r16	; 0x8003fc <__flp>
    1a3a:	10 93 fd 03 	sts	0x03FD, r17	; 0x8003fd <__flp+0x1>
    1a3e:	f4 cf       	rjmp	.-24     	; 0x1a28 <malloc+0x6e>
    1a40:	21 15       	cp	r18, r1
    1a42:	31 05       	cpc	r19, r1
    1a44:	51 f0       	breq	.+20     	; 0x1a5a <malloc+0xa0>
    1a46:	42 17       	cp	r20, r18
    1a48:	53 07       	cpc	r21, r19
    1a4a:	38 f0       	brcs	.+14     	; 0x1a5a <malloc+0xa0>
    1a4c:	a9 01       	movw	r20, r18
    1a4e:	db 01       	movw	r26, r22
    1a50:	9a 01       	movw	r18, r20
    1a52:	bd 01       	movw	r22, r26
    1a54:	df 01       	movw	r26, r30
    1a56:	f8 01       	movw	r30, r16
    1a58:	c1 cf       	rjmp	.-126    	; 0x19dc <malloc+0x22>
    1a5a:	ef 01       	movw	r28, r30
    1a5c:	f9 cf       	rjmp	.-14     	; 0x1a50 <malloc+0x96>
    1a5e:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <__flp+0x1>
    1a62:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <__flp>
    1a66:	cd cf       	rjmp	.-102    	; 0x1a02 <malloc+0x48>
    1a68:	fe 01       	movw	r30, r28
    1a6a:	e2 0f       	add	r30, r18
    1a6c:	f3 1f       	adc	r31, r19
    1a6e:	81 93       	st	Z+, r24
    1a70:	91 93       	st	Z+, r25
    1a72:	22 50       	subi	r18, 0x02	; 2
    1a74:	31 09       	sbc	r19, r1
    1a76:	39 83       	std	Y+1, r19	; 0x01
    1a78:	28 83       	st	Y, r18
    1a7a:	d7 cf       	rjmp	.-82     	; 0x1a2a <malloc+0x70>
    1a7c:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <__brkval>
    1a80:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <__brkval+0x1>
    1a84:	23 2b       	or	r18, r19
    1a86:	41 f4       	brne	.+16     	; 0x1a98 <malloc+0xde>
    1a88:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1a8c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1a90:	30 93 fb 03 	sts	0x03FB, r19	; 0x8003fb <__brkval+0x1>
    1a94:	20 93 fa 03 	sts	0x03FA, r18	; 0x8003fa <__brkval>
    1a98:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1a9c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1aa0:	21 15       	cp	r18, r1
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	41 f4       	brne	.+16     	; 0x1ab6 <malloc+0xfc>
    1aa6:	2d b7       	in	r18, 0x3d	; 61
    1aa8:	3e b7       	in	r19, 0x3e	; 62
    1aaa:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1aae:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1ab2:	24 1b       	sub	r18, r20
    1ab4:	35 0b       	sbc	r19, r21
    1ab6:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <__brkval>
    1aba:	f0 91 fb 03 	lds	r31, 0x03FB	; 0x8003fb <__brkval+0x1>
    1abe:	e2 17       	cp	r30, r18
    1ac0:	f3 07       	cpc	r31, r19
    1ac2:	a0 f4       	brcc	.+40     	; 0x1aec <malloc+0x132>
    1ac4:	2e 1b       	sub	r18, r30
    1ac6:	3f 0b       	sbc	r19, r31
    1ac8:	28 17       	cp	r18, r24
    1aca:	39 07       	cpc	r19, r25
    1acc:	78 f0       	brcs	.+30     	; 0x1aec <malloc+0x132>
    1ace:	ac 01       	movw	r20, r24
    1ad0:	4e 5f       	subi	r20, 0xFE	; 254
    1ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad4:	24 17       	cp	r18, r20
    1ad6:	35 07       	cpc	r19, r21
    1ad8:	48 f0       	brcs	.+18     	; 0x1aec <malloc+0x132>
    1ada:	4e 0f       	add	r20, r30
    1adc:	5f 1f       	adc	r21, r31
    1ade:	50 93 fb 03 	sts	0x03FB, r21	; 0x8003fb <__brkval+0x1>
    1ae2:	40 93 fa 03 	sts	0x03FA, r20	; 0x8003fa <__brkval>
    1ae6:	81 93       	st	Z+, r24
    1ae8:	91 93       	st	Z+, r25
    1aea:	9f cf       	rjmp	.-194    	; 0x1a2a <malloc+0x70>
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	e0 e0       	ldi	r30, 0x00	; 0
    1af0:	9c cf       	rjmp	.-200    	; 0x1a2a <malloc+0x70>

00001af2 <free>:
free():
    1af2:	cf 93       	push	r28
    1af4:	df 93       	push	r29
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	e9 f0       	breq	.+58     	; 0x1b34 <free+0x42>
    1afa:	fc 01       	movw	r30, r24
    1afc:	32 97       	sbiw	r30, 0x02	; 2
    1afe:	13 82       	std	Z+3, r1	; 0x03
    1b00:	12 82       	std	Z+2, r1	; 0x02
    1b02:	a0 91 fc 03 	lds	r26, 0x03FC	; 0x8003fc <__flp>
    1b06:	b0 91 fd 03 	lds	r27, 0x03FD	; 0x8003fd <__flp+0x1>
    1b0a:	ed 01       	movw	r28, r26
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	10 97       	sbiw	r26, 0x00	; 0
    1b12:	a1 f4       	brne	.+40     	; 0x1b3c <free+0x4a>
    1b14:	20 81       	ld	r18, Z
    1b16:	31 81       	ldd	r19, Z+1	; 0x01
    1b18:	82 0f       	add	r24, r18
    1b1a:	93 1f       	adc	r25, r19
    1b1c:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <__brkval>
    1b20:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <__brkval+0x1>
    1b24:	28 17       	cp	r18, r24
    1b26:	39 07       	cpc	r19, r25
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <free+0x3a>
    1b2a:	61 c0       	rjmp	.+194    	; 0x1bee <free+0xfc>
    1b2c:	f0 93 fb 03 	sts	0x03FB, r31	; 0x8003fb <__brkval+0x1>
    1b30:	e0 93 fa 03 	sts	0x03FA, r30	; 0x8003fa <__brkval>
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	08 95       	ret
    1b3a:	ea 01       	movw	r28, r20
    1b3c:	ce 17       	cp	r28, r30
    1b3e:	df 07       	cpc	r29, r31
    1b40:	e8 f5       	brcc	.+122    	; 0x1bbc <free+0xca>
    1b42:	4a 81       	ldd	r20, Y+2	; 0x02
    1b44:	5b 81       	ldd	r21, Y+3	; 0x03
    1b46:	9e 01       	movw	r18, r28
    1b48:	41 15       	cp	r20, r1
    1b4a:	51 05       	cpc	r21, r1
    1b4c:	b1 f7       	brne	.-20     	; 0x1b3a <free+0x48>
    1b4e:	e9 01       	movw	r28, r18
    1b50:	fb 83       	std	Y+3, r31	; 0x03
    1b52:	ea 83       	std	Y+2, r30	; 0x02
    1b54:	49 91       	ld	r20, Y+
    1b56:	59 91       	ld	r21, Y+
    1b58:	c4 0f       	add	r28, r20
    1b5a:	d5 1f       	adc	r29, r21
    1b5c:	ec 17       	cp	r30, r28
    1b5e:	fd 07       	cpc	r31, r29
    1b60:	61 f4       	brne	.+24     	; 0x1b7a <free+0x88>
    1b62:	80 81       	ld	r24, Z
    1b64:	91 81       	ldd	r25, Z+1	; 0x01
    1b66:	02 96       	adiw	r24, 0x02	; 2
    1b68:	84 0f       	add	r24, r20
    1b6a:	95 1f       	adc	r25, r21
    1b6c:	e9 01       	movw	r28, r18
    1b6e:	99 83       	std	Y+1, r25	; 0x01
    1b70:	88 83       	st	Y, r24
    1b72:	82 81       	ldd	r24, Z+2	; 0x02
    1b74:	93 81       	ldd	r25, Z+3	; 0x03
    1b76:	9b 83       	std	Y+3, r25	; 0x03
    1b78:	8a 83       	std	Y+2, r24	; 0x02
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	e0 e0       	ldi	r30, 0x00	; 0
    1b7e:	12 96       	adiw	r26, 0x02	; 2
    1b80:	8d 91       	ld	r24, X+
    1b82:	9c 91       	ld	r25, X
    1b84:	13 97       	sbiw	r26, 0x03	; 3
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	b9 f5       	brne	.+110    	; 0x1bf8 <free+0x106>
    1b8a:	2d 91       	ld	r18, X+
    1b8c:	3c 91       	ld	r19, X
    1b8e:	11 97       	sbiw	r26, 0x01	; 1
    1b90:	cd 01       	movw	r24, r26
    1b92:	02 96       	adiw	r24, 0x02	; 2
    1b94:	82 0f       	add	r24, r18
    1b96:	93 1f       	adc	r25, r19
    1b98:	20 91 fa 03 	lds	r18, 0x03FA	; 0x8003fa <__brkval>
    1b9c:	30 91 fb 03 	lds	r19, 0x03FB	; 0x8003fb <__brkval+0x1>
    1ba0:	28 17       	cp	r18, r24
    1ba2:	39 07       	cpc	r19, r25
    1ba4:	39 f6       	brne	.-114    	; 0x1b34 <free+0x42>
    1ba6:	30 97       	sbiw	r30, 0x00	; 0
    1ba8:	51 f5       	brne	.+84     	; 0x1bfe <free+0x10c>
    1baa:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <__flp+0x1>
    1bae:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <__flp>
    1bb2:	b0 93 fb 03 	sts	0x03FB, r27	; 0x8003fb <__brkval+0x1>
    1bb6:	a0 93 fa 03 	sts	0x03FA, r26	; 0x8003fa <__brkval>
    1bba:	bc cf       	rjmp	.-136    	; 0x1b34 <free+0x42>
    1bbc:	d3 83       	std	Z+3, r29	; 0x03
    1bbe:	c2 83       	std	Z+2, r28	; 0x02
    1bc0:	40 81       	ld	r20, Z
    1bc2:	51 81       	ldd	r21, Z+1	; 0x01
    1bc4:	84 0f       	add	r24, r20
    1bc6:	95 1f       	adc	r25, r21
    1bc8:	c8 17       	cp	r28, r24
    1bca:	d9 07       	cpc	r29, r25
    1bcc:	61 f4       	brne	.+24     	; 0x1be6 <free+0xf4>
    1bce:	4e 5f       	subi	r20, 0xFE	; 254
    1bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd2:	88 81       	ld	r24, Y
    1bd4:	99 81       	ldd	r25, Y+1	; 0x01
    1bd6:	48 0f       	add	r20, r24
    1bd8:	59 1f       	adc	r21, r25
    1bda:	51 83       	std	Z+1, r21	; 0x01
    1bdc:	40 83       	st	Z, r20
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	9b 81       	ldd	r25, Y+3	; 0x03
    1be2:	93 83       	std	Z+3, r25	; 0x03
    1be4:	82 83       	std	Z+2, r24	; 0x02
    1be6:	21 15       	cp	r18, r1
    1be8:	31 05       	cpc	r19, r1
    1bea:	09 f0       	breq	.+2      	; 0x1bee <free+0xfc>
    1bec:	b0 cf       	rjmp	.-160    	; 0x1b4e <free+0x5c>
    1bee:	f0 93 fd 03 	sts	0x03FD, r31	; 0x8003fd <__flp+0x1>
    1bf2:	e0 93 fc 03 	sts	0x03FC, r30	; 0x8003fc <__flp>
    1bf6:	9e cf       	rjmp	.-196    	; 0x1b34 <free+0x42>
    1bf8:	fd 01       	movw	r30, r26
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	c0 cf       	rjmp	.-128    	; 0x1b7e <free+0x8c>
    1bfe:	13 82       	std	Z+3, r1	; 0x03
    1c00:	12 82       	std	Z+2, r1	; 0x02
    1c02:	d7 cf       	rjmp	.-82     	; 0x1bb2 <free+0xc0>

00001c04 <memset>:
memset():
    1c04:	dc 01       	movw	r26, r24
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <memset+0x6>
    1c08:	6d 93       	st	X+, r22
    1c0a:	41 50       	subi	r20, 0x01	; 1
    1c0c:	50 40       	sbci	r21, 0x00	; 0
    1c0e:	e0 f7       	brcc	.-8      	; 0x1c08 <memset+0x4>
    1c10:	08 95       	ret

00001c12 <__do_global_dtors>:
__do_global_dtors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    1c12:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    1c14:	c7 e6       	ldi	r28, 0x67	; 103
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    1c16:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    1c18:	04 c0       	rjmp	.+8      	; 0x1c22 <__do_global_dtors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    1c1a:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    1c1c:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    1c20:	21 96       	adiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1c22:	c8 36       	cpi	r28, 0x68	; 104
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1c24:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1c26:	c9 f7       	brne	.-14     	; 0x1c1a <__do_global_dtors+0x8>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1c28:	f8 94       	cli

00001c2a <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1c2a:	ff cf       	rjmp	.-2      	; 0x1c2a <__stop_program>
