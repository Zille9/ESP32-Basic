
/var/folders/4x/zz52zwl12rv9btx1l4h1brfw0000gn/T/arduino_build_320387/CardKeyBoard_neu.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__dtors_end>
       4:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       8:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
       c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      10:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      14:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      18:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      1c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      20:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      24:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      28:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      2c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      30:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      34:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      38:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      3c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      40:	0c 94 ec 09 	jmp	0x13d8	; 0x13d8 <__vector_16>
      44:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      48:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      4c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      50:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      54:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      58:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      5c:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      60:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>
      64:	0c 94 90 00 	jmp	0x120	; 0x120 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 09       	sbc	r16, r0
      6c:	00 03       	mulsu	r16, r16
      6e:	02 00       	.word	0x0002	; ????
      70:	00 04       	cpc	r0, r0
      72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
      7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
      96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_input_PGM>:
      ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000b7 <port_to_output_PGM>:
      b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c1 <port_to_mode_PGM>:
      c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000cc <__ctors_start>:
__ctors_start():
      cc:	18 05       	cpc	r17, r8

000000ce <__ctors_end>:
__dtors_start():
      ce:	29 05       	cpc	r18, r9

000000d0 <__dtors_end>:
__dtors_end():
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	d8 e0       	ldi	r29, 0x08	; 8
      d8:	de bf       	out	0x3e, r29	; 62
      da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
__do_copy_data():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      dc:	13 e0       	ldi	r17, 0x03	; 3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      de:	a0 e0       	ldi	r26, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e0:	b1 e0       	ldi	r27, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e2:	ee e0       	ldi	r30, 0x0E	; 14
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e4:	fa e1       	ldi	r31, 0x1A	; 26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      e8:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      ea:	0d 92       	st	X+, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ec:	a2 3c       	cpi	r26, 0xC2	; 194
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      ee:	b1 07       	cpc	r27, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0xc>

000000f2 <__do_clear_bss>:
__do_clear_bss():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      f2:	23 e0       	ldi	r18, 0x03	; 3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      f4:	a2 ec       	ldi	r26, 0xC2	; 194
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      f6:	b3 e0       	ldi	r27, 0x03	; 3
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      fc:	a9 3f       	cpi	r26, 0xF9	; 249
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      fe:	b2 07       	cpc	r27, r18
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>

00000102 <__do_global_ctors>:
__do_global_ctors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     102:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     104:	c7 e6       	ldi	r28, 0x67	; 103
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     106:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     108:	04 c0       	rjmp	.+8      	; 0x112 <__do_global_ctors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     10a:	21 97       	sbiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10c:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     10e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     112:	c6 36       	cpi	r28, 0x66	; 102
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     114:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     116:	c9 f7       	brne	.-14     	; 0x10a <__do_global_ctors+0x8>
     118:	0e 94 90 0b 	call	0x1720	; 0x1720 <main>
     11c:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__do_global_dtors>

00000120 <__bad_interrupt>:
__vector_22():
     120:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000124 <findScanMap(unsigned char)>:
_Z11findScanMaph():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:232
};

uint8_t enabled = 0;              // PS/2 Host zum Senden bereit

// Durchsucht die Scan-Code-Konvertierungstabelle
int16_t findScanMap(uint8_t code) {
     124:	28 2f       	mov	r18, r24
     126:	e6 e0       	ldi	r30, 0x06	; 6
     128:	f1 e0       	ldi	r31, 0x01	; 1
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:234
  int16_t no = -1;
  for (int16_t i = 0; i < 121; i++) {
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	80 e0       	ldi	r24, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:235
    if (ScanMap[i][0] == code) {
     12e:	30 81       	ld	r19, Z
     130:	32 17       	cp	r19, r18
     132:	39 f0       	breq	.+14     	; 0x142 <findScanMap(unsigned char)+0x1e>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:234 (discriminator 2)
uint8_t enabled = 0;              // PS/2 Host zum Senden bereit

// Durchsucht die Scan-Code-Konvertierungstabelle
int16_t findScanMap(uint8_t code) {
  int16_t no = -1;
  for (int16_t i = 0; i < 121; i++) {
     134:	01 96       	adiw	r24, 0x01	; 1
     136:	33 96       	adiw	r30, 0x03	; 3
     138:	89 37       	cpi	r24, 0x79	; 121
     13a:	91 05       	cpc	r25, r1
     13c:	c1 f7       	brne	.-16     	; 0x12e <findScanMap(unsigned char)+0xa>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:233

uint8_t enabled = 0;              // PS/2 Host zum Senden bereit

// Durchsucht die Scan-Code-Konvertierungstabelle
int16_t findScanMap(uint8_t code) {
  int16_t no = -1;
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	9f ef       	ldi	r25, 0xFF	; 255
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:241
      no = i;
      break;
    }
  }
  return no;
}
     142:	08 95       	ret

00000144 <ack()>:
_Z3ackv():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:245

// PS/2 Sende eine Bestätigung an den Host
void ack() {
  while (keyboard.write(0xFA));
     144:	6a ef       	ldi	r22, 0xFA	; 250
     146:	83 ed       	ldi	r24, 0xD3	; 211
     148:	93 e0       	ldi	r25, 0x03	; 3
     14a:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
     14e:	89 2b       	or	r24, r25
     150:	c9 f7       	brne	.-14     	; 0x144 <ack()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:246
}
     152:	08 95       	ret

00000154 <keyboardcommand(int)>:
_Z15keyboardcommandi():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:249

// PS/2 Vom Host gesendete Befehle verarbeiten
int keyboardcommand(int command) {
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	1f 92       	push	r1
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:252
  unsigned char val;
  uint32_t tm;
  switch (command) {
     15e:	8d 5e       	subi	r24, 0xED	; 237
     160:	91 09       	sbc	r25, r1
     162:	83 31       	cpi	r24, 0x13	; 19
     164:	91 05       	cpc	r25, r1
     166:	08 f5       	brcc	.+66     	; 0x1aa <keyboardcommand(int)+0x56>
     168:	fc 01       	movw	r30, r24
     16a:	e7 54       	subi	r30, 0x47	; 71
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__tablejump2__>
     172:	ff 00       	.word	0x00ff	; ????
     174:	fd 00       	.word	0x00fd	; ????
     176:	d5 00       	.word	0x00d5	; ????
     178:	e4 00       	.word	0x00e4	; ????
     17a:	d5 00       	.word	0x00d5	; ????
     17c:	f0 00       	.word	0x00f0	; ????
     17e:	e4 00       	.word	0x00e4	; ????
     180:	e0 00       	.word	0x00e0	; ????
     182:	db 00       	.word	0x00db	; ????
     184:	dd 00       	.word	0x00dd	; ????
     186:	d5 00       	.word	0x00d5	; ????
     188:	d5 00       	.word	0x00d5	; ????
     18a:	d5 00       	.word	0x00d5	; ????
     18c:	d5 00       	.word	0x00d5	; ????
     18e:	d5 00       	.word	0x00d5	; ????
     190:	d5 00       	.word	0x00d5	; ????
     192:	d5 00       	.word	0x00d5	; ????
     194:	dd 00       	.word	0x00dd	; ????
     196:	cc 00       	.word	0x00cc	; ????
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:254
    case 0xFF:
      ack();// Reset: Befehl zum Zurücksetzen der Tastatur. Gibt ACK zurück, wenn es korrekt empfangen wurde.
     198:	0e 94 a2 00 	call	0x144	; 0x144 <ack()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:255
      while(keyboard.write(0xAA)!=0);
     19c:	6a ea       	ldi	r22, 0xAA	; 170
     19e:	83 ed       	ldi	r24, 0xD3	; 211
     1a0:	93 e0       	ldi	r25, 0x03	; 3
     1a2:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
     1a6:	89 2b       	or	r24, r25
     1a8:	c9 f7       	brne	.-14     	; 0x19c <keyboardcommand(int)+0x48>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:299
      ack();
      return 1;
      break;
  }
return 1;
}
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0f 90       	pop	r0
     1b0:	df 91       	pop	r29
     1b2:	cf 91       	pop	r28
     1b4:	08 95       	ret
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:266
      //enter stream mode
      ack();
      break;
    case 0xF5: //Kehre zum Startzustand zurück und stoppe den Keyscan
      //FM
      enabled = 0;
     1b6:	10 92 ce 03 	sts	0x03CE, r1	; 0x8003ce <enabled>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:276 (discriminator 1)
      enabled = 1;
      ack();
      break;
    case 0xF3: //set typematic rate/delay :
      ack();
      if(!keyboard.read(&val)) ack(); //do nothing with the rate
     1ba:	0e 94 a2 00 	call	0x144	; 0x144 <ack()>
     1be:	f5 cf       	rjmp	.-22     	; 0x1aa <keyboardcommand(int)+0x56>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:271
      enabled = 0;
      ack();
      break;
    case 0xF4: //Keyscan starten
      //FM
      enabled = 1;
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	80 93 ce 03 	sts	0x03CE, r24	; 0x8003ce <enabled>
     1c6:	f9 cf       	rjmp	.-14     	; 0x1ba <keyboardcommand(int)+0x66>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:275
      ack();
      break;
    case 0xF3: //set typematic rate/delay :
      ack();
     1c8:	0e 94 a2 00 	call	0x144	; 0x144 <ack()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:276
      if(!keyboard.read(&val)) ack(); //do nothing with the rate
     1cc:	be 01       	movw	r22, r28
     1ce:	6f 5f       	subi	r22, 0xFF	; 255
     1d0:	7f 4f       	sbci	r23, 0xFF	; 255
     1d2:	83 ed       	ldi	r24, 0xD3	; 211
     1d4:	93 e0       	ldi	r25, 0x03	; 3
     1d6:	0e 94 08 09 	call	0x1210	; 0x1210 <PS2dev::read(unsigned char*)>
     1da:	89 2b       	or	r24, r25
     1dc:	31 f7       	brne	.-52     	; 0x1aa <keyboardcommand(int)+0x56>
     1de:	ed cf       	rjmp	.-38     	; 0x1ba <keyboardcommand(int)+0x66>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:279
      break;
    case 0xF2: //get device id :
      ack();
     1e0:	0e 94 a2 00 	call	0x144	; 0x144 <ack()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:280
      keyboard.write(0xAB);
     1e4:	6b ea       	ldi	r22, 0xAB	; 171
     1e6:	83 ed       	ldi	r24, 0xD3	; 211
     1e8:	93 e0       	ldi	r25, 0x03	; 3
     1ea:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:281
      keyboard.write(0x83);
     1ee:	63 e8       	ldi	r22, 0x83	; 131
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:289
      ack();
      if(!keyboard.read(&val)) ack(); //do nothing with the rate
      break;
    case 0xEE: //echo :Wenn eine Tastatur angeschlossen ist, reagiert die Tastatur auf den Computer.（ECHO Response）Gib es zurück.
      //ack();
      keyboard.write(0xEE);
     1f0:	83 ed       	ldi	r24, 0xD3	; 211
     1f2:	93 e0       	ldi	r25, 0x03	; 3
     1f4:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:290
      break;
     1f8:	d8 cf       	rjmp	.-80     	; 0x1aa <keyboardcommand(int)+0x56>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:289
      ack();
      if(!keyboard.read(&val)) ack(); //do nothing with the rate
      break;
    case 0xEE: //echo :Wenn eine Tastatur angeschlossen ist, reagiert die Tastatur auf den Computer.（ECHO Response）Gib es zurück.
      //ack();
      keyboard.write(0xEE);
     1fa:	6e ee       	ldi	r22, 0xEE	; 238
     1fc:	f9 cf       	rjmp	.-14     	; 0x1f0 <keyboardcommand(int)+0x9c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:292
      break;
    case 0xED: //set/reset LEDs :Anfrage zum Ein-/Ausschalten der Tastatur-LED. Geben Sie die LED mit dem folgenden Optionsbyte an.
      ack();
     1fe:	0e 94 a2 00 	call	0x144	; 0x144 <ack()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:293
      if(!keyboard.read(&val)) ack();; //do nothing with the rate
     202:	be 01       	movw	r22, r28
     204:	6f 5f       	subi	r22, 0xFF	; 255
     206:	7f 4f       	sbci	r23, 0xFF	; 255
     208:	83 ed       	ldi	r24, 0xD3	; 211
     20a:	93 e0       	ldi	r25, 0x03	; 3
     20c:	0e 94 08 09 	call	0x1210	; 0x1210 <PS2dev::read(unsigned char*)>
     210:	89 2b       	or	r24, r25
     212:	99 f6       	brne	.-90     	; 0x1ba <keyboardcommand(int)+0x66>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:293 (discriminator 1)
     214:	0e 94 a2 00 	call	0x144	; 0x144 <ack()>
     218:	d0 cf       	rjmp	.-96     	; 0x1ba <keyboardcommand(int)+0x66>

0000021a <sendScanCode(int)>:
_Z12sendScanCodei():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:304
}

// Scancode senden
// break
// no : Datensatznummer der Scancode-Tabelle
void sendScanCode(int16_t no) {
     21a:	ef 92       	push	r14
     21c:	ff 92       	push	r15
     21e:	0f 93       	push	r16
     220:	1f 93       	push	r17
     222:	cf 93       	push	r28
     224:	df 93       	push	r29
     226:	8c 01       	movw	r16, r24
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:307

  // Code senden
  if (ScanMap[no][1] & 1) {
     228:	ec 01       	movw	r28, r24
     22a:	cc 0f       	add	r28, r28
     22c:	dd 1f       	adc	r29, r29
     22e:	fe 01       	movw	r30, r28
     230:	e0 0f       	add	r30, r16
     232:	f1 1f       	adc	r31, r17
     234:	ea 5f       	subi	r30, 0xFA	; 250
     236:	fe 4f       	sbci	r31, 0xFE	; 254
     238:	81 81       	ldd	r24, Z+1	; 0x01
     23a:	80 ff       	sbrs	r24, 0
     23c:	05 c0       	rjmp	.+10     	; 0x248 <sendScanCode(int)+0x2e>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:309
    // Wenn die Umschalttaste zusammen verwendet wird, senden Sie zuerst den Scancode der rechten Umschalttaste.
    keyboard.write(0x59);
     23e:	69 e5       	ldi	r22, 0x59	; 89
     240:	83 ed       	ldi	r24, 0xD3	; 211
     242:	93 e0       	ldi	r25, 0x03	; 3
     244:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:313
  }


  if (ScanMap[no][1] & 2) {
     248:	fe 01       	movw	r30, r28
     24a:	e0 0f       	add	r30, r16
     24c:	f1 1f       	adc	r31, r17
     24e:	ea 5f       	subi	r30, 0xFA	; 250
     250:	fe 4f       	sbci	r31, 0xFE	; 254
     252:	81 81       	ldd	r24, Z+1	; 0x01
     254:	81 ff       	sbrs	r24, 1
     256:	05 c0       	rjmp	.+10     	; 0x262 <sendScanCode(int)+0x48>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:315
    // 2-Byte-Scancode
    keyboard.write(0xe0);
     258:	60 ee       	ldi	r22, 0xE0	; 224
     25a:	83 ed       	ldi	r24, 0xD3	; 211
     25c:	93 e0       	ldi	r25, 0x03	; 3
     25e:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:319
  }

  //keyboard.write(ScanMap[no][2]);
  keyboard.keyboard_mkbrk(ScanMap[no][2]);
     262:	ce 01       	movw	r24, r28
     264:	80 0f       	add	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	9c 01       	movw	r18, r24
     26a:	2a 5f       	subi	r18, 0xFA	; 250
     26c:	3e 4f       	sbci	r19, 0xFE	; 254
     26e:	79 01       	movw	r14, r18
     270:	f9 01       	movw	r30, r18
     272:	62 81       	ldd	r22, Z+2	; 0x02
     274:	83 ed       	ldi	r24, 0xD3	; 211
     276:	93 e0       	ldi	r25, 0x03	; 3
     278:	0e 94 d7 09 	call	0x13ae	; 0x13ae <PS2dev::keyboard_mkbrk(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:320
  delay(10);
     27c:	6a e0       	ldi	r22, 0x0A	; 10
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 67 0a 	call	0x14ce	; 0x14ce <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:323

  // Break Code senden
  if (ScanMap[no][1] & 2) {
     288:	f7 01       	movw	r30, r14
     28a:	81 81       	ldd	r24, Z+1	; 0x01
     28c:	81 ff       	sbrs	r24, 1
     28e:	05 c0       	rjmp	.+10     	; 0x29a <sendScanCode(int)+0x80>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:325
    // 2-Byte-Scancode
    keyboard.write(0xe0);
     290:	60 ee       	ldi	r22, 0xE0	; 224
     292:	83 ed       	ldi	r24, 0xD3	; 211
     294:	93 e0       	ldi	r25, 0x03	; 3
     296:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:328
    
  }
  keyboard.write(0xf0);
     29a:	60 ef       	ldi	r22, 0xF0	; 240
     29c:	83 ed       	ldi	r24, 0xD3	; 211
     29e:	93 e0       	ldi	r25, 0x03	; 3
     2a0:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:329
  keyboard.write(ScanMap[no][2]);
     2a4:	c0 0f       	add	r28, r16
     2a6:	d1 1f       	adc	r29, r17
     2a8:	ca 5f       	subi	r28, 0xFA	; 250
     2aa:	de 4f       	sbci	r29, 0xFE	; 254
     2ac:	6a 81       	ldd	r22, Y+2	; 0x02
     2ae:	83 ed       	ldi	r24, 0xD3	; 211
     2b0:	93 e0       	ldi	r25, 0x03	; 3
     2b2:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:330
  delay(10);
     2b6:	6a e0       	ldi	r22, 0x0A	; 10
     2b8:	70 e0       	ldi	r23, 0x00	; 0
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 67 0a 	call	0x14ce	; 0x14ce <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:332

  if (ScanMap[no][1] & 1) {
     2c2:	89 81       	ldd	r24, Y+1	; 0x01
     2c4:	80 ff       	sbrs	r24, 0
     2c6:	0a c0       	rjmp	.+20     	; 0x2dc <sendScanCode(int)+0xc2>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:334
    // Wenn die Umschalttaste zusammen verwendet wird, senden Sie zuletzt den Scancode der rechten Umschalttaste.
    keyboard.write(0xf0);
     2c8:	60 ef       	ldi	r22, 0xF0	; 240
     2ca:	83 ed       	ldi	r24, 0xD3	; 211
     2cc:	93 e0       	ldi	r25, 0x03	; 3
     2ce:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:335
    keyboard.write(0x59);
     2d2:	69 e5       	ldi	r22, 0x59	; 89
     2d4:	83 ed       	ldi	r24, 0xD3	; 211
     2d6:	93 e0       	ldi	r25, 0x03	; 3
     2d8:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:337
  }
  delay(10);
     2dc:	6a e0       	ldi	r22, 0x0A	; 10
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:338
}
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:337
  if (ScanMap[no][1] & 1) {
    // Wenn die Umschalttaste zusammen verwendet wird, senden Sie zuletzt den Scancode der rechten Umschalttaste.
    keyboard.write(0xf0);
    keyboard.write(0x59);
  }
  delay(10);
     2f0:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <delay>

000002f4 <flashOn()>:
_Z7flashOnv():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:349
int _shift = 0, _fn = 0, _sym = 0, idle = 0;
unsigned char KEY = 0, hadPressed = 0;
int Mode = 0; //0->normal.1->shift 2->long_shift, 3->sym, 4->long_sym 5->fn,6->long_fn

void flashOn() {
  pixels.setPixelColor(0, pixels.Color(3, 3, 3)); pixels.show();
     2f4:	23 e0       	ldi	r18, 0x03	; 3
     2f6:	33 e0       	ldi	r19, 0x03	; 3
     2f8:	43 e0       	ldi	r20, 0x03	; 3
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	87 ed       	ldi	r24, 0xD7	; 215
     302:	93 e0       	ldi	r25, 0x03	; 3
     304:	0e 94 b7 07 	call	0xf6e	; 0xf6e <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)>
     308:	87 ed       	ldi	r24, 0xD7	; 215
     30a:	93 e0       	ldi	r25, 0x03	; 3
     30c:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <Adafruit_NeoPixel::show()>

00000310 <flashOff()>:
_Z8flashOffv():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:353
}

void flashOff() {
  pixels.setPixelColor(0, pixels.Color(0, 0, 0)); pixels.show();
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	a9 01       	movw	r20, r18
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	87 ed       	ldi	r24, 0xD7	; 215
     31c:	93 e0       	ldi	r25, 0x03	; 3
     31e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)>
     322:	87 ed       	ldi	r24, 0xD7	; 215
     324:	93 e0       	ldi	r25, 0x03	; 3
     326:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <Adafruit_NeoPixel::show()>

0000032a <setup>:
setup():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:359
}


void setup() {
  //Serial.begin(115200);
  pinMode(A3, OUTPUT);
     32a:	61 e0       	ldi	r22, 0x01	; 1
     32c:	81 e1       	ldi	r24, 0x11	; 17
     32e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <pinMode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:360
  pinMode(A2, OUTPUT);
     332:	61 e0       	ldi	r22, 0x01	; 1
     334:	80 e1       	ldi	r24, 0x10	; 16
     336:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <pinMode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:361
  pinMode(A1, OUTPUT);
     33a:	61 e0       	ldi	r22, 0x01	; 1
     33c:	8f e0       	ldi	r24, 0x0F	; 15
     33e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <pinMode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:362
  pinMode(A0, OUTPUT);
     342:	61 e0       	ldi	r22, 0x01	; 1
     344:	8e e0       	ldi	r24, 0x0E	; 14
     346:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <pinMode>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:363
  digitalWrite(A0, HIGH);
     34a:	61 e0       	ldi	r22, 0x01	; 1
     34c:	8e e0       	ldi	r24, 0x0E	; 14
     34e:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:364
  digitalWrite(A1, LOW);
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	8f e0       	ldi	r24, 0x0F	; 15
     356:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:365
  digitalWrite(A2, LOW);
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	80 e1       	ldi	r24, 0x10	; 16
     35e:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:366
  digitalWrite(A3, LOW);
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	81 e1       	ldi	r24, 0x11	; 17
     366:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:367
  DDRB = 0x00;
     36a:	14 b8       	out	0x04, r1	; 4
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:368
  PORTB = 0xff;
     36c:	8f ef       	ldi	r24, 0xFF	; 255
     36e:	85 b9       	out	0x05, r24	; 5
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:369
  DDRD = 0x00;
     370:	1a b8       	out	0x0a, r1	; 10
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:370
  PORTD = 0xff;
     372:	8b b9       	out	0x0b, r24	; 11
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:372

  pixels.begin();
     374:	87 ed       	ldi	r24, 0xD7	; 215
     376:	93 e0       	ldi	r25, 0x03	; 3
     378:	0e 94 3f 05 	call	0xa7e	; 0xa7e <Adafruit_NeoPixel::begin()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:373
  keyboard.keyboard_init();
     37c:	83 ed       	ldi	r24, 0xD3	; 211
     37e:	93 e0       	ldi	r25, 0x03	; 3
     380:	0c 94 c6 09 	jmp	0x138c	; 0x138c <PS2dev::keyboard_init()>

00000384 <GetInput()>:
_Z8GetInputv():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:379
  
}

unsigned char GetInput() {
  unsigned char k = 0;
  digitalWrite(A3, LOW);
     384:	60 e0       	ldi	r22, 0x00	; 0
     386:	81 e1       	ldi	r24, 0x11	; 17
     388:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:380
  digitalWrite(A2, HIGH);
     38c:	61 e0       	ldi	r22, 0x01	; 1
     38e:	80 e1       	ldi	r24, 0x10	; 16
     390:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:381
  digitalWrite(A1, HIGH);
     394:	61 e0       	ldi	r22, 0x01	; 1
     396:	8f e0       	ldi	r24, 0x0F	; 15
     398:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:382
  digitalWrite(A0, HIGH);
     39c:	61 e0       	ldi	r22, 0x01	; 1
     39e:	8e e0       	ldi	r24, 0x0E	; 14
     3a0:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:384
  //delay(2);
  if (PIND != 0xff) {
     3a4:	89 b1       	in	r24, 0x09	; 9
     3a6:	8f 3f       	cpi	r24, 0xFF	; 255
     3a8:	09 f4       	brne	.+2      	; 0x3ac <GetInput()+0x28>
     3aa:	44 c0       	rjmp	.+136    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:386
    //flashOn();
    switch (PIND)   {
     3ac:	89 b1       	in	r24, 0x09	; 9
     3ae:	8f 3e       	cpi	r24, 0xEF	; 239
     3b0:	09 f4       	brne	.+2      	; 0x3b4 <GetInput()+0x30>
     3b2:	57 c0       	rjmp	.+174    	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     3b4:	50 f4       	brcc	.+20     	; 0x3ca <GetInput()+0x46>
     3b6:	8f 3b       	cpi	r24, 0xBF	; 191
     3b8:	09 f4       	brne	.+2      	; 0x3bc <GetInput()+0x38>
     3ba:	57 c0       	rjmp	.+174    	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     3bc:	8f 3d       	cpi	r24, 0xDF	; 223
     3be:	09 f4       	brne	.+2      	; 0x3c2 <GetInput()+0x3e>
     3c0:	52 c0       	rjmp	.+164    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     3c2:	8f 37       	cpi	r24, 0x7F	; 127
     3c4:	49 f4       	brne	.+18     	; 0x3d8 <GetInput()+0x54>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:394
      case 251: k = 3; break; //2
      case 247: k = 4; break; //3
      case 239: k = 5; break; //4
      case 223: k = 6; break; //5
      case 191: k = 7; break; //6
      case 127: k =  8; break; //7
     3c6:	88 e0       	ldi	r24, 0x08	; 8
     3c8:	31 c0       	rjmp	.+98     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:386
  digitalWrite(A1, HIGH);
  digitalWrite(A0, HIGH);
  //delay(2);
  if (PIND != 0xff) {
    //flashOn();
    switch (PIND)   {
     3ca:	8b 3f       	cpi	r24, 0xFB	; 251
     3cc:	09 f4       	brne	.+2      	; 0x3d0 <GetInput()+0x4c>
     3ce:	45 c0       	rjmp	.+138    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     3d0:	30 f5       	brcc	.+76     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     3d2:	87 3f       	cpi	r24, 0xF7	; 247
     3d4:	09 f4       	brne	.+2      	; 0x3d8 <GetInput()+0x54>
     3d6:	43 c0       	rjmp	.+134    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:423
  if (k) {
    hadPressed = 1;
    return k;
  }

  digitalWrite(A3, HIGH);
     3d8:	61 e0       	ldi	r22, 0x01	; 1
     3da:	81 e1       	ldi	r24, 0x11	; 17
     3dc:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:424
  digitalWrite(A2,  LOW);
     3e0:	60 e0       	ldi	r22, 0x00	; 0
     3e2:	80 e1       	ldi	r24, 0x10	; 16
     3e4:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:425
  digitalWrite(A1, HIGH);
     3e8:	61 e0       	ldi	r22, 0x01	; 1
     3ea:	8f e0       	ldi	r24, 0x0F	; 15
     3ec:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:426
  digitalWrite(A0, HIGH);
     3f0:	61 e0       	ldi	r22, 0x01	; 1
     3f2:	8e e0       	ldi	r24, 0x0E	; 14
     3f4:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:428
  //delay(2);
  if (PIND != 0xff) {
     3f8:	89 b1       	in	r24, 0x09	; 9
     3fa:	8f 3f       	cpi	r24, 0xFF	; 255
     3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	69 c0       	rjmp	.+210    	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:431
    //flashOn();
    //delay(200);
    switch (PIND)   {
     400:	89 b1       	in	r24, 0x09	; 9
     402:	8f 3e       	cpi	r24, 0xEF	; 239
     404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     406:	7a c0       	rjmp	.+244    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     408:	a0 f5       	brcc	.+104    	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     40a:	8f 3b       	cpi	r24, 0xBF	; 191
     40c:	09 f4       	brne	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40e:	7a c0       	rjmp	.+244    	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     410:	8f 3d       	cpi	r24, 0xDF	; 223
     412:	09 f4       	brne	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	75 c0       	rjmp	.+234    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
     416:	8f 37       	cpi	r24, 0x7F	; 127
     418:	89 f5       	brne	.+98     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:439
      case 251: k = 15; break; //W
      case 247: k = 16; break; //E
      case 239: k = 17; break; //R
      case 223: k = 18; break; //T
      case 191: k = 19; break; //Y
      case 127: k = 20; break; //U
     41a:	84 e1       	ldi	r24, 0x14	; 20
     41c:	07 c0       	rjmp	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:386
  digitalWrite(A1, HIGH);
  digitalWrite(A0, HIGH);
  //delay(2);
  if (PIND != 0xff) {
    //flashOn();
    switch (PIND)   {
     41e:	8d 3f       	cpi	r24, 0xFD	; 253
     420:	21 f0       	breq	.+8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     422:	8e 3f       	cpi	r24, 0xFE	; 254
     424:	c9 f6       	brne	.-78     	; 0x3d8 <GetInput()+0x54>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:387
      case 254: k = 1; break; //ESC
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	01 c0       	rjmp	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:388
      case 253: k = 2; break; // 1
     42a:	82 e0       	ldi	r24, 0x02	; 2
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:553
    hadPressed = 0;
    return 255;
  }
  //flashOff();
  if (k) {
    hadPressed = 1;
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <hadPressed>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:554
    return k;
     432:	08 95       	ret
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:404
      hadPressed = 1;
      return k;
      }
    */
  }
  else if (PIND != 223) {
     434:	89 b1       	in	r24, 0x09	; 9
     436:	8f 3d       	cpi	r24, 0xDF	; 223
     438:	79 f2       	breq	.-98     	; 0x3d8 <GetInput()+0x54>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:407
    //flashOn();
    //delay(200);
    switch (PINB)   {
     43a:	83 b1       	in	r24, 0x03	; 3
     43c:	8b 3d       	cpi	r24, 0xDB	; 219
     43e:	59 f0       	breq	.+22     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     440:	20 f4       	brcc	.+8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     442:	87 3d       	cpi	r24, 0xD7	; 215
     444:	49 f6       	brne	.-110    	; 0x3d8 <GetInput()+0x54>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:411
      case 222: k = 9; break; //8
      case 221: k = 10; break; //9
      case 219: k = 11; break; //0
      case 215: k = 12; break; //Del
     446:	8c e0       	ldi	r24, 0x0C	; 12
     448:	f1 cf       	rjmp	.-30     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:407
    */
  }
  else if (PIND != 223) {
    //flashOn();
    //delay(200);
    switch (PINB)   {
     44a:	8d 3d       	cpi	r24, 0xDD	; 221
     44c:	81 f0       	breq	.+32     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     44e:	8e 3d       	cpi	r24, 0xDE	; 222
     450:	19 f6       	brne	.-122    	; 0x3d8 <GetInput()+0x54>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:408
      case 222: k = 9; break; //8
     452:	89 e0       	ldi	r24, 0x09	; 9
     454:	eb cf       	rjmp	.-42     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:410
      case 221: k = 10; break; //9
      case 219: k = 11; break; //0
     456:	8b e0       	ldi	r24, 0x0B	; 11
     458:	e9 cf       	rjmp	.-46     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:389
  if (PIND != 0xff) {
    //flashOn();
    switch (PIND)   {
      case 254: k = 1; break; //ESC
      case 253: k = 2; break; // 1
      case 251: k = 3; break; //2
     45a:	83 e0       	ldi	r24, 0x03	; 3
     45c:	e7 cf       	rjmp	.-50     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:390
      case 247: k = 4; break; //3
     45e:	84 e0       	ldi	r24, 0x04	; 4
     460:	e5 cf       	rjmp	.-54     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:391
      case 239: k = 5; break; //4
     462:	85 e0       	ldi	r24, 0x05	; 5
     464:	e3 cf       	rjmp	.-58     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:392
      case 223: k = 6; break; //5
     466:	86 e0       	ldi	r24, 0x06	; 6
     468:	e1 cf       	rjmp	.-62     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:393
      case 191: k = 7; break; //6
     46a:	87 e0       	ldi	r24, 0x07	; 7
     46c:	df cf       	rjmp	.-66     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:409
  else if (PIND != 223) {
    //flashOn();
    //delay(200);
    switch (PINB)   {
      case 222: k = 9; break; //8
      case 221: k = 10; break; //9
     46e:	8a e0       	ldi	r24, 0x0A	; 10
     470:	dd cf       	rjmp	.-70     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:431
  digitalWrite(A0, HIGH);
  //delay(2);
  if (PIND != 0xff) {
    //flashOn();
    //delay(200);
    switch (PIND)   {
     472:	8b 3f       	cpi	r24, 0xFB	; 251
     474:	61 f1       	breq	.+88     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     476:	28 f5       	brcc	.+74     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     478:	87 3f       	cpi	r24, 0xF7	; 247
     47a:	f1 f1       	breq	.+124    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:467
  }




  digitalWrite(A3, HIGH);
     47c:	61 e0       	ldi	r22, 0x01	; 1
     47e:	81 e1       	ldi	r24, 0x11	; 17
     480:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:468
  digitalWrite(A2, HIGH);
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	80 e1       	ldi	r24, 0x10	; 16
     488:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:469
  digitalWrite(A1, LOW);
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	8f e0       	ldi	r24, 0x0F	; 15
     490:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:470
  digitalWrite(A0, HIGH);
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	8e e0       	ldi	r24, 0x0E	; 14
     498:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:472
  //delay(2);
  if (PIND != 0xff) {
     49c:	89 b1       	in	r24, 0x09	; 9
     49e:	8f 3f       	cpi	r24, 0xFF	; 255
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4a2:	66 c0       	rjmp	.+204    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:475
    //flashOn();
    //delay(200);
    switch (PIND)   {
     4a4:	89 b1       	in	r24, 0x09	; 9
     4a6:	8f 3e       	cpi	r24, 0xEF	; 239
     4a8:	09 f4       	brne	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4aa:	77 c0       	rjmp	.+238    	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     4ac:	88 f5       	brcc	.+98     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
     4ae:	8f 3b       	cpi	r24, 0xBF	; 191
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
     4b2:	77 c0       	rjmp	.+238    	; 0x5a2 <__LOCK_REGION_LENGTH__+0x1a2>
     4b4:	8f 3d       	cpi	r24, 0xDF	; 223
     4b6:	09 f4       	brne	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b8:	72 c0       	rjmp	.+228    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
     4ba:	8f 37       	cpi	r24, 0x7F	; 127
     4bc:	71 f5       	brne	.+92     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:483
      case 251: k = 27; break; //A
      case 247: k = 28; break; //S
      case 239: k = 29; break; //D
      case 223: k = 30; break; //F
      case 191: k = 31; break; //G
      case 127: k =  32; break; //H
     4be:	80 e2       	ldi	r24, 0x20	; 32
     4c0:	b5 cf       	rjmp	.-150    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:431
  digitalWrite(A0, HIGH);
  //delay(2);
  if (PIND != 0xff) {
    //flashOn();
    //delay(200);
    switch (PIND)   {
     4c2:	8d 3f       	cpi	r24, 0xFD	; 253
     4c4:	09 f1       	breq	.+66     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     4c6:	8e 3f       	cpi	r24, 0xFE	; 254
     4c8:	c9 f6       	brne	.-78     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:432
      case 254: k = 13; break; //Tab
     4ca:	8d e0       	ldi	r24, 0x0D	; 13
     4cc:	af cf       	rjmp	.-162    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:434
      case 253: k = 14; break; //Q
      case 251: k = 15; break; //W
     4ce:	8f e0       	ldi	r24, 0x0F	; 15
     4d0:	ad cf       	rjmp	.-166    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:447
    //if (k) {
    //  hadPressed = 1;
    //  return k;
    // }
  }
  else if (PIND != 223) {
     4d2:	89 b1       	in	r24, 0x09	; 9
     4d4:	8f 3d       	cpi	r24, 0xDF	; 223
     4d6:	91 f2       	breq	.-92     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:449
    //flashOn();
    switch (PINB)   {
     4d8:	83 b1       	in	r24, 0x03	; 3
     4da:	8b 3d       	cpi	r24, 0xDB	; 219
     4dc:	59 f0       	breq	.+22     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
     4de:	20 f4       	brcc	.+8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4e0:	87 3d       	cpi	r24, 0xD7	; 215
     4e2:	61 f6       	brne	.-104    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:453
      case 222: k = 21; break; //I
      case 221: k = 22; break; //O
      case 219: k = 23; break; //P
      case 215: k = 24; break; //no key
     4e4:	88 e1       	ldi	r24, 0x18	; 24
     4e6:	a2 cf       	rjmp	.-188    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:449
    //  return k;
    // }
  }
  else if (PIND != 223) {
    //flashOn();
    switch (PINB)   {
     4e8:	8d 3d       	cpi	r24, 0xDD	; 221
     4ea:	81 f0       	breq	.+32     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     4ec:	8e 3d       	cpi	r24, 0xDE	; 222
     4ee:	31 f6       	brne	.-116    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:450
      case 222: k = 21; break; //I
     4f0:	85 e1       	ldi	r24, 0x15	; 21
     4f2:	9c cf       	rjmp	.-200    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:452
      case 221: k = 22; break; //O
      case 219: k = 23; break; //P
     4f4:	87 e1       	ldi	r24, 0x17	; 23
     4f6:	9a cf       	rjmp	.-204    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:435
    //delay(200);
    switch (PIND)   {
      case 254: k = 13; break; //Tab
      case 253: k = 14; break; //Q
      case 251: k = 15; break; //W
      case 247: k = 16; break; //E
     4f8:	80 e1       	ldi	r24, 0x10	; 16
     4fa:	98 cf       	rjmp	.-208    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:436
      case 239: k = 17; break; //R
     4fc:	81 e1       	ldi	r24, 0x11	; 17
     4fe:	96 cf       	rjmp	.-212    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:437
      case 223: k = 18; break; //T
     500:	82 e1       	ldi	r24, 0x12	; 18
     502:	94 cf       	rjmp	.-216    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:438
      case 191: k = 19; break; //Y
     504:	83 e1       	ldi	r24, 0x13	; 19
     506:	92 cf       	rjmp	.-220    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:433
  if (PIND != 0xff) {
    //flashOn();
    //delay(200);
    switch (PIND)   {
      case 254: k = 13; break; //Tab
      case 253: k = 14; break; //Q
     508:	8e e0       	ldi	r24, 0x0E	; 14
     50a:	90 cf       	rjmp	.-224    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:451
  }
  else if (PIND != 223) {
    //flashOn();
    switch (PINB)   {
      case 222: k = 21; break; //I
      case 221: k = 22; break; //O
     50c:	86 e1       	ldi	r24, 0x16	; 22
     50e:	8e cf       	rjmp	.-228    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:475
  digitalWrite(A0, HIGH);
  //delay(2);
  if (PIND != 0xff) {
    //flashOn();
    //delay(200);
    switch (PIND)   {
     510:	8b 3f       	cpi	r24, 0xFB	; 251
     512:	61 f1       	breq	.+88     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     514:	28 f5       	brcc	.+74     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
     516:	87 3f       	cpi	r24, 0xF7	; 247
     518:	f1 f1       	breq	.+124    	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:509
    hadPressed = 1;
    return k;

  }

  digitalWrite(A3, HIGH);
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	81 e1       	ldi	r24, 0x11	; 17
     51e:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:510
  digitalWrite(A2, HIGH);
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	80 e1       	ldi	r24, 0x10	; 16
     526:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:511
  digitalWrite(A1, HIGH);
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	8f e0       	ldi	r24, 0x0F	; 15
     52e:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:512
  digitalWrite(A0, LOW);
     532:	60 e0       	ldi	r22, 0x00	; 0
     534:	8e e0       	ldi	r24, 0x0E	; 14
     536:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:515
  //delay(2);

  if (PIND != 0xff) {
     53a:	89 b1       	in	r24, 0x09	; 9
     53c:	8f 3f       	cpi	r24, 0xFF	; 255
     53e:	09 f4       	brne	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
     540:	44 c0       	rjmp	.+136    	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:519
    //flashOn();
    //delay(200);

    switch (PIND)   {
     542:	89 b1       	in	r24, 0x09	; 9
     544:	8f 3e       	cpi	r24, 0xEF	; 239
     546:	09 f4       	brne	.+2      	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     548:	59 c0       	rjmp	.+178    	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
     54a:	88 f5       	brcc	.+98     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     54c:	8f 3b       	cpi	r24, 0xBF	; 191
     54e:	09 f4       	brne	.+2      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     550:	59 c0       	rjmp	.+178    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     552:	8f 3d       	cpi	r24, 0xDF	; 223
     554:	09 f4       	brne	.+2      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     556:	54 c0       	rjmp	.+168    	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     558:	8f 37       	cpi	r24, 0x7F	; 127
     55a:	71 f5       	brne	.+92     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:527
      case 251: k = 39; break; //Z
      case 247: k = 40; break; //X
      case 239: k = 41; break; //C
      case 223: k = 42; break; //V
      case 191: k = 43; break; //B
      case 127: k = 44; break; //N
     55c:	8c e2       	ldi	r24, 0x2C	; 44
     55e:	66 cf       	rjmp	.-308    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:475
  digitalWrite(A0, HIGH);
  //delay(2);
  if (PIND != 0xff) {
    //flashOn();
    //delay(200);
    switch (PIND)   {
     560:	8d 3f       	cpi	r24, 0xFD	; 253
     562:	09 f1       	breq	.+66     	; 0x5a6 <__LOCK_REGION_LENGTH__+0x1a6>
     564:	8e 3f       	cpi	r24, 0xFE	; 254
     566:	c9 f6       	brne	.-78     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:476
      case 254: k = 25; break; //left
     568:	89 e1       	ldi	r24, 0x19	; 25
     56a:	60 cf       	rjmp	.-320    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:478
      case 253: k = 26; break; //up
      case 251: k = 27; break; //A
     56c:	8b e1       	ldi	r24, 0x1B	; 27
     56e:	5e cf       	rjmp	.-324    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:492
    //  hadPressed = 1;
    //  return k;
    //}
  }

  else if (PIND != 223) {
     570:	89 b1       	in	r24, 0x09	; 9
     572:	8f 3d       	cpi	r24, 0xDF	; 223
     574:	91 f2       	breq	.-92     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:495
    //flashOn();
    //delay(200);
    switch (PINB)   {
     576:	83 b1       	in	r24, 0x03	; 3
     578:	8b 3d       	cpi	r24, 0xDB	; 219
     57a:	59 f0       	breq	.+22     	; 0x592 <__LOCK_REGION_LENGTH__+0x192>
     57c:	20 f4       	brcc	.+8      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     57e:	87 3d       	cpi	r24, 0xD7	; 215
     580:	61 f6       	brne	.-104    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:499
      case 222: k = 33; break; //J
      case 221: k = 34; break; //K
      case 219: k = 35; break; //L
      case 215: k = 36; break; //Enter
     582:	84 e2       	ldi	r24, 0x24	; 36
     584:	53 cf       	rjmp	.-346    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:495
  }

  else if (PIND != 223) {
    //flashOn();
    //delay(200);
    switch (PINB)   {
     586:	8d 3d       	cpi	r24, 0xDD	; 221
     588:	81 f0       	breq	.+32     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
     58a:	8e 3d       	cpi	r24, 0xDE	; 222
     58c:	31 f6       	brne	.-116    	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:496
      case 222: k = 33; break; //J
     58e:	81 e2       	ldi	r24, 0x21	; 33
     590:	4d cf       	rjmp	.-358    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:498
      case 221: k = 34; break; //K
      case 219: k = 35; break; //L
     592:	83 e2       	ldi	r24, 0x23	; 35
     594:	4b cf       	rjmp	.-362    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:479
    //delay(200);
    switch (PIND)   {
      case 254: k = 25; break; //left
      case 253: k = 26; break; //up
      case 251: k = 27; break; //A
      case 247: k = 28; break; //S
     596:	8c e1       	ldi	r24, 0x1C	; 28
     598:	49 cf       	rjmp	.-366    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:480
      case 239: k = 29; break; //D
     59a:	8d e1       	ldi	r24, 0x1D	; 29
     59c:	47 cf       	rjmp	.-370    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:481
      case 223: k = 30; break; //F
     59e:	8e e1       	ldi	r24, 0x1E	; 30
     5a0:	45 cf       	rjmp	.-374    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:482
      case 191: k = 31; break; //G
     5a2:	8f e1       	ldi	r24, 0x1F	; 31
     5a4:	43 cf       	rjmp	.-378    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:477
  if (PIND != 0xff) {
    //flashOn();
    //delay(200);
    switch (PIND)   {
      case 254: k = 25; break; //left
      case 253: k = 26; break; //up
     5a6:	8a e1       	ldi	r24, 0x1A	; 26
     5a8:	41 cf       	rjmp	.-382    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:497
  else if (PIND != 223) {
    //flashOn();
    //delay(200);
    switch (PINB)   {
      case 222: k = 33; break; //J
      case 221: k = 34; break; //K
     5aa:	82 e2       	ldi	r24, 0x22	; 34
     5ac:	3f cf       	rjmp	.-386    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:519

  if (PIND != 0xff) {
    //flashOn();
    //delay(200);

    switch (PIND)   {
     5ae:	8b 3f       	cpi	r24, 0xFB	; 251
     5b0:	51 f0       	breq	.+20     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     5b2:	18 f4       	brcc	.+6      	; 0x5ba <__LOCK_REGION_LENGTH__+0x1ba>
     5b4:	87 3f       	cpi	r24, 0xF7	; 247
     5b6:	01 f1       	breq	.+64     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:556
  //flashOff();
  if (k) {
    hadPressed = 1;
    return k;
  }
}
     5b8:	08 95       	ret
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:519

  if (PIND != 0xff) {
    //flashOn();
    //delay(200);

    switch (PIND)   {
     5ba:	8d 3f       	cpi	r24, 0xFD	; 253
     5bc:	29 f1       	breq	.+74     	; 0x608 <__LOCK_REGION_LENGTH__+0x208>
     5be:	8e 3f       	cpi	r24, 0xFE	; 254
     5c0:	d9 f7       	brne	.-10     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:520
      case 254: k = 37; break; //down
     5c2:	85 e2       	ldi	r24, 0x25	; 37
     5c4:	33 cf       	rjmp	.-410    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:522
      case 253: k = 38; break; //right
      case 251: k = 39; break; //Z
     5c6:	87 e2       	ldi	r24, 0x27	; 39
     5c8:	31 cf       	rjmp	.-414    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:536
    //if (k) {
    //  hadPressed = 1;
    //  return k;
    //}
  }
  else if (PIND != 223) {
     5ca:	89 b1       	in	r24, 0x09	; 9
     5cc:	8f 3d       	cpi	r24, 0xDF	; 223
     5ce:	81 f0       	breq	.+32     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:539
    //flashOn();
    //delay(200);
    switch (PINB)   {
     5d0:	83 b1       	in	r24, 0x03	; 3
     5d2:	8b 3d       	cpi	r24, 0xDB	; 219
     5d4:	59 f0       	breq	.+22     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5d6:	20 f4       	brcc	.+8      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5d8:	87 3d       	cpi	r24, 0xD7	; 215
     5da:	71 f7       	brne	.-36     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:543
      case 222: k = 45; break; //M
      case 221: k = 46; break; //,
      case 219: k = 47; break; //.
      case 215: k = 48; break; //Space
     5dc:	80 e3       	ldi	r24, 0x30	; 48
     5de:	26 cf       	rjmp	.-436    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:539
    //}
  }
  else if (PIND != 223) {
    //flashOn();
    //delay(200);
    switch (PINB)   {
     5e0:	8d 3d       	cpi	r24, 0xDD	; 221
     5e2:	a1 f0       	breq	.+40     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     5e4:	8e 3d       	cpi	r24, 0xDE	; 222
     5e6:	41 f7       	brne	.-48     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:540
      case 222: k = 45; break; //M
     5e8:	8d e2       	ldi	r24, 0x2D	; 45
     5ea:	20 cf       	rjmp	.-448    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:542
      case 221: k = 46; break; //,
      case 219: k = 47; break; //.
     5ec:	8f e2       	ldi	r24, 0x2F	; 47
     5ee:	1e cf       	rjmp	.-452    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:548
      case 215: k = 48; break; //Space
    }
  }

  else {
    hadPressed = 0;
     5f0:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <hadPressed>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:549
    return 255;
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	08 95       	ret
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:523

    switch (PIND)   {
      case 254: k = 37; break; //down
      case 253: k = 38; break; //right
      case 251: k = 39; break; //Z
      case 247: k = 40; break; //X
     5f8:	88 e2       	ldi	r24, 0x28	; 40
     5fa:	18 cf       	rjmp	.-464    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:524
      case 239: k = 41; break; //C
     5fc:	89 e2       	ldi	r24, 0x29	; 41
     5fe:	16 cf       	rjmp	.-468    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:525
      case 223: k = 42; break; //V
     600:	8a e2       	ldi	r24, 0x2A	; 42
     602:	14 cf       	rjmp	.-472    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:526
      case 191: k = 43; break; //B
     604:	8b e2       	ldi	r24, 0x2B	; 43
     606:	12 cf       	rjmp	.-476    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:521
    //flashOn();
    //delay(200);

    switch (PIND)   {
      case 254: k = 37; break; //down
      case 253: k = 38; break; //right
     608:	86 e2       	ldi	r24, 0x26	; 38
     60a:	10 cf       	rjmp	.-480    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:541
  else if (PIND != 223) {
    //flashOn();
    //delay(200);
    switch (PINB)   {
      case 222: k = 45; break; //M
      case 221: k = 46; break; //,
     60c:	8e e2       	ldi	r24, 0x2E	; 46
     60e:	0e cf       	rjmp	.-484    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>

00000610 <loop>:
loop():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:559
    return k;
  }
}


void loop() {
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	1f 92       	push	r1
     61a:	cd b7       	in	r28, 0x3d	; 61
     61c:	de b7       	in	r29, 0x3e	; 62
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:562
  unsigned char cmd;  // Vom Host gesendete Daten
  
  if(keyboard.available() || startup==0){
     61e:	83 ed       	ldi	r24, 0xD3	; 211
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <PS2dev::available()>
     626:	89 2b       	or	r24, r25
     628:	31 f4       	brne	.+12     	; 0x636 <loop+0x26>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:562 (discriminator 2)
     62a:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <startup>
     62e:	90 91 d0 03 	lds	r25, 0x03D0	; 0x8003d0 <startup+0x1>
     632:	89 2b       	or	r24, r25
     634:	31 f5       	brne	.+76     	; 0x682 <loop+0x72>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:563
      while (keyboard.read(&cmd)) ;
     636:	be 01       	movw	r22, r28
     638:	6f 5f       	subi	r22, 0xFF	; 255
     63a:	7f 4f       	sbci	r23, 0xFF	; 255
     63c:	83 ed       	ldi	r24, 0xD3	; 211
     63e:	93 e0       	ldi	r25, 0x03	; 3
     640:	0e 94 08 09 	call	0x1210	; 0x1210 <PS2dev::read(unsigned char*)>
     644:	89 2b       	or	r24, r25
     646:	b9 f7       	brne	.-18     	; 0x636 <loop+0x26>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:564
      startup = keyboardcommand(cmd);//a=keyboard.keyboard_reply(cmd,0);
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 aa 00 	call	0x154	; 0x154 <keyboardcommand(int)>
     650:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <startup+0x1>
     654:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <startup>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:565
      if(startup) {pixels.setPixelColor(0, pixels.Color(30, 0, 30)); pixels.show(); delay(500);} //zeigt Initialisierung mit lila LED an
     658:	89 2b       	or	r24, r25
     65a:	99 f0       	breq	.+38     	; 0x682 <loop+0x72>
     65c:	2e e1       	ldi	r18, 0x1E	; 30
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	a9 01       	movw	r20, r18
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	60 e0       	ldi	r22, 0x00	; 0
     666:	87 ed       	ldi	r24, 0xD7	; 215
     668:	93 e0       	ldi	r25, 0x03	; 3
     66a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)>
     66e:	87 ed       	ldi	r24, 0xD7	; 215
     670:	93 e0       	ldi	r25, 0x03	; 3
     672:	0e 94 bf 05 	call	0xb7e	; 0xb7e <Adafruit_NeoPixel::show()>
     676:	64 ef       	ldi	r22, 0xF4	; 244
     678:	71 e0       	ldi	r23, 0x01	; 1
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:568
  }
  
  if (shiftPressed)   {
     682:	1c 99       	sbic	0x03, 4	; 3
     684:	25 c0       	rjmp	.+74     	; 0x6d0 <loop+0xc0>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:569
    _sym = 0; _fn = 0; idle = 0;
     686:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <_sym+0x1>
     68a:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <_sym>
     68e:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <_fn+0x1>
     692:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <_fn>
     696:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <idle+0x1>
     69a:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <idle>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:571
    //while (shiftPressed)delay(1);
    if (_shift == 0)     {
     69e:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_shift>
     6a2:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_shift+0x1>
     6a6:	89 2b       	or	r24, r25
     6a8:	09 f0       	breq	.+2      	; 0x6ac <loop+0x9c>
     6aa:	7a c0       	rjmp	.+244    	; 0x7a0 <loop+0x190>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:572
      delay(300);
     6ac:	6c e2       	ldi	r22, 0x2C	; 44
     6ae:	71 e0       	ldi	r23, 0x01	; 1
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	0e 94 67 0a 	call	0x14ce	; 0x14ce <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:573
      if (shiftPressed)       {
     6b8:	1c 99       	sbic	0x03, 4	; 3
     6ba:	6f c0       	rjmp	.+222    	; 0x79a <loop+0x18a>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:574
        _shift = 2;
     6bc:	82 e0       	ldi	r24, 0x02	; 2
     6be:	90 e0       	ldi	r25, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:577
        Mode = 2;
      } else  {
        _shift = 1;
     6c0:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <_shift+0x1>
     6c4:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <_shift>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:578
        Mode = 1;
     6c8:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <__data_end+0x1>
     6cc:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <__data_end>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:597
        _shift = 0;
      }
    }
  }

  if (symPressed)   {
     6d0:	1f 99       	sbic	0x03, 7	; 3
     6d2:	27 c0       	rjmp	.+78     	; 0x722 <loop+0x112>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:598
    _shift = 0; _fn = 0; idle = 0;
     6d4:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <_shift+0x1>
     6d8:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <_shift>
     6dc:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <_fn+0x1>
     6e0:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <_fn>
     6e4:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <idle+0x1>
     6e8:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <idle>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:599
    if (_sym == 0)     {
     6ec:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_sym>
     6f0:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <_sym+0x1>
     6f4:	89 2b       	or	r24, r25
     6f6:	09 f0       	breq	.+2      	; 0x6fa <loop+0xea>
     6f8:	7e c0       	rjmp	.+252    	; 0x7f6 <loop+0x1e6>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:600
      delay(300);
     6fa:	6c e2       	ldi	r22, 0x2C	; 44
     6fc:	71 e0       	ldi	r23, 0x01	; 1
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	0e 94 67 0a 	call	0x14ce	; 0x14ce <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:601
      if (symPressed)       {
     706:	1f 99       	sbic	0x03, 7	; 3
     708:	6d c0       	rjmp	.+218    	; 0x7e4 <loop+0x1d4>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:602
        _sym = 2;
     70a:	82 e0       	ldi	r24, 0x02	; 2
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <_sym+0x1>
     712:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <_sym>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:603
        Mode = 4;
     716:	84 e0       	ldi	r24, 0x04	; 4
     718:	90 e0       	ldi	r25, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:606
      } else  {
        _sym = 1;
        Mode = 3;
     71a:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <__data_end+0x1>
     71e:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <__data_end>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:625
        _sym = 0;
      }
    }
  }

  if (fnPressed) {
     722:	1e 99       	sbic	0x03, 6	; 3
     724:	27 c0       	rjmp	.+78     	; 0x774 <loop+0x164>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:626
    _sym = 0; _shift = 0; idle = 0;
     726:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <_sym+0x1>
     72a:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <_sym>
     72e:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <_shift+0x1>
     732:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <_shift>
     736:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <idle+0x1>
     73a:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <idle>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:627
    if (_fn == 0) {
     73e:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_fn>
     742:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <_fn+0x1>
     746:	89 2b       	or	r24, r25
     748:	09 f0       	breq	.+2      	; 0x74c <loop+0x13c>
     74a:	82 c0       	rjmp	.+260    	; 0x850 <loop+0x240>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:628
      delay(300);
     74c:	6c e2       	ldi	r22, 0x2C	; 44
     74e:	71 e0       	ldi	r23, 0x01	; 1
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	0e 94 67 0a 	call	0x14ce	; 0x14ce <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:629
      if (fnPressed) {
     758:	1e 99       	sbic	0x03, 6	; 3
     75a:	71 c0       	rjmp	.+226    	; 0x83e <loop+0x22e>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:630
        _fn = 2;
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <_fn+0x1>
     764:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <_fn>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:631
        Mode = 6;
     768:	86 e0       	ldi	r24, 0x06	; 6
     76a:	90 e0       	ldi	r25, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:634
      } else  {
        _fn = 1;
        Mode = 5;
     76c:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <__data_end+0x1>
     770:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <__data_end>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:653
        _fn = 0;
      }
    }
  }

  switch (Mode)  {
     774:	e0 91 c2 03 	lds	r30, 0x03C2	; 0x8003c2 <__data_end>
     778:	f0 91 c3 03 	lds	r31, 0x03C3	; 0x8003c3 <__data_end+0x1>
     77c:	e7 30       	cpi	r30, 0x07	; 7
     77e:	f1 05       	cpc	r31, r1
     780:	08 f0       	brcs	.+2      	; 0x784 <loop+0x174>
     782:	a3 c0       	rjmp	.+326    	; 0x8ca <loop+0x2ba>
     784:	ea 53       	subi	r30, 0x3A	; 58
     786:	fc 4f       	sbci	r31, 0xFC	; 252
     788:	0c 94 c8 0b 	jmp	0x1790	; 0x1790 <__tablejump2__>
     78c:	5c 04       	cpc	r5, r12
     78e:	4c 04       	cpc	r4, r12
     790:	e4 04       	cpc	r14, r4
     792:	e9 04       	cpc	r14, r9
     794:	f9 04       	cpc	r15, r9
     796:	fe 04       	cpc	r15, r14
     798:	0e 05       	cpc	r16, r14
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:577
      delay(300);
      if (shiftPressed)       {
        _shift = 2;
        Mode = 2;
      } else  {
        _shift = 1;
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	90 cf       	rjmp	.-224    	; 0x6c0 <loop+0xb0>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:581
        Mode = 1;
      }
    } else {
      delay(300);
     7a0:	6c e2       	ldi	r22, 0x2C	; 44
     7a2:	71 e0       	ldi	r23, 0x01	; 1
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:582
      if (shiftPressed)       {
     7ac:	1c 99       	sbic	0x03, 4	; 3
     7ae:	06 c0       	rjmp	.+12     	; 0x7bc <loop+0x1ac>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:583
        if (_shift == 2)         {
     7b0:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <_shift>
     7b4:	90 91 cd 03 	lds	r25, 0x03CD	; 0x8003cd <_shift+0x1>
     7b8:	02 97       	sbiw	r24, 0x02	; 2
     7ba:	49 f4       	brne	.+18     	; 0x7ce <loop+0x1be>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:584
          Mode = 0;
     7bc:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <__data_end+0x1>
     7c0:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <__data_end>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:585
          _shift = 0;
     7c4:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <_shift+0x1>
     7c8:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <_shift>
     7cc:	81 cf       	rjmp	.-254    	; 0x6d0 <loop+0xc0>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:587
        } else  {
          Mode = 2;
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <__data_end+0x1>
     7d6:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <__data_end>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:588
          _shift = 2;
     7da:	90 93 cd 03 	sts	0x03CD, r25	; 0x8003cd <_shift+0x1>
     7de:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <_shift>
     7e2:	76 cf       	rjmp	.-276    	; 0x6d0 <loop+0xc0>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:605
      delay(300);
      if (symPressed)       {
        _sym = 2;
        Mode = 4;
      } else  {
        _sym = 1;
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <_sym+0x1>
     7ec:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <_sym>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:606
        Mode = 3;
     7f0:	83 e0       	ldi	r24, 0x03	; 3
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	92 cf       	rjmp	.-220    	; 0x71a <loop+0x10a>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:609
      }
    } else {
      delay(300);
     7f6:	6c e2       	ldi	r22, 0x2C	; 44
     7f8:	71 e0       	ldi	r23, 0x01	; 1
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 67 0a 	call	0x14ce	; 0x14ce <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:610
      if (symPressed)  {
     802:	1f 99       	sbic	0x03, 7	; 3
     804:	06 c0       	rjmp	.+12     	; 0x812 <loop+0x202>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:611
        if (_sym == 2)  {
     806:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_sym>
     80a:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <_sym+0x1>
     80e:	02 97       	sbiw	r24, 0x02	; 2
     810:	49 f4       	brne	.+18     	; 0x824 <loop+0x214>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:612
          Mode = 0;
     812:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <__data_end+0x1>
     816:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <__data_end>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:613
          _sym = 0;
     81a:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <_sym+0x1>
     81e:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <_sym>
     822:	7f cf       	rjmp	.-258    	; 0x722 <loop+0x112>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:615
        } else  {
          Mode = 4;
     824:	84 e0       	ldi	r24, 0x04	; 4
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <__data_end+0x1>
     82c:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <__data_end>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:616
          _sym = 2;
     830:	82 e0       	ldi	r24, 0x02	; 2
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <_sym+0x1>
     838:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <_sym>
     83c:	72 cf       	rjmp	.-284    	; 0x722 <loop+0x112>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:633
      delay(300);
      if (fnPressed) {
        _fn = 2;
        Mode = 6;
      } else  {
        _fn = 1;
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <_fn+0x1>
     846:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <_fn>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:634
        Mode = 5;
     84a:	85 e0       	ldi	r24, 0x05	; 5
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	8e cf       	rjmp	.-228    	; 0x76c <loop+0x15c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:637
      }
    } else  {
      delay(300);
     850:	6c e2       	ldi	r22, 0x2C	; 44
     852:	71 e0       	ldi	r23, 0x01	; 1
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 67 0a 	call	0x14ce	; 0x14ce <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:638
      if (fnPressed) {
     85c:	1e 99       	sbic	0x03, 6	; 3
     85e:	06 c0       	rjmp	.+12     	; 0x86c <loop+0x25c>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:639
        if (_fn == 2) {
     860:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <_fn>
     864:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <_fn+0x1>
     868:	02 97       	sbiw	r24, 0x02	; 2
     86a:	49 f4       	brne	.+18     	; 0x87e <loop+0x26e>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:640
          Mode = 0;
     86c:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <__data_end+0x1>
     870:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <__data_end>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:641
          _fn = 0;
     874:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <_fn+0x1>
     878:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <_fn>
     87c:	7b cf       	rjmp	.-266    	; 0x774 <loop+0x164>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:643
        } else {
          Mode = 6;
     87e:	86 e0       	ldi	r24, 0x06	; 6
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	90 93 c3 03 	sts	0x03C3, r25	; 0x8003c3 <__data_end+0x1>
     886:	80 93 c2 03 	sts	0x03C2, r24	; 0x8003c2 <__data_end>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:644
          _fn = 2;
     88a:	82 e0       	ldi	r24, 0x02	; 2
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	90 93 cb 03 	sts	0x03CB, r25	; 0x8003cb <_fn+0x1>
     892:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <_fn>
     896:	6e cf       	rjmp	.-292    	; 0x774 <loop+0x164>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:657

  switch (Mode)  {
    case 0://normal
      pixels.setPixelColor(0, pixels.Color(0, 0, 0)); break;
    case 1://shift
      if ((idle / 6) % 2 == 1)
     898:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <idle>
     89c:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <idle+0x1>
     8a0:	66 e0       	ldi	r22, 0x06	; 6
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__divmodhi4>
     8a8:	cb 01       	movw	r24, r22
     8aa:	62 e0       	ldi	r22, 0x02	; 2
     8ac:	70 e0       	ldi	r23, 0x00	; 0
     8ae:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__divmodhi4>
     8b2:	01 97       	sbiw	r24, 0x01	; 1
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <loop+0x2a8>
     8b6:	88 c0       	rjmp	.+272    	; 0x9c8 <__stack+0xc9>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:658
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	a9 01       	movw	r20, r18
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:676
      if ((idle / 6) % 2 == 1)
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
    case 6://long_fn
      pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	87 ed       	ldi	r24, 0xD7	; 215
     8c4:	93 e0       	ldi	r25, 0x03	; 3
     8c6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:679
  }

  pixels.show(); // This sends the updated pixel color to the hardware.
     8ca:	87 ed       	ldi	r24, 0xD7	; 215
     8cc:	93 e0       	ldi	r25, 0x03	; 3
     8ce:	0e 94 bf 05 	call	0xb7e	; 0xb7e <Adafruit_NeoPixel::show()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:681

  if (hadPressed == 0)   {
     8d2:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <hadPressed>
     8d6:	81 11       	cpse	r24, r1
     8d8:	04 c0       	rjmp	.+8      	; 0x8e2 <loop+0x2d2>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:682
    KEY = GetInput();
     8da:	0e 94 c2 01 	call	0x384	; 0x384 <GetInput()>
     8de:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <KEY>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:686
  }

  // PS/2 Scancode senden
  if (hadPressed) {
     8e2:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <hadPressed>
     8e6:	88 23       	and	r24, r24
     8e8:	09 f4       	brne	.+2      	; 0x8ec <loop+0x2dc>
     8ea:	52 c0       	rjmp	.+164    	; 0x990 <__stack+0x91>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:687
    uint8_t c = KeyMap[KEY - 1][Mode];
     8ec:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <KEY>
     8f0:	81 50       	subi	r24, 0x01	; 1
     8f2:	99 0b       	sbc	r25, r25
     8f4:	27 e0       	ldi	r18, 0x07	; 7
     8f6:	28 9f       	mul	r18, r24
     8f8:	f0 01       	movw	r30, r0
     8fa:	29 9f       	mul	r18, r25
     8fc:	f0 0d       	add	r31, r0
     8fe:	11 24       	eor	r1, r1
     900:	ef 58       	subi	r30, 0x8F	; 143
     902:	fd 4f       	sbci	r31, 0xFD	; 253
     904:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <__data_end>
     908:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <__data_end+0x1>
     90c:	e8 0f       	add	r30, r24
     90e:	f9 1f       	adc	r31, r25
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:688
    int16_t no = findScanMap(c);
     910:	80 81       	ld	r24, Z
     912:	0e 94 92 00 	call	0x124	; 0x124 <findScanMap(unsigned char)>
     916:	8c 01       	movw	r16, r24
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:689
    if (no >= 0) {
     918:	97 fd       	sbrc	r25, 7
     91a:	1b c0       	rjmp	.+54     	; 0x952 <__stack+0x53>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:690
      flashOn();
     91c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <flashOn()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:691
      sendScanCode(no);
     920:	c8 01       	movw	r24, r16
     922:	0e 94 0d 01 	call	0x21a	; 0x21a <sendScanCode(int)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:692
      if(old_no != no) {idle=0; delay(200);}            //erstes mal Taste - 200ms Verzögerung 
     926:	80 91 d1 03 	lds	r24, 0x03D1	; 0x8003d1 <old_no>
     92a:	90 91 d2 03 	lds	r25, 0x03D2	; 0x8003d2 <old_no+0x1>
     92e:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <idle+0x1>
     932:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <idle>
     936:	80 17       	cp	r24, r16
     938:	91 07       	cpc	r25, r17
     93a:	09 f4       	brne	.+2      	; 0x93e <__stack+0x3f>
     93c:	74 c0       	rjmp	.+232    	; 0xa26 <__stack+0x127>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:692 (discriminator 1)
     93e:	68 ec       	ldi	r22, 0xC8	; 200
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:693
      else {idle=0; delay(33);}                         //zweites bis n.tes mal Tastenrepeat 33ms
     946:	0e 94 67 0a 	call	0x14ce	; 0x14ce <delay>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:694
      old_no = no;
     94a:	10 93 d2 03 	sts	0x03D2, r17	; 0x8003d2 <old_no+0x1>
     94e:	00 93 d1 03 	sts	0x03D1, r16	; 0x8003d1 <old_no>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:696
    }
    flashOff();
     952:	0e 94 88 01 	call	0x310	; 0x310 <flashOff()>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:697
    if ((Mode == 1) || (Mode == 3) || (Mode == 5)) {
     956:	80 91 c2 03 	lds	r24, 0x03C2	; 0x8003c2 <__data_end>
     95a:	90 91 c3 03 	lds	r25, 0x03C3	; 0x8003c3 <__data_end+0x1>
     95e:	9c 01       	movw	r18, r24
     960:	2d 7f       	andi	r18, 0xFD	; 253
     962:	21 30       	cpi	r18, 0x01	; 1
     964:	31 05       	cpc	r19, r1
     966:	11 f0       	breq	.+4      	; 0x96c <__stack+0x6d>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:697 (discriminator 2)
     968:	05 97       	sbiw	r24, 0x05	; 5
     96a:	81 f4       	brne	.+32     	; 0x98c <__stack+0x8d>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:698
      Mode = 0;
     96c:	10 92 c3 03 	sts	0x03C3, r1	; 0x8003c3 <__data_end+0x1>
     970:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <__data_end>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:699
      _shift = 0;
     974:	10 92 cd 03 	sts	0x03CD, r1	; 0x8003cd <_shift+0x1>
     978:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <_shift>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:700
      _sym = 0;
     97c:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <_sym+0x1>
     980:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <_sym>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:701
      _fn = 0;
     984:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <_fn+0x1>
     988:	10 92 ca 03 	sts	0x03CA, r1	; 0x8003ca <_fn>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:703
    }
    hadPressed = 0;
     98c:	10 92 c4 03 	sts	0x03C4, r1	; 0x8003c4 <hadPressed>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:707

  }

  idle++;
     990:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <idle>
     994:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <idle+0x1>
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <idle+0x1>
     99e:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <idle>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:708
  if(idle > 300) {                                       //verhindert, das wenn man die gleiche Taste nach etwa 300ms nochmal drückt der Repeatmodus ausgeschaltet ist, das verhindert doppelte Zeichen
     9a2:	8d 32       	cpi	r24, 0x2D	; 45
     9a4:	91 40       	sbci	r25, 0x01	; 1
     9a6:	54 f0       	brlt	.+20     	; 0x9bc <__stack+0xbd>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:709
    old_no = 255;
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	90 93 d2 03 	sts	0x03D2, r25	; 0x8003d2 <old_no+0x1>
     9b0:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <old_no>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:710
    idle=0;
     9b4:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <idle+0x1>
     9b8:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <idle>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:714
  }
  //delay(dl);
  //flashOff();
}
     9bc:	0f 90       	pop	r0
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	08 95       	ret
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:662
      if ((idle / 6) % 2 == 1)
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(5, 0, 0)); break;
    case 2://long_shift
      pixels.setPixelColor(0, pixels.Color(5, 0, 0)); break;
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	45 e0       	ldi	r20, 0x05	; 5
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	76 cf       	rjmp	.-276    	; 0x8be <loop+0x2ae>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:664
    case 3://sym
      if ((idle / 6) % 2 == 1)
     9d2:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <idle>
     9d6:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <idle+0x1>
     9da:	66 e0       	ldi	r22, 0x06	; 6
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__divmodhi4>
     9e2:	cb 01       	movw	r24, r22
     9e4:	62 e0       	ldi	r22, 0x02	; 2
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__divmodhi4>
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	09 f4       	brne	.+2      	; 0x9f2 <__stack+0xf3>
     9f0:	63 cf       	rjmp	.-314    	; 0x8b8 <loop+0x2a8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:669
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(0, 5, 0)); break;
    case 4://long_sym
      pixels.setPixelColor(0, pixels.Color(0, 5, 0)); break;
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	35 e0       	ldi	r19, 0x05	; 5
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	61 cf       	rjmp	.-318    	; 0x8be <loop+0x2ae>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:671
    case 5://fn
      if ((idle / 6) % 2 == 1)
     9fc:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <idle>
     a00:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <idle+0x1>
     a04:	66 e0       	ldi	r22, 0x06	; 6
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__divmodhi4>
     a0c:	cb 01       	movw	r24, r22
     a0e:	62 e0       	ldi	r22, 0x02	; 2
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	0e 94 b4 0b 	call	0x1768	; 0x1768 <__divmodhi4>
     a16:	01 97       	sbiw	r24, 0x01	; 1
     a18:	09 f4       	brne	.+2      	; 0xa1c <__stack+0x11d>
     a1a:	4e cf       	rjmp	.-356    	; 0x8b8 <loop+0x2a8>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:676
        pixels.setPixelColor(0, pixels.Color(0, 0, 0));
      else
        pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
    case 6://long_fn
      pixels.setPixelColor(0, pixels.Color(0, 0, 5)); break;
     a1c:	25 e0       	ldi	r18, 0x05	; 5
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	4c cf       	rjmp	.-360    	; 0x8be <loop+0x2ae>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:693
    int16_t no = findScanMap(c);
    if (no >= 0) {
      flashOn();
      sendScanCode(no);
      if(old_no != no) {idle=0; delay(200);}            //erstes mal Taste - 200ms Verzögerung 
      else {idle=0; delay(33);}                         //zweites bis n.tes mal Tastenrepeat 33ms
     a26:	61 e2       	ldi	r22, 0x21	; 33
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	8b cf       	rjmp	.-234    	; 0x946 <__stack+0x47>

00000a30 <_GLOBAL__sub_I_pixels>:
_GLOBAL__sub_I_pixels():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:32
#define KB_DATA     A5  // PS/2 DATA 

#define PIN           13
#define NUMPIXELS      1

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
     a30:	22 e5       	ldi	r18, 0x52	; 82
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	4d e0       	ldi	r20, 0x0D	; 13
     a36:	61 e0       	ldi	r22, 0x01	; 1
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	87 ed       	ldi	r24, 0xD7	; 215
     a3c:	93 e0       	ldi	r25, 0x03	; 3
     a3e:	0e 94 97 07 	call	0xf2e	; 0xf2e <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned int, unsigned char, unsigned int)>
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:33
PS2dev keyboard(KB_CLK, KB_DATA); // PS/2
     a42:	43 e1       	ldi	r20, 0x13	; 19
     a44:	50 e0       	ldi	r21, 0x00	; 0
     a46:	62 e1       	ldi	r22, 0x12	; 18
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	83 ed       	ldi	r24, 0xD3	; 211
     a4c:	93 e0       	ldi	r25, 0x03	; 3
     a4e:	0c 94 37 08 	jmp	0x106e	; 0x106e <PS2dev::PS2dev(int, int)>

00000a52 <_GLOBAL__sub_D_pixels>:
_GLOBAL__sub_D_pixels():
/Users/Zille/Documents/Arduino/CardKeyBoard_PS2/CardKeyBoard_neu/CardKeyBoard_neu.ino:32
#define KB_DATA     A5  // PS/2 DATA 

#define PIN           13
#define NUMPIXELS      1

Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
     a52:	87 ed       	ldi	r24, 0xD7	; 215
     a54:	93 e0       	ldi	r25, 0x03	; 3
     a56:	0c 94 2d 05 	jmp	0xa5a	; 0xa5a <Adafruit_NeoPixel::~Adafruit_NeoPixel()>

00000a5a <Adafruit_NeoPixel::~Adafruit_NeoPixel()>:
_ZN17Adafruit_NeoPixelD2Ev():
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2127
    uint8_t *p;
    if(wOffset == rOffset) { // Is an RGB-type strip
      p = &pixels[n * 3];    // 3 bytes per pixel (ignore W)
    } else {                 // Is a WRGB-type strip
      p = &pixels[n * 4];    // 4 bytes per pixel
      p[wOffset] = w;        // Store W
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
     a5e:	ec 01       	movw	r28, r24
     a60:	88 85       	ldd	r24, Y+8	; 0x08
     a62:	99 85       	ldd	r25, Y+9	; 0x09
     a64:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <free>
     a68:	8e 81       	ldd	r24, Y+6	; 0x06
     a6a:	87 fd       	sbrc	r24, 7
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <Adafruit_NeoPixel::~Adafruit_NeoPixel()+0x1e>
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	df 91       	pop	r29
     a72:	cf 91       	pop	r28
     a74:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <pinMode>
     a78:	df 91       	pop	r29
     a7a:	cf 91       	pop	r28
     a7c:	08 95       	ret

00000a7e <Adafruit_NeoPixel::begin()>:
_ZN17Adafruit_NeoPixel5beginEv():
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	ec 01       	movw	r28, r24
     a84:	8e 81       	ldd	r24, Y+6	; 0x06
     a86:	87 fd       	sbrc	r24, 7
     a88:	07 c0       	rjmp	.+14     	; 0xa98 <Adafruit_NeoPixel::begin()+0x1a>
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <pinMode>
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	8e 81       	ldd	r24, Y+6	; 0x06
     a94:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	89 83       	std	Y+1, r24	; 0x01
     a9c:	df 91       	pop	r29
     a9e:	cf 91       	pop	r28
     aa0:	08 95       	ret

00000aa2 <Adafruit_NeoPixel::updateLength(unsigned int)>:
_ZN17Adafruit_NeoPixel12updateLengthEj():
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	0f 93       	push	r16
     aa8:	1f 93       	push	r17
     aaa:	cf 93       	push	r28
     aac:	df 93       	push	r29
     aae:	ec 01       	movw	r28, r24
     ab0:	7b 01       	movw	r14, r22
     ab2:	88 85       	ldd	r24, Y+8	; 0x08
     ab4:	99 85       	ldd	r25, Y+9	; 0x09
     ab6:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <free>
     aba:	9d 85       	ldd	r25, Y+13	; 0x0d
     abc:	8a 85       	ldd	r24, Y+10	; 0x0a
     abe:	98 17       	cp	r25, r24
     ac0:	01 f1       	breq	.+64     	; 0xb02 <Adafruit_NeoPixel::updateLength(unsigned int)+0x60>
     ac2:	84 e0       	ldi	r24, 0x04	; 4
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	8e 9d       	mul	r24, r14
     ac8:	80 01       	movw	r16, r0
     aca:	8f 9d       	mul	r24, r15
     acc:	10 0d       	add	r17, r0
     ace:	9e 9d       	mul	r25, r14
     ad0:	10 0d       	add	r17, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	1d 83       	std	Y+5, r17	; 0x05
     ad6:	0c 83       	std	Y+4, r16	; 0x04
     ad8:	c8 01       	movw	r24, r16
     ada:	0e 94 ce 0b 	call	0x179c	; 0x179c <malloc>
     ade:	99 87       	std	Y+9, r25	; 0x09
     ae0:	88 87       	std	Y+8, r24	; 0x08
     ae2:	00 97       	sbiw	r24, 0x00	; 0
     ae4:	89 f0       	breq	.+34     	; 0xb08 <Adafruit_NeoPixel::updateLength(unsigned int)+0x66>
     ae6:	a8 01       	movw	r20, r16
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <memset>
     af0:	fb 82       	std	Y+3, r15	; 0x03
     af2:	ea 82       	std	Y+2, r14	; 0x02
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	08 95       	ret
     b02:	83 e0       	ldi	r24, 0x03	; 3
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	df cf       	rjmp	.-66     	; 0xac6 <Adafruit_NeoPixel::updateLength(unsigned int)+0x24>
     b08:	1d 82       	std	Y+5, r1	; 0x05
     b0a:	1c 82       	std	Y+4, r1	; 0x04
     b0c:	1b 82       	std	Y+3, r1	; 0x03
     b0e:	1a 82       	std	Y+2, r1	; 0x02
     b10:	f1 cf       	rjmp	.-30     	; 0xaf4 <Adafruit_NeoPixel::updateLength(unsigned int)+0x52>

00000b12 <Adafruit_NeoPixel::updateType(unsigned int)>:
_ZN17Adafruit_NeoPixel10updateTypeEj():
     b12:	fc 01       	movw	r30, r24
     b14:	b5 85       	ldd	r27, Z+13	; 0x0d
     b16:	a2 85       	ldd	r26, Z+10	; 0x0a
     b18:	9b 01       	movw	r18, r22
     b1a:	86 e0       	ldi	r24, 0x06	; 6
     b1c:	36 95       	lsr	r19
     b1e:	27 95       	ror	r18
     b20:	8a 95       	dec	r24
     b22:	e1 f7       	brne	.-8      	; 0xb1c <Adafruit_NeoPixel::updateType(unsigned int)+0xa>
     b24:	23 70       	andi	r18, 0x03	; 3
     b26:	25 87       	std	Z+13, r18	; 0x0d
     b28:	cb 01       	movw	r24, r22
     b2a:	34 e0       	ldi	r19, 0x04	; 4
     b2c:	96 95       	lsr	r25
     b2e:	87 95       	ror	r24
     b30:	3a 95       	dec	r19
     b32:	e1 f7       	brne	.-8      	; 0xb2c <Adafruit_NeoPixel::updateType(unsigned int)+0x1a>
     b34:	83 70       	andi	r24, 0x03	; 3
     b36:	82 87       	std	Z+10, r24	; 0x0a
     b38:	ab 01       	movw	r20, r22
     b3a:	56 95       	lsr	r21
     b3c:	47 95       	ror	r20
     b3e:	56 95       	lsr	r21
     b40:	47 95       	ror	r20
     b42:	43 70       	andi	r20, 0x03	; 3
     b44:	43 87       	std	Z+11, r20	; 0x0b
     b46:	96 2f       	mov	r25, r22
     b48:	93 70       	andi	r25, 0x03	; 3
     b4a:	94 87       	std	Z+12, r25	; 0x0c
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	6f 3f       	cpi	r22, 0xFF	; 255
     b50:	71 05       	cpc	r23, r1
     b52:	11 f0       	breq	.+4      	; 0xb58 <Adafruit_NeoPixel::updateType(unsigned int)+0x46>
     b54:	08 f0       	brcs	.+2      	; 0xb58 <Adafruit_NeoPixel::updateType(unsigned int)+0x46>
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	90 83       	st	Z, r25
     b5a:	40 85       	ldd	r20, Z+8	; 0x08
     b5c:	51 85       	ldd	r21, Z+9	; 0x09
     b5e:	45 2b       	or	r20, r21
     b60:	69 f0       	breq	.+26     	; 0xb7c <Adafruit_NeoPixel::updateType(unsigned int)+0x6a>
     b62:	31 e0       	ldi	r19, 0x01	; 1
     b64:	ba 13       	cpse	r27, r26
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	28 13       	cpse	r18, r24
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	39 17       	cp	r19, r25
     b70:	29 f0       	breq	.+10     	; 0xb7c <Adafruit_NeoPixel::updateType(unsigned int)+0x6a>
     b72:	62 81       	ldd	r22, Z+2	; 0x02
     b74:	73 81       	ldd	r23, Z+3	; 0x03
     b76:	cf 01       	movw	r24, r30
     b78:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <Adafruit_NeoPixel::updateLength(unsigned int)>
     b7c:	08 95       	ret

00000b7e <Adafruit_NeoPixel::show()>:
_ZN17Adafruit_NeoPixel4showEv():
     b7e:	cf 92       	push	r12
     b80:	df 92       	push	r13
     b82:	ef 92       	push	r14
     b84:	ff 92       	push	r15
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	29 97       	sbiw	r28, 0x09	; 9
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	8c 01       	movw	r16, r24
     ba0:	dc 01       	movw	r26, r24
     ba2:	18 96       	adiw	r26, 0x08	; 8
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	89 2b       	or	r24, r25
     baa:	09 f4       	brne	.+2      	; 0xbae <Adafruit_NeoPixel::show()+0x30>
     bac:	97 c0       	rjmp	.+302    	; 0xcdc <headD+0x9e>
_ZN17Adafruit_NeoPixel7canShowEv():
     bae:	0e 94 42 0a 	call	0x1484	; 0x1484 <micros>
     bb2:	f8 01       	movw	r30, r16
     bb4:	c6 84       	ldd	r12, Z+14	; 0x0e
     bb6:	d7 84       	ldd	r13, Z+15	; 0x0f
     bb8:	e0 88       	ldd	r14, Z+16	; 0x10
     bba:	f1 88       	ldd	r15, Z+17	; 0x11
     bbc:	6c 19       	sub	r22, r12
     bbe:	7d 09       	sbc	r23, r13
     bc0:	8e 09       	sbc	r24, r14
     bc2:	9f 09       	sbc	r25, r15
_ZN17Adafruit_NeoPixel4showEv():
     bc4:	6c 32       	cpi	r22, 0x2C	; 44
     bc6:	71 40       	sbci	r23, 0x01	; 1
     bc8:	81 05       	cpc	r24, r1
     bca:	91 05       	cpc	r25, r1
     bcc:	80 f3       	brcs	.-32     	; 0xbae <Adafruit_NeoPixel::show()+0x30>
     bce:	f8 94       	cli
     bd0:	d8 01       	movw	r26, r16
     bd2:	14 96       	adiw	r26, 0x04	; 4
     bd4:	8d 91       	ld	r24, X+
     bd6:	9c 91       	ld	r25, X
     bd8:	15 97       	sbiw	r26, 0x05	; 5
     bda:	9a 83       	std	Y+2, r25	; 0x02
     bdc:	89 83       	std	Y+1, r24	; 0x01
     bde:	18 96       	adiw	r26, 0x08	; 8
     be0:	0d 90       	ld	r0, X+
     be2:	bc 91       	ld	r27, X
     be4:	a0 2d       	mov	r26, r0
     be6:	7d 01       	movw	r14, r26
     be8:	ef ef       	ldi	r30, 0xFF	; 255
     bea:	ee 1a       	sub	r14, r30
     bec:	fe 0a       	sbc	r15, r30
     bee:	8c 91       	ld	r24, X
     bf0:	89 87       	std	Y+9, r24	; 0x09
     bf2:	d8 01       	movw	r26, r16
     bf4:	8c 91       	ld	r24, X
     bf6:	52 96       	adiw	r26, 0x12	; 18
     bf8:	0d 90       	ld	r0, X+
     bfa:	bc 91       	ld	r27, X
     bfc:	a0 2d       	mov	r26, r0
     bfe:	88 23       	and	r24, r24
     c00:	09 f4       	brne	.+2      	; 0xc04 <Adafruit_NeoPixel::show()+0x86>
     c02:	34 c1       	rjmp	.+616    	; 0xe6c <headC+0x82>
     c04:	1d 82       	std	Y+5, r1	; 0x05
     c06:	ab 32       	cpi	r26, 0x2B	; 43
     c08:	b1 05       	cpc	r27, r1
     c0a:	09 f0       	breq	.+2      	; 0xc0e <Adafruit_NeoPixel::show()+0x90>
     c0c:	76 c0       	rjmp	.+236    	; 0xcfa <headD+0xbc>
     c0e:	9b b1       	in	r25, 0x0b	; 11
     c10:	f8 01       	movw	r30, r16
     c12:	84 89       	ldd	r24, Z+20	; 0x14
     c14:	98 2b       	or	r25, r24
     c16:	98 87       	std	Y+8, r25	; 0x08
     c18:	9b b1       	in	r25, 0x0b	; 11
     c1a:	80 95       	com	r24
     c1c:	89 23       	and	r24, r25
     c1e:	8f 83       	std	Y+7, r24	; 0x07
     c20:	8f 81       	ldd	r24, Y+7	; 0x07
     c22:	8e 83       	std	Y+6, r24	; 0x06
     c24:	89 85       	ldd	r24, Y+9	; 0x09
     c26:	87 ff       	sbrs	r24, 7
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <Adafruit_NeoPixel::show()+0xb0>
     c2a:	88 85       	ldd	r24, Y+8	; 0x08
     c2c:	8e 83       	std	Y+6, r24	; 0x06
     c2e:	58 85       	ldd	r21, Y+8	; 0x08
     c30:	6f 81       	ldd	r22, Y+7	; 0x07
     c32:	49 85       	ldd	r20, Y+9	; 0x09
     c34:	3e 81       	ldd	r19, Y+6	; 0x06
     c36:	2d 81       	ldd	r18, Y+5	; 0x05
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	9a 81       	ldd	r25, Y+2	; 0x02
     c3c:	d7 01       	movw	r26, r14

00000c3e <headD>:
     c3e:	5b b9       	out	0x0b, r21	; 11
     c40:	26 2f       	mov	r18, r22
     c42:	3b b9       	out	0x0b, r19	; 11
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <headD+0x8>
     c46:	46 fd       	sbrc	r20, 6
     c48:	25 2f       	mov	r18, r21
     c4a:	6b b9       	out	0x0b, r22	; 11
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <headD+0x10>
     c4e:	5b b9       	out	0x0b, r21	; 11
     c50:	36 2f       	mov	r19, r22
     c52:	2b b9       	out	0x0b, r18	; 11
     c54:	00 c0       	rjmp	.+0      	; 0xc56 <headD+0x18>
     c56:	45 fd       	sbrc	r20, 5
     c58:	35 2f       	mov	r19, r21
     c5a:	6b b9       	out	0x0b, r22	; 11
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <headD+0x20>
     c5e:	5b b9       	out	0x0b, r21	; 11
     c60:	26 2f       	mov	r18, r22
     c62:	3b b9       	out	0x0b, r19	; 11
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <headD+0x28>
     c66:	44 fd       	sbrc	r20, 4
     c68:	25 2f       	mov	r18, r21
     c6a:	6b b9       	out	0x0b, r22	; 11
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <headD+0x30>
     c6e:	5b b9       	out	0x0b, r21	; 11
     c70:	36 2f       	mov	r19, r22
     c72:	2b b9       	out	0x0b, r18	; 11
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <headD+0x38>
     c76:	43 fd       	sbrc	r20, 3
     c78:	35 2f       	mov	r19, r21
     c7a:	6b b9       	out	0x0b, r22	; 11
     c7c:	00 c0       	rjmp	.+0      	; 0xc7e <headD+0x40>
     c7e:	5b b9       	out	0x0b, r21	; 11
     c80:	26 2f       	mov	r18, r22
     c82:	3b b9       	out	0x0b, r19	; 11
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <headD+0x48>
     c86:	42 fd       	sbrc	r20, 2
     c88:	25 2f       	mov	r18, r21
     c8a:	6b b9       	out	0x0b, r22	; 11
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <headD+0x50>
     c8e:	5b b9       	out	0x0b, r21	; 11
     c90:	36 2f       	mov	r19, r22
     c92:	2b b9       	out	0x0b, r18	; 11
     c94:	00 c0       	rjmp	.+0      	; 0xc96 <headD+0x58>
     c96:	41 fd       	sbrc	r20, 1
     c98:	35 2f       	mov	r19, r21
     c9a:	6b b9       	out	0x0b, r22	; 11
     c9c:	00 c0       	rjmp	.+0      	; 0xc9e <headD+0x60>
     c9e:	5b b9       	out	0x0b, r21	; 11
     ca0:	26 2f       	mov	r18, r22
     ca2:	3b b9       	out	0x0b, r19	; 11
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <headD+0x68>
     ca6:	40 fd       	sbrc	r20, 0
     ca8:	25 2f       	mov	r18, r21
     caa:	6b b9       	out	0x0b, r22	; 11
     cac:	01 97       	sbiw	r24, 0x01	; 1
     cae:	5b b9       	out	0x0b, r21	; 11
     cb0:	36 2f       	mov	r19, r22
     cb2:	2b b9       	out	0x0b, r18	; 11
     cb4:	4d 91       	ld	r20, X+
     cb6:	47 fd       	sbrc	r20, 7
     cb8:	35 2f       	mov	r19, r21
     cba:	6b b9       	out	0x0b, r22	; 11
     cbc:	01 f6       	brne	.-128    	; 0xc3e <headD>
     cbe:	49 87       	std	Y+9, r20	; 0x09
     cc0:	3e 83       	std	Y+6, r19	; 0x06
     cc2:	2d 83       	std	Y+5, r18	; 0x05
     cc4:	9a 83       	std	Y+2, r25	; 0x02
     cc6:	89 83       	std	Y+1, r24	; 0x01
     cc8:	78 94       	sei
     cca:	0e 94 42 0a 	call	0x1484	; 0x1484 <micros>
     cce:	d8 01       	movw	r26, r16
     cd0:	1e 96       	adiw	r26, 0x0e	; 14
     cd2:	6d 93       	st	X+, r22
     cd4:	7d 93       	st	X+, r23
     cd6:	8d 93       	st	X+, r24
     cd8:	9c 93       	st	X, r25
     cda:	51 97       	sbiw	r26, 0x11	; 17
     cdc:	29 96       	adiw	r28, 0x09	; 9
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	08 95       	ret
     cfa:	a5 32       	cpi	r26, 0x25	; 37
     cfc:	b1 05       	cpc	r27, r1
     cfe:	09 f0       	breq	.+2      	; 0xd02 <headD+0xc4>
     d00:	59 c0       	rjmp	.+178    	; 0xdb4 <headB+0x82>
     d02:	95 b1       	in	r25, 0x05	; 5
     d04:	f8 01       	movw	r30, r16
     d06:	84 89       	ldd	r24, Z+20	; 0x14
     d08:	98 2b       	or	r25, r24
     d0a:	98 87       	std	Y+8, r25	; 0x08
     d0c:	95 b1       	in	r25, 0x05	; 5
     d0e:	80 95       	com	r24
     d10:	89 23       	and	r24, r25
     d12:	8f 83       	std	Y+7, r24	; 0x07
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	8e 83       	std	Y+6, r24	; 0x06
     d18:	89 85       	ldd	r24, Y+9	; 0x09
     d1a:	87 ff       	sbrs	r24, 7
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <headD+0xe4>
     d1e:	88 85       	ldd	r24, Y+8	; 0x08
     d20:	8e 83       	std	Y+6, r24	; 0x06
     d22:	58 85       	ldd	r21, Y+8	; 0x08
     d24:	6f 81       	ldd	r22, Y+7	; 0x07
     d26:	49 85       	ldd	r20, Y+9	; 0x09
     d28:	3e 81       	ldd	r19, Y+6	; 0x06
     d2a:	2d 81       	ldd	r18, Y+5	; 0x05
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	9a 81       	ldd	r25, Y+2	; 0x02
     d30:	d7 01       	movw	r26, r14

00000d32 <headB>:
     d32:	55 b9       	out	0x05, r21	; 5
     d34:	26 2f       	mov	r18, r22
     d36:	35 b9       	out	0x05, r19	; 5
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <headB+0x8>
     d3a:	46 fd       	sbrc	r20, 6
     d3c:	25 2f       	mov	r18, r21
     d3e:	65 b9       	out	0x05, r22	; 5
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <headB+0x10>
     d42:	55 b9       	out	0x05, r21	; 5
     d44:	36 2f       	mov	r19, r22
     d46:	25 b9       	out	0x05, r18	; 5
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <headB+0x18>
     d4a:	45 fd       	sbrc	r20, 5
     d4c:	35 2f       	mov	r19, r21
     d4e:	65 b9       	out	0x05, r22	; 5
     d50:	00 c0       	rjmp	.+0      	; 0xd52 <headB+0x20>
     d52:	55 b9       	out	0x05, r21	; 5
     d54:	26 2f       	mov	r18, r22
     d56:	35 b9       	out	0x05, r19	; 5
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <headB+0x28>
     d5a:	44 fd       	sbrc	r20, 4
     d5c:	25 2f       	mov	r18, r21
     d5e:	65 b9       	out	0x05, r22	; 5
     d60:	00 c0       	rjmp	.+0      	; 0xd62 <headB+0x30>
     d62:	55 b9       	out	0x05, r21	; 5
     d64:	36 2f       	mov	r19, r22
     d66:	25 b9       	out	0x05, r18	; 5
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <headB+0x38>
     d6a:	43 fd       	sbrc	r20, 3
     d6c:	35 2f       	mov	r19, r21
     d6e:	65 b9       	out	0x05, r22	; 5
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <headB+0x40>
     d72:	55 b9       	out	0x05, r21	; 5
     d74:	26 2f       	mov	r18, r22
     d76:	35 b9       	out	0x05, r19	; 5
     d78:	00 c0       	rjmp	.+0      	; 0xd7a <headB+0x48>
     d7a:	42 fd       	sbrc	r20, 2
     d7c:	25 2f       	mov	r18, r21
     d7e:	65 b9       	out	0x05, r22	; 5
     d80:	00 c0       	rjmp	.+0      	; 0xd82 <headB+0x50>
     d82:	55 b9       	out	0x05, r21	; 5
     d84:	36 2f       	mov	r19, r22
     d86:	25 b9       	out	0x05, r18	; 5
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <headB+0x58>
     d8a:	41 fd       	sbrc	r20, 1
     d8c:	35 2f       	mov	r19, r21
     d8e:	65 b9       	out	0x05, r22	; 5
     d90:	00 c0       	rjmp	.+0      	; 0xd92 <headB+0x60>
     d92:	55 b9       	out	0x05, r21	; 5
     d94:	26 2f       	mov	r18, r22
     d96:	35 b9       	out	0x05, r19	; 5
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <headB+0x68>
     d9a:	40 fd       	sbrc	r20, 0
     d9c:	25 2f       	mov	r18, r21
     d9e:	65 b9       	out	0x05, r22	; 5
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	55 b9       	out	0x05, r21	; 5
     da4:	36 2f       	mov	r19, r22
     da6:	25 b9       	out	0x05, r18	; 5
     da8:	4d 91       	ld	r20, X+
     daa:	47 fd       	sbrc	r20, 7
     dac:	35 2f       	mov	r19, r21
     dae:	65 b9       	out	0x05, r22	; 5
     db0:	01 f6       	brne	.-128    	; 0xd32 <headB>
     db2:	85 cf       	rjmp	.-246    	; 0xcbe <headD+0x80>
     db4:	98 97       	sbiw	r26, 0x28	; 40
     db6:	09 f0       	breq	.+2      	; 0xdba <headB+0x88>
     db8:	87 cf       	rjmp	.-242    	; 0xcc8 <headD+0x8a>
     dba:	98 b1       	in	r25, 0x08	; 8
     dbc:	f8 01       	movw	r30, r16
     dbe:	84 89       	ldd	r24, Z+20	; 0x14
     dc0:	98 2b       	or	r25, r24
     dc2:	98 87       	std	Y+8, r25	; 0x08
     dc4:	98 b1       	in	r25, 0x08	; 8
     dc6:	80 95       	com	r24
     dc8:	89 23       	and	r24, r25
     dca:	8f 83       	std	Y+7, r24	; 0x07
     dcc:	8f 81       	ldd	r24, Y+7	; 0x07
     dce:	8e 83       	std	Y+6, r24	; 0x06
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	87 ff       	sbrs	r24, 7
     dd4:	02 c0       	rjmp	.+4      	; 0xdda <headB+0xa8>
     dd6:	88 85       	ldd	r24, Y+8	; 0x08
     dd8:	8e 83       	std	Y+6, r24	; 0x06
     dda:	58 85       	ldd	r21, Y+8	; 0x08
     ddc:	6f 81       	ldd	r22, Y+7	; 0x07
     dde:	49 85       	ldd	r20, Y+9	; 0x09
     de0:	3e 81       	ldd	r19, Y+6	; 0x06
     de2:	2d 81       	ldd	r18, Y+5	; 0x05
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	d7 01       	movw	r26, r14

00000dea <headC>:
     dea:	58 b9       	out	0x08, r21	; 8
     dec:	26 2f       	mov	r18, r22
     dee:	38 b9       	out	0x08, r19	; 8
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <headC+0x8>
     df2:	46 fd       	sbrc	r20, 6
     df4:	25 2f       	mov	r18, r21
     df6:	68 b9       	out	0x08, r22	; 8
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <headC+0x10>
     dfa:	58 b9       	out	0x08, r21	; 8
     dfc:	36 2f       	mov	r19, r22
     dfe:	28 b9       	out	0x08, r18	; 8
     e00:	00 c0       	rjmp	.+0      	; 0xe02 <headC+0x18>
     e02:	45 fd       	sbrc	r20, 5
     e04:	35 2f       	mov	r19, r21
     e06:	68 b9       	out	0x08, r22	; 8
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <headC+0x20>
     e0a:	58 b9       	out	0x08, r21	; 8
     e0c:	26 2f       	mov	r18, r22
     e0e:	38 b9       	out	0x08, r19	; 8
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <headC+0x28>
     e12:	44 fd       	sbrc	r20, 4
     e14:	25 2f       	mov	r18, r21
     e16:	68 b9       	out	0x08, r22	; 8
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <headC+0x30>
     e1a:	58 b9       	out	0x08, r21	; 8
     e1c:	36 2f       	mov	r19, r22
     e1e:	28 b9       	out	0x08, r18	; 8
     e20:	00 c0       	rjmp	.+0      	; 0xe22 <headC+0x38>
     e22:	43 fd       	sbrc	r20, 3
     e24:	35 2f       	mov	r19, r21
     e26:	68 b9       	out	0x08, r22	; 8
     e28:	00 c0       	rjmp	.+0      	; 0xe2a <headC+0x40>
     e2a:	58 b9       	out	0x08, r21	; 8
     e2c:	26 2f       	mov	r18, r22
     e2e:	38 b9       	out	0x08, r19	; 8
     e30:	00 c0       	rjmp	.+0      	; 0xe32 <headC+0x48>
     e32:	42 fd       	sbrc	r20, 2
     e34:	25 2f       	mov	r18, r21
     e36:	68 b9       	out	0x08, r22	; 8
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <headC+0x50>
     e3a:	58 b9       	out	0x08, r21	; 8
     e3c:	36 2f       	mov	r19, r22
     e3e:	28 b9       	out	0x08, r18	; 8
     e40:	00 c0       	rjmp	.+0      	; 0xe42 <headC+0x58>
     e42:	41 fd       	sbrc	r20, 1
     e44:	35 2f       	mov	r19, r21
     e46:	68 b9       	out	0x08, r22	; 8
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <headC+0x60>
     e4a:	58 b9       	out	0x08, r21	; 8
     e4c:	26 2f       	mov	r18, r22
     e4e:	38 b9       	out	0x08, r19	; 8
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <headC+0x68>
     e52:	40 fd       	sbrc	r20, 0
     e54:	25 2f       	mov	r18, r21
     e56:	68 b9       	out	0x08, r22	; 8
     e58:	01 97       	sbiw	r24, 0x01	; 1
     e5a:	58 b9       	out	0x08, r21	; 8
     e5c:	36 2f       	mov	r19, r22
     e5e:	28 b9       	out	0x08, r18	; 8
     e60:	4d 91       	ld	r20, X+
     e62:	47 fd       	sbrc	r20, 7
     e64:	35 2f       	mov	r19, r21
     e66:	68 b9       	out	0x08, r22	; 8
     e68:	01 f6       	brne	.-128    	; 0xdea <headC>
     e6a:	29 cf       	rjmp	.-430    	; 0xcbe <headD+0x80>
     e6c:	9c 91       	ld	r25, X
     e6e:	f8 01       	movw	r30, r16
     e70:	84 89       	ldd	r24, Z+20	; 0x14
     e72:	98 2b       	or	r25, r24
     e74:	98 87       	std	Y+8, r25	; 0x08
     e76:	9c 91       	ld	r25, X
     e78:	80 95       	com	r24
     e7a:	89 23       	and	r24, r25
     e7c:	8f 83       	std	Y+7, r24	; 0x07
     e7e:	8f 81       	ldd	r24, Y+7	; 0x07
     e80:	8c 83       	std	Y+4, r24	; 0x04
     e82:	88 e0       	ldi	r24, 0x08	; 8
     e84:	8b 83       	std	Y+3, r24	; 0x03
     e86:	58 85       	ldd	r21, Y+8	; 0x08
     e88:	6f 81       	ldd	r22, Y+7	; 0x07
     e8a:	49 85       	ldd	r20, Y+9	; 0x09
     e8c:	3b 81       	ldd	r19, Y+3	; 0x03
     e8e:	2c 81       	ldd	r18, Y+4	; 0x04
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	f7 01       	movw	r30, r14

00000e96 <head20>:
     e96:	5c 93       	st	X, r21
     e98:	47 fd       	sbrc	r20, 7
     e9a:	25 2f       	mov	r18, r21
     e9c:	2c 93       	st	X, r18
     e9e:	26 2f       	mov	r18, r22
     ea0:	3a 95       	dec	r19
     ea2:	31 f0       	breq	.+12     	; 0xeb0 <nextbyte20>
     ea4:	44 1f       	adc	r20, r20
     ea6:	6c 93       	st	X, r22
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <head20+0x14>
     eaa:	00 c0       	rjmp	.+0      	; 0xeac <head20+0x16>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <head20+0x18>
     eae:	f3 cf       	rjmp	.-26     	; 0xe96 <head20>

00000eb0 <nextbyte20>:
     eb0:	6c 93       	st	X, r22
     eb2:	00 00       	nop
     eb4:	38 e0       	ldi	r19, 0x08	; 8
     eb6:	41 91       	ld	r20, Z+
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	69 f7       	brne	.-38     	; 0xe96 <head20>
     ebc:	f8 01       	movw	r30, r16
     ebe:	b3 8b       	std	Z+19, r27	; 0x13
     ec0:	a2 8b       	std	Z+18, r26	; 0x12
     ec2:	49 87       	std	Y+9, r20	; 0x09
     ec4:	3b 83       	std	Y+3, r19	; 0x03
     ec6:	2c 83       	std	Y+4, r18	; 0x04
     ec8:	fd ce       	rjmp	.-518    	; 0xcc4 <headD+0x86>

00000eca <Adafruit_NeoPixel::setPin(unsigned char)>:
_ZN17Adafruit_NeoPixel6setPinEh():
     eca:	1f 93       	push	r17
     ecc:	cf 93       	push	r28
     ece:	df 93       	push	r29
     ed0:	ec 01       	movw	r28, r24
     ed2:	16 2f       	mov	r17, r22
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	88 23       	and	r24, r24
     ed8:	31 f0       	breq	.+12     	; 0xee6 <Adafruit_NeoPixel::setPin(unsigned char)+0x1c>
     eda:	8e 81       	ldd	r24, Y+6	; 0x06
     edc:	87 fd       	sbrc	r24, 7
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <Adafruit_NeoPixel::setPin(unsigned char)+0x1c>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <pinMode>
     ee6:	1e 83       	std	Y+6, r17	; 0x06
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	88 23       	and	r24, r24
     eec:	41 f0       	breq	.+16     	; 0xefe <Adafruit_NeoPixel::setPin(unsigned char)+0x34>
     eee:	61 e0       	ldi	r22, 0x01	; 1
     ef0:	81 2f       	mov	r24, r17
     ef2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <pinMode>
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	81 2f       	mov	r24, r17
     efa:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
     efe:	81 2f       	mov	r24, r17
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	fc 01       	movw	r30, r24
     f04:	ea 56       	subi	r30, 0x6A	; 106
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	e4 91       	lpm	r30, Z
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	e9 54       	subi	r30, 0x49	; 73
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	25 91       	lpm	r18, Z+
     f16:	34 91       	lpm	r19, Z
     f18:	3b 8b       	std	Y+19, r19	; 0x13
     f1a:	2a 8b       	std	Y+18, r18	; 0x12
     f1c:	fc 01       	movw	r30, r24
     f1e:	e1 58       	subi	r30, 0x81	; 129
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	e4 91       	lpm	r30, Z
     f24:	ec 8b       	std	Y+20, r30	; 0x14
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	08 95       	ret

00000f2e <Adafruit_NeoPixel::Adafruit_NeoPixel(unsigned int, unsigned char, unsigned int)>:
_ZN17Adafruit_NeoPixelC2Ejhj():
     f2e:	ef 92       	push	r14
     f30:	ff 92       	push	r15
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	ec 01       	movw	r28, r24
     f3a:	7b 01       	movw	r14, r22
     f3c:	14 2f       	mov	r17, r20
     f3e:	19 82       	std	Y+1, r1	; 0x01
     f40:	1f 82       	std	Y+7, r1	; 0x07
     f42:	19 86       	std	Y+9, r1	; 0x09
     f44:	18 86       	std	Y+8, r1	; 0x08
     f46:	1e 86       	std	Y+14, r1	; 0x0e
     f48:	1f 86       	std	Y+15, r1	; 0x0f
     f4a:	18 8a       	std	Y+16, r1	; 0x10
     f4c:	19 8a       	std	Y+17, r1	; 0x11
     f4e:	b9 01       	movw	r22, r18
     f50:	0e 94 89 05 	call	0xb12	; 0xb12 <Adafruit_NeoPixel::updateType(unsigned int)>
     f54:	b7 01       	movw	r22, r14
     f56:	ce 01       	movw	r24, r28
     f58:	0e 94 51 05 	call	0xaa2	; 0xaa2 <Adafruit_NeoPixel::updateLength(unsigned int)>
     f5c:	61 2f       	mov	r22, r17
     f5e:	ce 01       	movw	r24, r28
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	0c 94 65 07 	jmp	0xeca	; 0xeca <Adafruit_NeoPixel::setPin(unsigned char)>

00000f6e <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)>:
_ZN17Adafruit_NeoPixel13setPixelColorEjm():
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2142
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is white (for RGBW
              pixels) or ignored (for RGB pixels), next is red, then green,
              and least significant byte is blue.
*/
void Adafruit_NeoPixel::setPixelColor(uint16_t n, uint32_t c) {
     f6e:	8f 92       	push	r8
     f70:	9f 92       	push	r9
     f72:	af 92       	push	r10
     f74:	bf 92       	push	r11
     f76:	cf 92       	push	r12
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	fc 01       	movw	r30, r24
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2143
  if(n < numLEDs) {
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	68 17       	cp	r22, r24
     f8c:	79 07       	cpc	r23, r25
     f8e:	a8 f5       	brcc	.+106    	; 0xffa <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)+0x8c>
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2145
    uint8_t *p,
      r = (uint8_t)(c >> 16),
     f90:	4a 01       	movw	r8, r20
     f92:	aa 24       	eor	r10, r10
     f94:	bb 24       	eor	r11, r11
     f96:	c8 2d       	mov	r28, r8
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2146
      g = (uint8_t)(c >>  8),
     f98:	c3 2e       	mov	r12, r19
     f9a:	d4 2e       	mov	r13, r20
     f9c:	e5 2e       	mov	r14, r21
     f9e:	ff 24       	eor	r15, r15
     fa0:	1c 2d       	mov	r17, r12
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2147
      b = (uint8_t)c;
     fa2:	d2 2f       	mov	r29, r18
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2148
    if(brightness) { // See notes in setBrightness()
     fa4:	87 81       	ldd	r24, Z+7	; 0x07
     fa6:	88 23       	and	r24, r24
     fa8:	61 f0       	breq	.+24     	; 0xfc2 <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)+0x54>
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2149
      r = (r * brightness) >> 8;
     faa:	88 9e       	mul	r8, r24
     fac:	40 01       	movw	r8, r0
     fae:	11 24       	eor	r1, r1
     fb0:	c9 2d       	mov	r28, r9
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2150
      g = (g * brightness) >> 8;
     fb2:	8c 9d       	mul	r24, r12
     fb4:	60 01       	movw	r12, r0
     fb6:	11 24       	eor	r1, r1
     fb8:	1d 2d       	mov	r17, r13
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2151
      b = (b * brightness) >> 8;
     fba:	82 9f       	mul	r24, r18
     fbc:	d0 01       	movw	r26, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	db 2f       	mov	r29, r27
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2153
    }
    if(wOffset == rOffset) {
     fc2:	a5 85       	ldd	r26, Z+13	; 0x0d
     fc4:	e0 84       	ldd	r14, Z+8	; 0x08
     fc6:	f1 84       	ldd	r15, Z+9	; 0x09
     fc8:	92 85       	ldd	r25, Z+10	; 0x0a
     fca:	a9 13       	cpse	r26, r25
     fcc:	22 c0       	rjmp	.+68     	; 0x1012 <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)+0xa4>
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2154
      p = &pixels[n * 3];
     fce:	cb 01       	movw	r24, r22
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	68 0f       	add	r22, r24
     fd6:	79 1f       	adc	r23, r25
     fd8:	6e 0d       	add	r22, r14
     fda:	7f 1d       	adc	r23, r15
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2160
    } else {
      p = &pixels[n * 4];
      uint8_t w = (uint8_t)(c >> 24);
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    }
    p[rOffset] = r;
     fdc:	a2 85       	ldd	r26, Z+10	; 0x0a
     fde:	a6 0f       	add	r26, r22
     fe0:	b7 2f       	mov	r27, r23
     fe2:	b1 1d       	adc	r27, r1
     fe4:	cc 93       	st	X, r28
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2161
    p[gOffset] = g;
     fe6:	a3 85       	ldd	r26, Z+11	; 0x0b
     fe8:	a6 0f       	add	r26, r22
     fea:	b7 2f       	mov	r27, r23
     fec:	b1 1d       	adc	r27, r1
     fee:	1c 93       	st	X, r17
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2162
    p[bOffset] = b;
     ff0:	84 85       	ldd	r24, Z+12	; 0x0c
     ff2:	68 0f       	add	r22, r24
     ff4:	71 1d       	adc	r23, r1
     ff6:	fb 01       	movw	r30, r22
     ff8:	d0 83       	st	Z, r29
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2164
  }
}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	df 90       	pop	r13
    1006:	cf 90       	pop	r12
    1008:	bf 90       	pop	r11
    100a:	af 90       	pop	r10
    100c:	9f 90       	pop	r9
    100e:	8f 90       	pop	r8
    1010:	08 95       	ret
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2156
      b = (b * brightness) >> 8;
    }
    if(wOffset == rOffset) {
      p = &pixels[n * 3];
    } else {
      p = &pixels[n * 4];
    1012:	66 0f       	add	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	66 0f       	add	r22, r22
    1018:	77 1f       	adc	r23, r23
    101a:	6e 0d       	add	r22, r14
    101c:	7f 1d       	adc	r23, r15
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2157
      uint8_t w = (uint8_t)(c >> 24);
    101e:	25 2f       	mov	r18, r21
    1020:	33 27       	eor	r19, r19
    1022:	44 27       	eor	r20, r20
    1024:	55 27       	eor	r21, r21
/Users/Zille/Documents/Arduino/libraries/Adafruit_NeoPixel/Adafruit_NeoPixel.cpp:2158
      p[wOffset] = brightness ? ((w * brightness) >> 8) : w;
    1026:	88 23       	and	r24, r24
    1028:	49 f0       	breq	.+18     	; 0x103c <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)+0xce>
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	82 9f       	mul	r24, r18
    102e:	70 01       	movw	r14, r0
    1030:	83 9f       	mul	r24, r19
    1032:	f0 0c       	add	r15, r0
    1034:	92 9f       	mul	r25, r18
    1036:	f0 0c       	add	r15, r0
    1038:	11 24       	eor	r1, r1
    103a:	2f 2d       	mov	r18, r15
    103c:	a6 0f       	add	r26, r22
    103e:	b7 2f       	mov	r27, r23
    1040:	b1 1d       	adc	r27, r1
    1042:	2c 93       	st	X, r18
    1044:	cb cf       	rjmp	.-106    	; 0xfdc <Adafruit_NeoPixel::setPixelColor(unsigned int, unsigned long)+0x6e>

00001046 <PS2dev::golo(int) [clone .constprop.2]>:
_ZN6PS2dev4goloEi():
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:300 (discriminator 1)

int PS2dev::keyboard_handle(unsigned char *leds) {
  unsigned char c;  //char stores data recieved from computer for KBD
  if(available())
  {
    if(!read(&c)) return keyboard_reply(c, leds);
    1046:	cf 93       	push	r28
    1048:	c8 2f       	mov	r28, r24
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	0e 94 38 0b 	call	0x1670	; 0x1670 <digitalWrite>
    1050:	61 e0       	ldi	r22, 0x01	; 1
    1052:	8c 2f       	mov	r24, r28
    1054:	cf 91       	pop	r28
    1056:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <pinMode>

0000105a <PS2dev::gohi(int) [clone .constprop.3]>:
_ZN6PS2dev4gohiEi():
    105a:	cf 93       	push	r28
    105c:	c8 2f       	mov	r28, r24
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <pinMode>
    1064:	61 e0       	ldi	r22, 0x01	; 1
    1066:	8c 2f       	mov	r24, r28
    1068:	cf 91       	pop	r28
    106a:	0c 94 38 0b 	jmp	0x1670	; 0x1670 <digitalWrite>

0000106e <PS2dev::PS2dev(int, int)>:
_ZN6PS2devC2Eii():
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	ec 01       	movw	r28, r24
    1074:	cb 01       	movw	r24, r22
    1076:	79 83       	std	Y+1, r23	; 0x01
    1078:	68 83       	st	Y, r22
    107a:	5b 83       	std	Y+3, r21	; 0x03
    107c:	4a 83       	std	Y+2, r20	; 0x02
    107e:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	9b 81       	ldd	r25, Y+3	; 0x03
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	0c 94 2d 08 	jmp	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>

0000108e <PS2dev::write(unsigned char)>:
_ZN6PS2dev5writeEh():
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	ec 01       	movw	r28, r24
    10a0:	16 2f       	mov	r17, r22
    10a2:	88 ee       	ldi	r24, 0xE8	; 232
    10a4:	93 e0       	ldi	r25, 0x03	; 3
    10a6:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    10aa:	88 81       	ld	r24, Y
    10ac:	0e 94 66 0b 	call	0x16cc	; 0x16cc <digitalRead>
    10b0:	89 2b       	or	r24, r25
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <PS2dev::write(unsigned char)+0x28>
    10b4:	92 c0       	rjmp	.+292    	; 0x11da <PS2dev::write(unsigned char)+0x14c>
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <digitalRead>
    10bc:	89 2b       	or	r24, r25
    10be:	09 f4       	brne	.+2      	; 0x10c2 <PS2dev::write(unsigned char)+0x34>
    10c0:	8f c0       	rjmp	.+286    	; 0x11e0 <PS2dev::write(unsigned char)+0x152>
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    10ca:	84 e1       	ldi	r24, 0x14	; 20
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    10d2:	88 81       	ld	r24, Y
    10d4:	99 81       	ldd	r25, Y+1	; 0x01
    10d6:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    10da:	88 e2       	ldi	r24, 0x28	; 40
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    10e2:	88 81       	ld	r24, Y
    10e4:	99 81       	ldd	r25, Y+1	; 0x01
    10e6:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    10ea:	84 e1       	ldi	r24, 0x14	; 20
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    10f2:	28 e0       	ldi	r18, 0x08	; 8
    10f4:	f2 2e       	mov	r15, r18
    10f6:	01 e0       	ldi	r16, 0x01	; 1
    10f8:	c1 2e       	mov	r12, r17
    10fa:	d1 2c       	mov	r13, r1
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1100:	21 2f       	mov	r18, r17
    1102:	21 70       	andi	r18, 0x01	; 1
    1104:	e2 2e       	mov	r14, r18
    1106:	10 ff       	sbrs	r17, 0
    1108:	62 c0       	rjmp	.+196    	; 0x11ce <PS2dev::write(unsigned char)+0x140>
    110a:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    110e:	84 e1       	ldi	r24, 0x14	; 20
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    1116:	88 81       	ld	r24, Y
    1118:	99 81       	ldd	r25, Y+1	; 0x01
    111a:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    111e:	88 e2       	ldi	r24, 0x28	; 40
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    1126:	88 81       	ld	r24, Y
    1128:	99 81       	ldd	r25, Y+1	; 0x01
    112a:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    112e:	84 e1       	ldi	r24, 0x14	; 20
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    1136:	8e 2d       	mov	r24, r14
    1138:	80 27       	eor	r24, r16
    113a:	d5 94       	asr	r13
    113c:	c7 94       	ror	r12
    113e:	1c 2d       	mov	r17, r12
    1140:	fa 94       	dec	r15
    1142:	f1 10       	cpse	r15, r1
    1144:	42 c0       	rjmp	.+132    	; 0x11ca <PS2dev::write(unsigned char)+0x13c>
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	9b 81       	ldd	r25, Y+3	; 0x03
    114a:	e0 16       	cp	r14, r16
    114c:	09 f4       	brne	.+2      	; 0x1150 <PS2dev::write(unsigned char)+0xc2>
    114e:	42 c0       	rjmp	.+132    	; 0x11d4 <PS2dev::write(unsigned char)+0x146>
    1150:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    1154:	84 e1       	ldi	r24, 0x14	; 20
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    115c:	88 81       	ld	r24, Y
    115e:	99 81       	ldd	r25, Y+1	; 0x01
    1160:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    1164:	88 e2       	ldi	r24, 0x28	; 40
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    116c:	88 81       	ld	r24, Y
    116e:	99 81       	ldd	r25, Y+1	; 0x01
    1170:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    1174:	84 e1       	ldi	r24, 0x14	; 20
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	9b 81       	ldd	r25, Y+3	; 0x03
    1180:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    1184:	84 e1       	ldi	r24, 0x14	; 20
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    118c:	88 81       	ld	r24, Y
    118e:	99 81       	ldd	r25, Y+1	; 0x01
    1190:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    1194:	88 e2       	ldi	r24, 0x28	; 40
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    119c:	88 81       	ld	r24, Y
    119e:	99 81       	ldd	r25, Y+1	; 0x01
    11a0:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    11a4:	84 e1       	ldi	r24, 0x14	; 20
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    11ac:	88 ee       	ldi	r24, 0xE8	; 232
    11ae:	93 e0       	ldi	r25, 0x03	; 3
    11b0:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	ff 90       	pop	r15
    11c2:	ef 90       	pop	r14
    11c4:	df 90       	pop	r13
    11c6:	cf 90       	pop	r12
    11c8:	08 95       	ret
    11ca:	08 2f       	mov	r16, r24
    11cc:	95 cf       	rjmp	.-214    	; 0x10f8 <PS2dev::write(unsigned char)+0x6a>
    11ce:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    11d2:	9d cf       	rjmp	.-198    	; 0x110e <PS2dev::write(unsigned char)+0x80>
    11d4:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    11d8:	bd cf       	rjmp	.-134    	; 0x1154 <PS2dev::write(unsigned char)+0xc6>
    11da:	8f ef       	ldi	r24, 0xFF	; 255
    11dc:	9f ef       	ldi	r25, 0xFF	; 255
    11de:	ec cf       	rjmp	.-40     	; 0x11b8 <PS2dev::write(unsigned char)+0x12a>
    11e0:	8e ef       	ldi	r24, 0xFE	; 254
    11e2:	9f ef       	ldi	r25, 0xFF	; 255
    11e4:	e9 cf       	rjmp	.-46     	; 0x11b8 <PS2dev::write(unsigned char)+0x12a>

000011e6 <PS2dev::available()>:
_ZN6PS2dev9availableEv():
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	ec 01       	movw	r28, r24
    11ec:	8a 81       	ldd	r24, Y+2	; 0x02
    11ee:	0e 94 66 0b 	call	0x16cc	; 0x16cc <digitalRead>
    11f2:	21 e0       	ldi	r18, 0x01	; 1
    11f4:	89 2b       	or	r24, r25
    11f6:	39 f0       	breq	.+14     	; 0x1206 <PS2dev::available()+0x20>
    11f8:	88 81       	ld	r24, Y
    11fa:	0e 94 66 0b 	call	0x16cc	; 0x16cc <digitalRead>
    11fe:	21 e0       	ldi	r18, 0x01	; 1
    1200:	89 2b       	or	r24, r25
    1202:	09 f0       	breq	.+2      	; 0x1206 <PS2dev::available()+0x20>
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	82 2f       	mov	r24, r18
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <PS2dev::read(unsigned char*)>:
_ZN6PS2dev4readEPh():
    1210:	6f 92       	push	r6
    1212:	7f 92       	push	r7
    1214:	8f 92       	push	r8
    1216:	9f 92       	push	r9
    1218:	af 92       	push	r10
    121a:	bf 92       	push	r11
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	ec 01       	movw	r28, r24
    122e:	4b 01       	movw	r8, r22
    1230:	0e 94 36 0a 	call	0x146c	; 0x146c <millis>
    1234:	6b 01       	movw	r12, r22
    1236:	7c 01       	movw	r14, r24
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	0e 94 66 0b 	call	0x16cc	; 0x16cc <digitalRead>
    123e:	8c 01       	movw	r16, r24
    1240:	89 2b       	or	r24, r25
    1242:	71 f0       	breq	.+28     	; 0x1260 <PS2dev::read(unsigned char*)+0x50>
    1244:	0e 94 36 0a 	call	0x146c	; 0x146c <millis>
    1248:	6c 19       	sub	r22, r12
    124a:	7d 09       	sbc	r23, r13
    124c:	8e 09       	sbc	r24, r14
    124e:	9f 09       	sbc	r25, r15
    1250:	6f 31       	cpi	r22, 0x1F	; 31
    1252:	71 05       	cpc	r23, r1
    1254:	81 05       	cpc	r24, r1
    1256:	91 05       	cpc	r25, r1
    1258:	78 f3       	brcs	.-34     	; 0x1238 <PS2dev::read(unsigned char*)+0x28>
    125a:	0f ef       	ldi	r16, 0xFF	; 255
    125c:	1f ef       	ldi	r17, 0xFF	; 255
    125e:	86 c0       	rjmp	.+268    	; 0x136c <PS2dev::read(unsigned char*)+0x15c>
    1260:	88 81       	ld	r24, Y
    1262:	0e 94 66 0b 	call	0x16cc	; 0x16cc <digitalRead>
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	69 f7       	brne	.-38     	; 0x1244 <PS2dev::read(unsigned char*)+0x34>
    126a:	84 e1       	ldi	r24, 0x14	; 20
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    1272:	88 81       	ld	r24, Y
    1274:	99 81       	ldd	r25, Y+1	; 0x01
    1276:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    127a:	88 e2       	ldi	r24, 0x28	; 40
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    1282:	88 81       	ld	r24, Y
    1284:	99 81       	ldd	r25, Y+1	; 0x01
    1286:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    128a:	84 e1       	ldi	r24, 0x14	; 20
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    1292:	98 e0       	ldi	r25, 0x08	; 8
    1294:	c9 2e       	mov	r12, r25
    1296:	d1 2c       	mov	r13, r1
    1298:	77 24       	eor	r7, r7
    129a:	73 94       	inc	r7
    129c:	f1 2c       	mov	r15, r1
    129e:	e1 2c       	mov	r14, r1
    12a0:	aa 24       	eor	r10, r10
    12a2:	a3 94       	inc	r10
    12a4:	b1 2c       	mov	r11, r1
    12a6:	66 24       	eor	r6, r6
    12a8:	63 94       	inc	r6
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	0e 94 66 0b 	call	0x16cc	; 0x16cc <digitalRead>
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	19 f4       	brne	.+6      	; 0x12ba <PS2dev::read(unsigned char*)+0xaa>
    12b4:	ea 28       	or	r14, r10
    12b6:	fb 28       	or	r15, r11
    12b8:	76 24       	eor	r7, r6
    12ba:	aa 0c       	add	r10, r10
    12bc:	bb 1c       	adc	r11, r11
    12be:	84 e1       	ldi	r24, 0x14	; 20
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    12c6:	88 81       	ld	r24, Y
    12c8:	99 81       	ldd	r25, Y+1	; 0x01
    12ca:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    12ce:	88 e2       	ldi	r24, 0x28	; 40
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    12d6:	88 81       	ld	r24, Y
    12d8:	99 81       	ldd	r25, Y+1	; 0x01
    12da:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    12de:	84 e1       	ldi	r24, 0x14	; 20
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	c8 1a       	sub	r12, r24
    12ea:	d1 08       	sbc	r13, r1
    12ec:	f1 f6       	brne	.-68     	; 0x12aa <PS2dev::read(unsigned char*)+0x9a>
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	0e 94 66 0b 	call	0x16cc	; 0x16cc <digitalRead>
    12f4:	6c 01       	movw	r12, r24
    12f6:	84 e1       	ldi	r24, 0x14	; 20
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    12fe:	88 81       	ld	r24, Y
    1300:	99 81       	ldd	r25, Y+1	; 0x01
    1302:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    1306:	88 e2       	ldi	r24, 0x28	; 40
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    130e:	88 81       	ld	r24, Y
    1310:	99 81       	ldd	r25, Y+1	; 0x01
    1312:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    1316:	84 e1       	ldi	r24, 0x14	; 20
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    131e:	84 e1       	ldi	r24, 0x14	; 20
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	9b 81       	ldd	r25, Y+3	; 0x03
    132a:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    132e:	88 81       	ld	r24, Y
    1330:	99 81       	ldd	r25, Y+1	; 0x01
    1332:	0e 94 23 08 	call	0x1046	; 0x1046 <PS2dev::golo(int) [clone .constprop.2]>
    1336:	88 e2       	ldi	r24, 0x28	; 40
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    133e:	88 81       	ld	r24, Y
    1340:	99 81       	ldd	r25, Y+1	; 0x01
    1342:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    1346:	84 e1       	ldi	r24, 0x14	; 20
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <delayMicroseconds>
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	9b 81       	ldd	r25, Y+3	; 0x03
    1352:	0e 94 2d 08 	call	0x105a	; 0x105a <PS2dev::gohi(int) [clone .constprop.3]>
    1356:	f4 01       	movw	r30, r8
    1358:	e0 82       	st	Z, r14
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	ca 94       	dec	r12
    135e:	cd 28       	or	r12, r13
    1360:	09 f0       	breq	.+2      	; 0x1364 <PS2dev::read(unsigned char*)+0x154>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	87 15       	cp	r24, r7
    1366:	11 f0       	breq	.+4      	; 0x136c <PS2dev::read(unsigned char*)+0x15c>
    1368:	0e ef       	ldi	r16, 0xFE	; 254
    136a:	1f ef       	ldi	r17, 0xFF	; 255
    136c:	c8 01       	movw	r24, r16
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	ef 90       	pop	r14
    137a:	df 90       	pop	r13
    137c:	cf 90       	pop	r12
    137e:	bf 90       	pop	r11
    1380:	af 90       	pop	r10
    1382:	9f 90       	pop	r9
    1384:	8f 90       	pop	r8
    1386:	7f 90       	pop	r7
    1388:	6f 90       	pop	r6
    138a:	08 95       	ret

0000138c <PS2dev::keyboard_init()>:
_ZN6PS2dev13keyboard_initEv():
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ec 01       	movw	r28, r24
    1392:	6a ea       	ldi	r22, 0xAA	; 170
    1394:	ce 01       	movw	r24, r28
    1396:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
    139a:	89 2b       	or	r24, r25
    139c:	d1 f7       	brne	.-12     	; 0x1392 <PS2dev::keyboard_init()+0x6>
    139e:	6a e0       	ldi	r22, 0x0A	; 10
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <delay>

000013ae <PS2dev::keyboard_mkbrk(unsigned char)>:
_ZN6PS2dev14keyboard_mkbrkEh():
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:307
  return 0;
}

// Presses then releases one of the non-special characters
int PS2dev::keyboard_mkbrk(unsigned char code)
{
    13ae:	1f 93       	push	r17
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	ec 01       	movw	r28, r24
    13b6:	16 2f       	mov	r17, r22
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:308
  write(code);
    13b8:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:309
  write(0xF0);
    13bc:	60 ef       	ldi	r22, 0xF0	; 240
    13be:	ce 01       	movw	r24, r28
    13c0:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:310
  write(code);
    13c4:	61 2f       	mov	r22, r17
    13c6:	ce 01       	movw	r24, r28
    13c8:	0e 94 47 08 	call	0x108e	; 0x108e <PS2dev::write(unsigned char)>
/Users/Zille/Documents/Arduino/libraries/ps2dev/src/ps2dev.cpp:312
  return 0;
}
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	1f 91       	pop	r17
    13d6:	08 95       	ret

000013d8 <__vector_16>:
__vector_16():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    13d8:	1f 92       	push	r1
    13da:	0f 92       	push	r0
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	0f 92       	push	r0
    13e0:	11 24       	eor	r1, r1
    13e2:	2f 93       	push	r18
    13e4:	3f 93       	push	r19
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    13ea:	af 93       	push	r26
    13ec:	bf 93       	push	r27
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
    13ee:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <timer0_millis>
    13f2:	90 91 f2 03 	lds	r25, 0x03F2	; 0x8003f2 <timer0_millis+0x1>
    13f6:	a0 91 f3 03 	lds	r26, 0x03F3	; 0x8003f3 <timer0_millis+0x2>
    13fa:	b0 91 f4 03 	lds	r27, 0x03F4	; 0x8003f4 <timer0_millis+0x3>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
    13fe:	30 91 f0 03 	lds	r19, 0x03F0	; 0x8003f0 <timer0_fract>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
    1402:	26 e0       	ldi	r18, 0x06	; 6
    1404:	23 0f       	add	r18, r19
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
    1406:	2d 37       	cpi	r18, 0x7D	; 125
    1408:	68 f1       	brcs	.+90     	; 0x1464 <__vector_16+0x8c>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
    140a:	29 e8       	ldi	r18, 0x89	; 137
    140c:	23 0f       	add	r18, r19
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
    140e:	03 96       	adiw	r24, 0x03	; 3
    1410:	a1 1d       	adc	r26, r1
    1412:	b1 1d       	adc	r27, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
    1414:	20 93 f0 03 	sts	0x03F0, r18	; 0x8003f0 <timer0_fract>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
    1418:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <timer0_millis>
    141c:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <timer0_millis+0x1>
    1420:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <timer0_millis+0x2>
    1424:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <timer0_millis+0x3>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
    1428:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <timer0_overflow_count>
    142c:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <timer0_overflow_count+0x1>
    1430:	a0 91 ee 03 	lds	r26, 0x03EE	; 0x8003ee <timer0_overflow_count+0x2>
    1434:	b0 91 ef 03 	lds	r27, 0x03EF	; 0x8003ef <timer0_overflow_count+0x3>
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	a1 1d       	adc	r26, r1
    143c:	b1 1d       	adc	r27, r1
    143e:	80 93 ec 03 	sts	0x03EC, r24	; 0x8003ec <timer0_overflow_count>
    1442:	90 93 ed 03 	sts	0x03ED, r25	; 0x8003ed <timer0_overflow_count+0x1>
    1446:	a0 93 ee 03 	sts	0x03EE, r26	; 0x8003ee <timer0_overflow_count+0x2>
    144a:	b0 93 ef 03 	sts	0x03EF, r27	; 0x8003ef <timer0_overflow_count+0x3>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:213
#endif
}
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	3f 91       	pop	r19
    1458:	2f 91       	pop	r18
    145a:	0f 90       	pop	r0
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	0f 90       	pop	r0
    1460:	1f 90       	pop	r1
    1462:	18 95       	reti
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
    1464:	02 96       	adiw	r24, 0x02	; 2
    1466:	a1 1d       	adc	r26, r1
    1468:	b1 1d       	adc	r27, r1
    146a:	d4 cf       	rjmp	.-88     	; 0x1414 <__vector_16+0x3c>

0000146c <millis>:
millis():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:218
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
    146c:	2f b7       	in	r18, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:222

  // disable interrupts while we read timer0_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to timer0_millis)
  cli();
    146e:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:223
  m = timer0_millis;
    1470:	60 91 f1 03 	lds	r22, 0x03F1	; 0x8003f1 <timer0_millis>
    1474:	70 91 f2 03 	lds	r23, 0x03F2	; 0x8003f2 <timer0_millis+0x1>
    1478:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <timer0_millis+0x2>
    147c:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <timer0_millis+0x3>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:224
  SREG = oldSREG;
    1480:	2f bf       	out	0x3f, r18	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:227

  return m;
}
    1482:	08 95       	ret

00001484 <micros>:
micros():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    1484:	3f b7       	in	r19, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    1486:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    1488:	80 91 ec 03 	lds	r24, 0x03EC	; 0x8003ec <timer0_overflow_count>
    148c:	90 91 ed 03 	lds	r25, 0x03ED	; 0x8003ed <timer0_overflow_count+0x1>
    1490:	a0 91 ee 03 	lds	r26, 0x03EE	; 0x8003ee <timer0_overflow_count+0x2>
    1494:	b0 91 ef 03 	lds	r27, 0x03EF	; 0x8003ef <timer0_overflow_count+0x3>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    1498:	26 b5       	in	r18, 0x26	; 38
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    149a:	a8 9b       	sbis	0x15, 0	; 21
    149c:	05 c0       	rjmp	.+10     	; 0x14a8 <micros+0x24>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:261 (discriminator 1)
    149e:	2f 3f       	cpi	r18, 0xFF	; 255
    14a0:	19 f0       	breq	.+6      	; 0x14a8 <micros+0x24>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	a1 1d       	adc	r26, r1
    14a6:	b1 1d       	adc	r27, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    14a8:	3f bf       	out	0x3f, r19	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    14aa:	ba 2f       	mov	r27, r26
    14ac:	a9 2f       	mov	r26, r25
    14ae:	98 2f       	mov	r25, r24
    14b0:	88 27       	eor	r24, r24
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	62 0f       	add	r22, r18
    14b8:	71 1d       	adc	r23, r1
    14ba:	81 1d       	adc	r24, r1
    14bc:	91 1d       	adc	r25, r1
    14be:	43 e0       	ldi	r20, 0x03	; 3
    14c0:	66 0f       	add	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	88 1f       	adc	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	4a 95       	dec	r20
    14ca:	d1 f7       	brne	.-12     	; 0x14c0 <micros+0x3c>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    14cc:	08 95       	ret

000014ce <delay>:
delay():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    14ce:	8f 92       	push	r8
    14d0:	9f 92       	push	r9
    14d2:	af 92       	push	r10
    14d4:	bf 92       	push	r11
    14d6:	cf 92       	push	r12
    14d8:	df 92       	push	r13
    14da:	ef 92       	push	r14
    14dc:	ff 92       	push	r15
    14de:	6b 01       	movw	r12, r22
    14e0:	7c 01       	movw	r14, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    14e2:	0e 94 42 0a 	call	0x1484	; 0x1484 <micros>
    14e6:	4b 01       	movw	r8, r22
    14e8:	5c 01       	movw	r10, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    14ea:	c1 14       	cp	r12, r1
    14ec:	d1 04       	cpc	r13, r1
    14ee:	e1 04       	cpc	r14, r1
    14f0:	f1 04       	cpc	r15, r1
    14f2:	e9 f0       	breq	.+58     	; 0x152e <delay+0x60>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:400
    yield();
    14f4:	0e 94 9f 0b 	call	0x173e	; 0x173e <yield>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    14f8:	0e 94 42 0a 	call	0x1484	; 0x1484 <micros>
    14fc:	68 19       	sub	r22, r8
    14fe:	79 09       	sbc	r23, r9
    1500:	8a 09       	sbc	r24, r10
    1502:	9b 09       	sbc	r25, r11
    1504:	68 3e       	cpi	r22, 0xE8	; 232
    1506:	73 40       	sbci	r23, 0x03	; 3
    1508:	81 05       	cpc	r24, r1
    150a:	91 05       	cpc	r25, r1
    150c:	70 f3       	brcs	.-36     	; 0x14ea <delay+0x1c>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:402
      ms--;
    150e:	21 e0       	ldi	r18, 0x01	; 1
    1510:	c2 1a       	sub	r12, r18
    1512:	d1 08       	sbc	r13, r1
    1514:	e1 08       	sbc	r14, r1
    1516:	f1 08       	sbc	r15, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    1518:	88 ee       	ldi	r24, 0xE8	; 232
    151a:	88 0e       	add	r8, r24
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	98 1e       	adc	r9, r24
    1520:	a1 1c       	adc	r10, r1
    1522:	b1 1c       	adc	r11, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    1524:	c1 14       	cp	r12, r1
    1526:	d1 04       	cpc	r13, r1
    1528:	e1 04       	cpc	r14, r1
    152a:	f1 04       	cpc	r15, r1
    152c:	29 f7       	brne	.-54     	; 0x14f8 <delay+0x2a>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	df 90       	pop	r13
    1534:	cf 90       	pop	r12
    1536:	bf 90       	pop	r11
    1538:	af 90       	pop	r10
    153a:	9f 90       	pop	r9
    153c:	8f 90       	pop	r8
    153e:	08 95       	ret

00001540 <delayMicroseconds>:
delayMicroseconds():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:761
              // 2 cycles to jump back to delay cycle.
  }

#elif F_CPU >= 8000000L
  // for the 8 MHz clock
  __asm__ __volatile__ (
    1540:	00 00       	nop
    1542:	00 00       	nop
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:767
    "nop" "\n\t"
    "nop"); //just waiting 2 cycles

  // for a 1 and 2 microsecond delay, simply return.  the overhead
  // of the function call takes 16 (18) cycles, which is 2us
  if (us <= 2) return; // = 3 cycles, (4 when true)
    1544:	83 30       	cpi	r24, 0x03	; 3
    1546:	91 05       	cpc	r25, r1
    1548:	28 f0       	brcs	.+10     	; 0x1554 <delayMicroseconds+0x14>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:772

  // the following loop takes 1/2 of a microsecond (4 cycles)
  // per iteration, so execute it twice for each microsecond of
  // delay requested.
  us <<= 1; //x2 us, = 2 cycles
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:777

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // us is at least 6 so we can substract 5
  us -= 5; // = 2 cycles
    154e:	05 97       	sbiw	r24, 0x05	; 5
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <delayMicroseconds+0x10>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    1554:	08 95       	ret

00001556 <init>:
init():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1556:	78 94       	sei
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1558:	84 b5       	in	r24, 0x24	; 36
    155a:	83 60       	ori	r24, 0x03	; 3
    155c:	84 bd       	out	0x24, r24	; 36
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    155e:	85 b5       	in	r24, 0x25	; 37
    1560:	83 60       	ori	r24, 0x03	; 3
    1562:	85 bd       	out	0x25, r24	; 37
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1564:	ee e6       	ldi	r30, 0x6E	; 110
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	81 60       	ori	r24, 0x01	; 1
    156c:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    156e:	e1 e8       	ldi	r30, 0x81	; 129
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    1576:	80 81       	ld	r24, Z
    1578:	81 60       	ori	r24, 0x01	; 1
    157a:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    157c:	e0 e8       	ldi	r30, 0x80	; 128
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	81 60       	ori	r24, 0x01	; 1
    1584:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    1586:	e1 eb       	ldi	r30, 0xB1	; 177
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	84 60       	ori	r24, 0x04	; 4
    158e:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    1590:	e0 eb       	ldi	r30, 0xB0	; 176
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	81 60       	ori	r24, 0x01	; 1
    1598:	80 83       	st	Z, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
    159a:	86 e8       	ldi	r24, 0x86	; 134
    159c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    15a0:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring.c:1072
#endif
}
    15a4:	08 95       	ret

000015a6 <turnOffPWM>:
turnOffPWM():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	81 f0       	breq	.+32     	; 0x15ca <turnOffPWM+0x24>
    15aa:	28 f4       	brcc	.+10     	; 0x15b6 <turnOffPWM+0x10>
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	e9 f0       	breq	.+58     	; 0x15ea <turnOffPWM+0x44>
    15b0:	83 30       	cpi	r24, 0x03	; 3
    15b2:	f9 f0       	breq	.+62     	; 0x15f2 <turnOffPWM+0x4c>
    15b4:	08 95       	ret
    15b6:	88 30       	cpi	r24, 0x08	; 8
    15b8:	71 f0       	breq	.+28     	; 0x15d6 <turnOffPWM+0x30>
    15ba:	89 30       	cpi	r24, 0x09	; 9
    15bc:	91 f0       	breq	.+36     	; 0x15e2 <turnOffPWM+0x3c>
    15be:	85 30       	cpi	r24, 0x05	; 5
    15c0:	b9 f4       	brne	.+46     	; 0x15f0 <turnOffPWM+0x4a>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    15c2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    15c6:	8f 7d       	andi	r24, 0xDF	; 223
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <turnOffPWM+0x2a>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    15ca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    15ce:	8f 77       	andi	r24, 0x7F	; 127
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    15d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:88
        break;
    15d4:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    15d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    15da:	8f 77       	andi	r24, 0x7F	; 127
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    15dc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:110
        break;
    15e0:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    15e2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    15e6:	8f 7d       	andi	r24, 0xDF	; 223
    15e8:	f9 cf       	rjmp	.-14     	; 0x15dc <turnOffPWM+0x36>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    15ea:	84 b5       	in	r24, 0x24	; 36
    15ec:	8f 77       	andi	r24, 0x7F	; 127
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    15ee:	84 bd       	out	0x24, r24	; 36
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    15f0:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    15f2:	84 b5       	in	r24, 0x24	; 36
    15f4:	8f 7d       	andi	r24, 0xDF	; 223
    15f6:	fb cf       	rjmp	.-10     	; 0x15ee <turnOffPWM+0x48>

000015f8 <pinMode>:
pinMode():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	fc 01       	movw	r30, r24
    1600:	e1 58       	subi	r30, 0x81	; 129
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	24 91       	lpm	r18, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1606:	8a 56       	subi	r24, 0x6A	; 106
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	fc 01       	movw	r30, r24
    160c:	84 91       	lpm	r24, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    160e:	88 23       	and	r24, r24
    1610:	c9 f0       	breq	.+50     	; 0x1644 <pinMode+0x4c>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	fc 01       	movw	r30, r24
    161a:	ef 53       	subi	r30, 0x3F	; 63
    161c:	ff 4f       	sbci	r31, 0xFF	; 255
    161e:	a5 91       	lpm	r26, Z+
    1620:	b4 91       	lpm	r27, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1622:	fc 01       	movw	r30, r24
    1624:	e9 54       	subi	r30, 0x49	; 73
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	c5 91       	lpm	r28, Z+
    162a:	d4 91       	lpm	r29, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    162c:	61 11       	cpse	r22, r1
    162e:	0d c0       	rjmp	.+26     	; 0x164a <pinMode+0x52>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1630:	9f b7       	in	r25, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:43
    cli();
    1632:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1634:	8c 91       	ld	r24, X
    1636:	20 95       	com	r18
    1638:	82 23       	and	r24, r18
    163a:	8c 93       	st	X, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    163c:	88 81       	ld	r24, Y
    163e:	28 23       	and	r18, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1640:	28 83       	st	Y, r18
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1642:	9f bf       	out	0x3f, r25	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    164a:	62 30       	cpi	r22, 0x02	; 2
    164c:	51 f4       	brne	.+20     	; 0x1662 <pinMode+0x6a>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    164e:	9f b7       	in	r25, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:49
    cli();
    1650:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1652:	3c 91       	ld	r19, X
    1654:	82 2f       	mov	r24, r18
    1656:	80 95       	com	r24
    1658:	83 23       	and	r24, r19
    165a:	8c 93       	st	X, r24
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    165c:	e8 81       	ld	r30, Y
    165e:	2e 2b       	or	r18, r30
    1660:	ef cf       	rjmp	.-34     	; 0x1640 <pinMode+0x48>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1662:	8f b7       	in	r24, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:55
    cli();
    1664:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1666:	ec 91       	ld	r30, X
    1668:	2e 2b       	or	r18, r30
    166a:	2c 93       	st	X, r18
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    166c:	8f bf       	out	0x3f, r24	; 63
    166e:	ea cf       	rjmp	.-44     	; 0x1644 <pinMode+0x4c>

00001670 <digitalWrite>:
digitalWrite():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1670:	1f 93       	push	r17
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	f9 01       	movw	r30, r18
    167c:	e8 59       	subi	r30, 0x98	; 152
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	84 91       	lpm	r24, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    1682:	f9 01       	movw	r30, r18
    1684:	e1 58       	subi	r30, 0x81	; 129
    1686:	ff 4f       	sbci	r31, 0xFF	; 255
    1688:	d4 91       	lpm	r29, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    168a:	f9 01       	movw	r30, r18
    168c:	ea 56       	subi	r30, 0x6A	; 106
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	c4 91       	lpm	r28, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    1692:	cc 23       	and	r28, r28
    1694:	a9 f0       	breq	.+42     	; 0x16c0 <digitalWrite+0x50>
    1696:	16 2f       	mov	r17, r22
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1698:	81 11       	cpse	r24, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    169a:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <turnOffPWM>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    169e:	ec 2f       	mov	r30, r28
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	ee 0f       	add	r30, r30
    16a4:	ff 1f       	adc	r31, r31
    16a6:	e9 54       	subi	r30, 0x49	; 73
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	a5 91       	lpm	r26, Z+
    16ac:	b4 91       	lpm	r27, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    16ae:	8f b7       	in	r24, 0x3f	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:203
  cli();
    16b0:	f8 94       	cli
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    16b2:	ec 91       	ld	r30, X
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    16b4:	11 11       	cpse	r17, r1
    16b6:	08 c0       	rjmp	.+16     	; 0x16c8 <digitalWrite+0x58>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    16b8:	d0 95       	com	r29
    16ba:	de 23       	and	r29, r30
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    16bc:	dc 93       	st	X, r29
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    16be:	8f bf       	out	0x3f, r24	; 63
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:212
}
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	1f 91       	pop	r17
    16c6:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    16c8:	de 2b       	or	r29, r30
    16ca:	f8 cf       	rjmp	.-16     	; 0x16bc <digitalWrite+0x4c>

000016cc <digitalRead>:
digitalRead():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	f9 01       	movw	r30, r18
    16d6:	e8 59       	subi	r30, 0x98	; 152
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	84 91       	lpm	r24, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    16dc:	f9 01       	movw	r30, r18
    16de:	e1 58       	subi	r30, 0x81	; 129
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	d4 91       	lpm	r29, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    16e4:	f9 01       	movw	r30, r18
    16e6:	ea 56       	subi	r30, 0x6A	; 106
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	c4 91       	lpm	r28, Z
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    16ec:	cc 23       	and	r28, r28
    16ee:	a1 f0       	breq	.+40     	; 0x1718 <digitalRead+0x4c>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    16f0:	81 11       	cpse	r24, r1
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    16f2:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <turnOffPWM>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    16f6:	ec 2f       	mov	r30, r28
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	ee 0f       	add	r30, r30
    16fc:	ff 1f       	adc	r31, r31
    16fe:	e3 55       	subi	r30, 0x53	; 83
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	a5 91       	lpm	r26, Z+
    1704:	b4 91       	lpm	r27, Z
    1706:	ec 91       	ld	r30, X
    1708:	ed 23       	and	r30, r29
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	09 f4       	brne	.+2      	; 0x1712 <digitalRead+0x46>
    1710:	80 e0       	ldi	r24, 0x00	; 0
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	08 95       	ret
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	fa cf       	rjmp	.-12     	; 0x1712 <digitalRead+0x46>

0000171e <initVariant>:
initVariant():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    171e:	08 95       	ret

00001720 <main>:
main():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1720:	0e 94 ab 0a 	call	0x1556	; 0x1556 <init>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:37

  initVariant();
    1724:	0e 94 8f 0b 	call	0x171e	; 0x171e <initVariant>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1728:	0e 94 95 01 	call	0x32a	; 0x32a <setup>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    172c:	c0 e0       	ldi	r28, 0x00	; 0
    172e:	d0 e0       	ldi	r29, 0x00	; 0
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1730:	0e 94 08 03 	call	0x610	; 0x610 <loop>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1734:	20 97       	sbiw	r28, 0x00	; 0
    1736:	e1 f3       	breq	.-8      	; 0x1730 <main+0x10>
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1738:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    173c:	f9 cf       	rjmp	.-14     	; 0x1730 <main+0x10>

0000173e <yield>:
__empty():
/Users/Zille/Library/Arduino15/packages/MiniCore/hardware/avr/2.2.1/cores/MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    173e:	08 95       	ret

00001740 <__udivmodhi4>:
__udivmodhi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    1740:	aa 1b       	sub	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    1742:	bb 1b       	sub	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    1744:	51 e1       	ldi	r21, 0x11	; 17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    1746:	07 c0       	rjmp	.+14     	; 0x1756 <__udivmodhi4_ep>

00001748 <__udivmodhi4_loop>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    1748:	aa 1f       	adc	r26, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    174a:	bb 1f       	adc	r27, r27
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    174c:	a6 17       	cp	r26, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    174e:	b7 07       	cpc	r27, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    1750:	10 f0       	brcs	.+4      	; 0x1756 <__udivmodhi4_ep>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    1752:	a6 1b       	sub	r26, r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    1754:	b7 0b       	sbc	r27, r23

00001756 <__udivmodhi4_ep>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    1756:	88 1f       	adc	r24, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    1758:	99 1f       	adc	r25, r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    175a:	5a 95       	dec	r21
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    175c:	a9 f7       	brne	.-22     	; 0x1748 <__udivmodhi4_loop>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    175e:	80 95       	com	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    1760:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    1762:	bc 01       	movw	r22, r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    1764:	cd 01       	movw	r24, r26
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    1766:	08 95       	ret

00001768 <__divmodhi4>:
__divmodhi4():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
    1768:	97 fb       	bst	r25, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
    176a:	07 2e       	mov	r0, r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
    176c:	16 f4       	brtc	.+4      	; 0x1772 <__divmodhi4+0xa>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
    176e:	00 94       	com	r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
    1770:	07 d0       	rcall	.+14     	; 0x1780 <__divmodhi4_neg1>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
    1772:	77 fd       	sbrc	r23, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
    1774:	09 d0       	rcall	.+18     	; 0x1788 <__divmodhi4_neg2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
    1776:	0e 94 a0 0b 	call	0x1740	; 0x1740 <__udivmodhi4>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
    177a:	07 fc       	sbrc	r0, 7
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
    177c:	05 d0       	rcall	.+10     	; 0x1788 <__divmodhi4_neg2>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
    177e:	3e f4       	brtc	.+14     	; 0x178e <__divmodhi4_exit>

00001780 <__divmodhi4_neg1>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
    1780:	90 95       	com	r25
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
    1782:	81 95       	neg	r24
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
    1786:	08 95       	ret

00001788 <__divmodhi4_neg2>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
    1788:	70 95       	com	r23
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
    178a:	61 95       	neg	r22
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
    178c:	7f 4f       	sbci	r23, 0xFF	; 255

0000178e <__divmodhi4_exit>:
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
    178e:	08 95       	ret

00001790 <__tablejump2__>:
__tablejump2__():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1790:	ee 0f       	add	r30, r30
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1792:	ff 1f       	adc	r31, r31
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1794:	05 90       	lpm	r0, Z+
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1796:	f4 91       	lpm	r31, Z
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1798:	e0 2d       	mov	r30, r0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    179a:	09 94       	ijmp

0000179c <malloc>:
malloc():
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	82 30       	cpi	r24, 0x02	; 2
    17a6:	91 05       	cpc	r25, r1
    17a8:	10 f4       	brcc	.+4      	; 0x17ae <malloc+0x12>
    17aa:	82 e0       	ldi	r24, 0x02	; 2
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <__flp>
    17b2:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <__flp+0x1>
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	a0 e0       	ldi	r26, 0x00	; 0
    17be:	30 97       	sbiw	r30, 0x00	; 0
    17c0:	99 f4       	brne	.+38     	; 0x17e8 <malloc+0x4c>
    17c2:	21 15       	cp	r18, r1
    17c4:	31 05       	cpc	r19, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <malloc+0x2e>
    17c8:	4a c0       	rjmp	.+148    	; 0x185e <malloc+0xc2>
    17ca:	28 1b       	sub	r18, r24
    17cc:	39 0b       	sbc	r19, r25
    17ce:	24 30       	cpi	r18, 0x04	; 4
    17d0:	31 05       	cpc	r19, r1
    17d2:	d8 f5       	brcc	.+118    	; 0x184a <malloc+0xae>
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	9b 81       	ldd	r25, Y+3	; 0x03
    17d8:	61 15       	cp	r22, r1
    17da:	71 05       	cpc	r23, r1
    17dc:	89 f1       	breq	.+98     	; 0x1840 <malloc+0xa4>
    17de:	fb 01       	movw	r30, r22
    17e0:	93 83       	std	Z+3, r25	; 0x03
    17e2:	82 83       	std	Z+2, r24	; 0x02
    17e4:	fe 01       	movw	r30, r28
    17e6:	11 c0       	rjmp	.+34     	; 0x180a <malloc+0x6e>
    17e8:	40 81       	ld	r20, Z
    17ea:	51 81       	ldd	r21, Z+1	; 0x01
    17ec:	02 81       	ldd	r16, Z+2	; 0x02
    17ee:	13 81       	ldd	r17, Z+3	; 0x03
    17f0:	48 17       	cp	r20, r24
    17f2:	59 07       	cpc	r21, r25
    17f4:	e0 f0       	brcs	.+56     	; 0x182e <malloc+0x92>
    17f6:	48 17       	cp	r20, r24
    17f8:	59 07       	cpc	r21, r25
    17fa:	99 f4       	brne	.+38     	; 0x1822 <malloc+0x86>
    17fc:	10 97       	sbiw	r26, 0x00	; 0
    17fe:	61 f0       	breq	.+24     	; 0x1818 <malloc+0x7c>
    1800:	12 96       	adiw	r26, 0x02	; 2
    1802:	0c 93       	st	X, r16
    1804:	12 97       	sbiw	r26, 0x02	; 2
    1806:	13 96       	adiw	r26, 0x03	; 3
    1808:	1c 93       	st	X, r17
    180a:	32 96       	adiw	r30, 0x02	; 2
    180c:	cf 01       	movw	r24, r30
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	08 95       	ret
    1818:	00 93 f7 03 	sts	0x03F7, r16	; 0x8003f7 <__flp>
    181c:	10 93 f8 03 	sts	0x03F8, r17	; 0x8003f8 <__flp+0x1>
    1820:	f4 cf       	rjmp	.-24     	; 0x180a <malloc+0x6e>
    1822:	21 15       	cp	r18, r1
    1824:	31 05       	cpc	r19, r1
    1826:	51 f0       	breq	.+20     	; 0x183c <malloc+0xa0>
    1828:	42 17       	cp	r20, r18
    182a:	53 07       	cpc	r21, r19
    182c:	38 f0       	brcs	.+14     	; 0x183c <malloc+0xa0>
    182e:	a9 01       	movw	r20, r18
    1830:	db 01       	movw	r26, r22
    1832:	9a 01       	movw	r18, r20
    1834:	bd 01       	movw	r22, r26
    1836:	df 01       	movw	r26, r30
    1838:	f8 01       	movw	r30, r16
    183a:	c1 cf       	rjmp	.-126    	; 0x17be <malloc+0x22>
    183c:	ef 01       	movw	r28, r30
    183e:	f9 cf       	rjmp	.-14     	; 0x1832 <malloc+0x96>
    1840:	90 93 f8 03 	sts	0x03F8, r25	; 0x8003f8 <__flp+0x1>
    1844:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <__flp>
    1848:	cd cf       	rjmp	.-102    	; 0x17e4 <malloc+0x48>
    184a:	fe 01       	movw	r30, r28
    184c:	e2 0f       	add	r30, r18
    184e:	f3 1f       	adc	r31, r19
    1850:	81 93       	st	Z+, r24
    1852:	91 93       	st	Z+, r25
    1854:	22 50       	subi	r18, 0x02	; 2
    1856:	31 09       	sbc	r19, r1
    1858:	39 83       	std	Y+1, r19	; 0x01
    185a:	28 83       	st	Y, r18
    185c:	d7 cf       	rjmp	.-82     	; 0x180c <malloc+0x70>
    185e:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <__brkval>
    1862:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <__brkval+0x1>
    1866:	23 2b       	or	r18, r19
    1868:	41 f4       	brne	.+16     	; 0x187a <malloc+0xde>
    186a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    186e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1872:	30 93 f6 03 	sts	0x03F6, r19	; 0x8003f6 <__brkval+0x1>
    1876:	20 93 f5 03 	sts	0x03F5, r18	; 0x8003f5 <__brkval>
    187a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    187e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1882:	21 15       	cp	r18, r1
    1884:	31 05       	cpc	r19, r1
    1886:	41 f4       	brne	.+16     	; 0x1898 <malloc+0xfc>
    1888:	2d b7       	in	r18, 0x3d	; 61
    188a:	3e b7       	in	r19, 0x3e	; 62
    188c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1890:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1894:	24 1b       	sub	r18, r20
    1896:	35 0b       	sbc	r19, r21
    1898:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <__brkval>
    189c:	f0 91 f6 03 	lds	r31, 0x03F6	; 0x8003f6 <__brkval+0x1>
    18a0:	e2 17       	cp	r30, r18
    18a2:	f3 07       	cpc	r31, r19
    18a4:	a0 f4       	brcc	.+40     	; 0x18ce <malloc+0x132>
    18a6:	2e 1b       	sub	r18, r30
    18a8:	3f 0b       	sbc	r19, r31
    18aa:	28 17       	cp	r18, r24
    18ac:	39 07       	cpc	r19, r25
    18ae:	78 f0       	brcs	.+30     	; 0x18ce <malloc+0x132>
    18b0:	ac 01       	movw	r20, r24
    18b2:	4e 5f       	subi	r20, 0xFE	; 254
    18b4:	5f 4f       	sbci	r21, 0xFF	; 255
    18b6:	24 17       	cp	r18, r20
    18b8:	35 07       	cpc	r19, r21
    18ba:	48 f0       	brcs	.+18     	; 0x18ce <malloc+0x132>
    18bc:	4e 0f       	add	r20, r30
    18be:	5f 1f       	adc	r21, r31
    18c0:	50 93 f6 03 	sts	0x03F6, r21	; 0x8003f6 <__brkval+0x1>
    18c4:	40 93 f5 03 	sts	0x03F5, r20	; 0x8003f5 <__brkval>
    18c8:	81 93       	st	Z+, r24
    18ca:	91 93       	st	Z+, r25
    18cc:	9f cf       	rjmp	.-194    	; 0x180c <malloc+0x70>
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	e0 e0       	ldi	r30, 0x00	; 0
    18d2:	9c cf       	rjmp	.-200    	; 0x180c <malloc+0x70>

000018d4 <free>:
free():
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	e9 f0       	breq	.+58     	; 0x1916 <free+0x42>
    18dc:	fc 01       	movw	r30, r24
    18de:	32 97       	sbiw	r30, 0x02	; 2
    18e0:	13 82       	std	Z+3, r1	; 0x03
    18e2:	12 82       	std	Z+2, r1	; 0x02
    18e4:	a0 91 f7 03 	lds	r26, 0x03F7	; 0x8003f7 <__flp>
    18e8:	b0 91 f8 03 	lds	r27, 0x03F8	; 0x8003f8 <__flp+0x1>
    18ec:	ed 01       	movw	r28, r26
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	10 97       	sbiw	r26, 0x00	; 0
    18f4:	a1 f4       	brne	.+40     	; 0x191e <free+0x4a>
    18f6:	20 81       	ld	r18, Z
    18f8:	31 81       	ldd	r19, Z+1	; 0x01
    18fa:	82 0f       	add	r24, r18
    18fc:	93 1f       	adc	r25, r19
    18fe:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <__brkval>
    1902:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <__brkval+0x1>
    1906:	28 17       	cp	r18, r24
    1908:	39 07       	cpc	r19, r25
    190a:	09 f0       	breq	.+2      	; 0x190e <free+0x3a>
    190c:	61 c0       	rjmp	.+194    	; 0x19d0 <free+0xfc>
    190e:	f0 93 f6 03 	sts	0x03F6, r31	; 0x8003f6 <__brkval+0x1>
    1912:	e0 93 f5 03 	sts	0x03F5, r30	; 0x8003f5 <__brkval>
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	08 95       	ret
    191c:	ea 01       	movw	r28, r20
    191e:	ce 17       	cp	r28, r30
    1920:	df 07       	cpc	r29, r31
    1922:	e8 f5       	brcc	.+122    	; 0x199e <free+0xca>
    1924:	4a 81       	ldd	r20, Y+2	; 0x02
    1926:	5b 81       	ldd	r21, Y+3	; 0x03
    1928:	9e 01       	movw	r18, r28
    192a:	41 15       	cp	r20, r1
    192c:	51 05       	cpc	r21, r1
    192e:	b1 f7       	brne	.-20     	; 0x191c <free+0x48>
    1930:	e9 01       	movw	r28, r18
    1932:	fb 83       	std	Y+3, r31	; 0x03
    1934:	ea 83       	std	Y+2, r30	; 0x02
    1936:	49 91       	ld	r20, Y+
    1938:	59 91       	ld	r21, Y+
    193a:	c4 0f       	add	r28, r20
    193c:	d5 1f       	adc	r29, r21
    193e:	ec 17       	cp	r30, r28
    1940:	fd 07       	cpc	r31, r29
    1942:	61 f4       	brne	.+24     	; 0x195c <free+0x88>
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	02 96       	adiw	r24, 0x02	; 2
    194a:	84 0f       	add	r24, r20
    194c:	95 1f       	adc	r25, r21
    194e:	e9 01       	movw	r28, r18
    1950:	99 83       	std	Y+1, r25	; 0x01
    1952:	88 83       	st	Y, r24
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	9b 83       	std	Y+3, r25	; 0x03
    195a:	8a 83       	std	Y+2, r24	; 0x02
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	e0 e0       	ldi	r30, 0x00	; 0
    1960:	12 96       	adiw	r26, 0x02	; 2
    1962:	8d 91       	ld	r24, X+
    1964:	9c 91       	ld	r25, X
    1966:	13 97       	sbiw	r26, 0x03	; 3
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	b9 f5       	brne	.+110    	; 0x19da <free+0x106>
    196c:	2d 91       	ld	r18, X+
    196e:	3c 91       	ld	r19, X
    1970:	11 97       	sbiw	r26, 0x01	; 1
    1972:	cd 01       	movw	r24, r26
    1974:	02 96       	adiw	r24, 0x02	; 2
    1976:	82 0f       	add	r24, r18
    1978:	93 1f       	adc	r25, r19
    197a:	20 91 f5 03 	lds	r18, 0x03F5	; 0x8003f5 <__brkval>
    197e:	30 91 f6 03 	lds	r19, 0x03F6	; 0x8003f6 <__brkval+0x1>
    1982:	28 17       	cp	r18, r24
    1984:	39 07       	cpc	r19, r25
    1986:	39 f6       	brne	.-114    	; 0x1916 <free+0x42>
    1988:	30 97       	sbiw	r30, 0x00	; 0
    198a:	51 f5       	brne	.+84     	; 0x19e0 <free+0x10c>
    198c:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <__flp+0x1>
    1990:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <__flp>
    1994:	b0 93 f6 03 	sts	0x03F6, r27	; 0x8003f6 <__brkval+0x1>
    1998:	a0 93 f5 03 	sts	0x03F5, r26	; 0x8003f5 <__brkval>
    199c:	bc cf       	rjmp	.-136    	; 0x1916 <free+0x42>
    199e:	d3 83       	std	Z+3, r29	; 0x03
    19a0:	c2 83       	std	Z+2, r28	; 0x02
    19a2:	40 81       	ld	r20, Z
    19a4:	51 81       	ldd	r21, Z+1	; 0x01
    19a6:	84 0f       	add	r24, r20
    19a8:	95 1f       	adc	r25, r21
    19aa:	c8 17       	cp	r28, r24
    19ac:	d9 07       	cpc	r29, r25
    19ae:	61 f4       	brne	.+24     	; 0x19c8 <free+0xf4>
    19b0:	4e 5f       	subi	r20, 0xFE	; 254
    19b2:	5f 4f       	sbci	r21, 0xFF	; 255
    19b4:	88 81       	ld	r24, Y
    19b6:	99 81       	ldd	r25, Y+1	; 0x01
    19b8:	48 0f       	add	r20, r24
    19ba:	59 1f       	adc	r21, r25
    19bc:	51 83       	std	Z+1, r21	; 0x01
    19be:	40 83       	st	Z, r20
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	9b 81       	ldd	r25, Y+3	; 0x03
    19c4:	93 83       	std	Z+3, r25	; 0x03
    19c6:	82 83       	std	Z+2, r24	; 0x02
    19c8:	21 15       	cp	r18, r1
    19ca:	31 05       	cpc	r19, r1
    19cc:	09 f0       	breq	.+2      	; 0x19d0 <free+0xfc>
    19ce:	b0 cf       	rjmp	.-160    	; 0x1930 <free+0x5c>
    19d0:	f0 93 f8 03 	sts	0x03F8, r31	; 0x8003f8 <__flp+0x1>
    19d4:	e0 93 f7 03 	sts	0x03F7, r30	; 0x8003f7 <__flp>
    19d8:	9e cf       	rjmp	.-196    	; 0x1916 <free+0x42>
    19da:	fd 01       	movw	r30, r26
    19dc:	dc 01       	movw	r26, r24
    19de:	c0 cf       	rjmp	.-128    	; 0x1960 <free+0x8c>
    19e0:	13 82       	std	Z+3, r1	; 0x03
    19e2:	12 82       	std	Z+2, r1	; 0x02
    19e4:	d7 cf       	rjmp	.-82     	; 0x1994 <free+0xc0>

000019e6 <memset>:
memset():
    19e6:	dc 01       	movw	r26, r24
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <memset+0x6>
    19ea:	6d 93       	st	X+, r22
    19ec:	41 50       	subi	r20, 0x01	; 1
    19ee:	50 40       	sbci	r21, 0x00	; 0
    19f0:	e0 f7       	brcc	.-8      	; 0x19ea <memset+0x4>
    19f2:	08 95       	ret

000019f4 <__do_global_dtors>:
__do_global_dtors():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2496
    19f4:	10 e0       	ldi	r17, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2497
    19f6:	c7 e6       	ldi	r28, 0x67	; 103
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2498
    19f8:	d0 e0       	ldi	r29, 0x00	; 0
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2502
    19fa:	04 c0       	rjmp	.+8      	; 0x1a04 <__do_global_dtors+0x10>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2508
    19fc:	fe 01       	movw	r30, r28
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2509
    19fe:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__tablejump2__>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2510
    1a02:	21 96       	adiw	r28, 0x01	; 1
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2515
    1a04:	c8 36       	cpi	r28, 0x68	; 104
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2516
    1a06:	d1 07       	cpc	r29, r17
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2521
    1a08:	c9 f7       	brne	.-14     	; 0x19fc <__do_global_dtors+0x8>
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1a0a:	f8 94       	cli

00001a0c <__stop_program>:
__stop_program():
/Users/jenkins/jenkins/workspace/avr-gcc-staging/label/mac-mini/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1a0c:	ff cf       	rjmp	.-2      	; 0x1a0c <__stop_program>
